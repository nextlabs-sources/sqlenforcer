#line 2 "sqlparser_bigquery_flex.cpp"

#line 4 "sqlparser_bigquery_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define bigquery__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer bigquery__create_buffer
#endif

#ifdef yy_delete_buffer
#define bigquery__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer bigquery__delete_buffer
#endif

#ifdef yy_scan_buffer
#define bigquery__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer bigquery__scan_buffer
#endif

#ifdef yy_scan_string
#define bigquery__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string bigquery__scan_string
#endif

#ifdef yy_scan_bytes
#define bigquery__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes bigquery__scan_bytes
#endif

#ifdef yy_init_buffer
#define bigquery__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer bigquery__init_buffer
#endif

#ifdef yy_flush_buffer
#define bigquery__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer bigquery__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define bigquery__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state bigquery__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define bigquery__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer bigquery__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define bigquery_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state bigquery_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define bigquery_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state bigquery_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define bigquery_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack bigquery_ensure_buffer_stack
#endif

#ifdef yylex
#define bigquery_lex_ALREADY_DEFINED
#else
#define yylex bigquery_lex
#endif

#ifdef yyrestart
#define bigquery_restart_ALREADY_DEFINED
#else
#define yyrestart bigquery_restart
#endif

#ifdef yylex_init
#define bigquery_lex_init_ALREADY_DEFINED
#else
#define yylex_init bigquery_lex_init
#endif

#ifdef yylex_init_extra
#define bigquery_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra bigquery_lex_init_extra
#endif

#ifdef yylex_destroy
#define bigquery_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy bigquery_lex_destroy
#endif

#ifdef yyget_debug
#define bigquery_get_debug_ALREADY_DEFINED
#else
#define yyget_debug bigquery_get_debug
#endif

#ifdef yyset_debug
#define bigquery_set_debug_ALREADY_DEFINED
#else
#define yyset_debug bigquery_set_debug
#endif

#ifdef yyget_extra
#define bigquery_get_extra_ALREADY_DEFINED
#else
#define yyget_extra bigquery_get_extra
#endif

#ifdef yyset_extra
#define bigquery_set_extra_ALREADY_DEFINED
#else
#define yyset_extra bigquery_set_extra
#endif

#ifdef yyget_in
#define bigquery_get_in_ALREADY_DEFINED
#else
#define yyget_in bigquery_get_in
#endif

#ifdef yyset_in
#define bigquery_set_in_ALREADY_DEFINED
#else
#define yyset_in bigquery_set_in
#endif

#ifdef yyget_out
#define bigquery_get_out_ALREADY_DEFINED
#else
#define yyget_out bigquery_get_out
#endif

#ifdef yyset_out
#define bigquery_set_out_ALREADY_DEFINED
#else
#define yyset_out bigquery_set_out
#endif

#ifdef yyget_leng
#define bigquery_get_leng_ALREADY_DEFINED
#else
#define yyget_leng bigquery_get_leng
#endif

#ifdef yyget_text
#define bigquery_get_text_ALREADY_DEFINED
#else
#define yyget_text bigquery_get_text
#endif

#ifdef yyget_lineno
#define bigquery_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno bigquery_get_lineno
#endif

#ifdef yyset_lineno
#define bigquery_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno bigquery_set_lineno
#endif

#ifdef yyget_column
#define bigquery_get_column_ALREADY_DEFINED
#else
#define yyget_column bigquery_get_column
#endif

#ifdef yyset_column
#define bigquery_set_column_ALREADY_DEFINED
#else
#define yyset_column bigquery_set_column
#endif

#ifdef yywrap
#define bigquery_wrap_ALREADY_DEFINED
#else
#define yywrap bigquery_wrap
#endif

#ifdef yyget_lval
#define bigquery_get_lval_ALREADY_DEFINED
#else
#define yyget_lval bigquery_get_lval
#endif

#ifdef yyset_lval
#define bigquery_set_lval_ALREADY_DEFINED
#else
#define yyset_lval bigquery_set_lval
#endif

#ifdef yyget_lloc
#define bigquery_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc bigquery_get_lloc
#endif

#ifdef yyset_lloc
#define bigquery_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc bigquery_set_lloc
#endif

#ifdef yyalloc
#define bigquery_alloc_ALREADY_DEFINED
#else
#define yyalloc bigquery_alloc
#endif

#ifdef yyrealloc
#define bigquery_realloc_ALREADY_DEFINED
#else
#define yyrealloc bigquery_realloc
#endif

#ifdef yyfree
#define bigquery_free_ALREADY_DEFINED
#else
#define yyfree bigquery_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define bigquery_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 267
#define YY_END_OF_BUFFER 268
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1080] =
    {   0,
      264,  264,    0,    0,  236,  236,  245,  245,  268,  266,
      252,  252,  253,  238,  251,  253,  229,  253,  253,  253,
      220,  220,  259,  255,  257,  265,  266,  250,  250,  250,
      250,  250,  250,   41,  250,  250,  250,   54,  250,   58,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  266,  253,  267,  236,  237,  235,  245,
      246,  244,  252,  261,  251,  251,  225,    0,  224,  220,
        0,    0,  263,  258,  260,  256,  262,  249,    0,  250,
      250,  250,  250,  250,    4,  173,  250,  239,  230,  250,
      250,  250,    8,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  217,  250,   46,   52,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,   67,  250,
      250,  250,  250,   73,   74,   76,  250,  250,  250,  250,
      250,  250,  250,  240,  231,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  109,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,    0,    0,  254,  236,  233,  234,  245,
      242,  243,    0,    0,  224,    0,    0,  221,  219,  249,
        0,    0,    1,    2,    3,  250,  250,    5,    6,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,   23,   24,  250,  250,
      250,  250,  250,  250,   31,  250,  250,  250,  250,  250,
      250,  250,  250,   38,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  154,  250,  250,
      250,  250,  250,  250,  250,   59,  250,  250,   60,   62,
      250,  250,  250,   68,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  241,  232,  250,  250,   90,  250,  250,  250,  250,
       92,  250,  250,  250,  250,  250,  250,   99,  250,  250,

      250,  250,  250,  105,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  247,    0,
      223,    0,    0,    0,  222,  248,  250,  250,  250,  250,
      250,  144,  250,   11,    9,   10,  250,  250,  250,  250,
      159,  250,  250,  250,  250,  250,  141,  250,  250,  250,
      250,   28,  250,   30,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,   39,   40,  250,  250,
      250,   45,  250,  250,  250,  250,  250,   51,  250,  250,
       53,  250,  130,  153,   56,   57,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  218,  250,
      250,  250,  250,   75,  250,  250,  250,  250,   80,  250,
      250,  250,  250,  250,   86,   87,   88,  250,  250,  250,
      250,  250,   93,  250,  250,  250,  250,  250,  250,  250,
      100,  250,  102,  250,  250,  250,  250,  250,  250,  107,
      250,  108,  142,  250,  226,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  174,  119,
      250,  250,  121,  123,  124,  251,  250,  250,  140,  250,
      250,  138,  250,  250,  250,  250,  250,   17,  250,   18,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

       32,  250,  250,  250,  250,  250,  228,  129,  250,  250,
      250,  250,   42,  250,  250,   47,  250,  135,  250,  250,
      250,   55,  250,  125,  250,  250,  250,  250,  250,   63,
      250,  250,  250,  250,  157,  250,  128,  250,  250,  250,
      250,   77,  250,  250,   79,  250,  250,  250,  250,  250,
       85,  250,  250,  250,  250,   91,  250,  250,  250,   95,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  111,  250,  250,  250,
      113,  145,  250,  250,  250,  250,  250,  250,  120,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,   26,  250,  250,  250,   33,   34,  250,
       36,  250,  250,  250,  250,  187,  250,  250,   44,  149,
       48,  250,  250,  250,  250,  250,  250,  250,  250,   61,
      183,  250,  250,  250,  250,   69,  250,   71,   72,  126,
      250,   78,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,   96,   97,  250,  250,  250,
      207,  137,  134,  182,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  146,  112,  114,  250,  250,
      250,  250,  250,  250,  150,  250,  250,  250,  250,  250,

        7,  167,  250,  250,   14,   15,  250,  164,  250,  250,
      250,   20,  250,  250,  250,  250,  250,  250,  250,   25,
      250,  250,  250,   35,  189,  250,  136,  250,  250,  250,
      250,  250,  178,  179,  250,  250,  250,  250,  250,  250,
       66,  250,   70,  131,  250,  250,  250,  250,  175,  250,
      250,  127,  148,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  184,  250,  227,  115,  250,  116,  117,  250,  250,
      122,  250,  250,  250,  250,  250,  250,   12,  250,  250,
      250,  250,  250,  250,  139,  190,  250,  191,  250,  250,

      250,  250,   29,  250,  250,  250,  250,   43,  250,   50,
      250,  250,  250,  250,   64,   65,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      188,  250,  101,  250,  250,  250,  250,  250,  250,  186,
      250,  198,  250,  199,  250,  250,  250,  208,  118,  250,
      163,  250,  250,  250,  158,  250,  250,  250,  160,  250,
       19,  250,  250,  250,  192,  250,  176,  177,  250,  210,
      250,   37,  250,   49,  250,  250,  250,  250,  250,  152,
       81,  250,  250,   83,   84,   89,  250,  250,  250,  250,
      165,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      143,  200,  250,  250,  110,  185,  250,  250,  250,  250,
       13,  250,  161,  250,  250,  250,  250,  250,  250,  193,
       27,  250,  250,  250,  151,  250,  169,  250,  250,  250,
      250,  250,  250,  250,   94,  250,  250,  250,  250,  103,
      250,  162,  250,  250,  250,  201,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  147,  250,
      250,  168,  180,  181,  250,  250,  250,  250,  250,  132,
      250,  250,  209,  104,  216,  106,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,   22,  194,  250,
      195,  250,  250,  250,  250,  250,   82,  250,  250,  250,

      133,   98,  250,  250,  250,  250,  250,  250,  250,  250,
      250,   16,  250,  196,  250,  250,  250,  250,  250,  250,
      250,  250,  202,  250,  203,  250,  250,  250,  250,  250,
      250,  250,  197,  250,  250,  250,  250,  250,  212,  213,
      204,  250,  206,  250,  250,  250,  250,  250,  250,  250,
      155,  156,  211,  205,  250,  171,  172,  166,  250,  250,
      250,  250,   21,  250,  250,  250,  250,  250,  250,  214,
      250,  250,  250,  170,  250,  250,  250,  215,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   17,   16,   18,   16,   16,   16,    1,    8,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        8,   50,    8,    8,   51,   52,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,    8,   79,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[80] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    1,    5,    1,
        6,    7,    1,    1,    8,    8,    8,    8,    1,    1,
        1,    1,    1,    9,    9,    9,    9,    9,    9,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       10,   12,    9,    9,    9,    9,    9,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    1
    } ;

static const flex_int16_t yy_base[1094] =
    {   0,
        0,    0,    0,    0,   71,   72,   76,   77,  937, 2255,
       82,   85,  915, 2255,    0, 2255, 2255,  922,   75,  919,
       81,   87,   87, 2255,   90, 2255,  876,  123,  123,  129,
       88,  139,  192,   73,  110,  183,   57,    0,  190,  185,
      226,  275,  151,   69,  344,  391,  236,  117,   93,  250,
        0,   90,   85,  875,  678, 2255,    0,  642,  638,    0,
      632,  631,  133, 2255,    0,    0,  274,    0,  306,  339,
      362,    0, 2255, 2255, 2255, 2255, 2255,    0,  584,    0,
      105,  184,  133,  137,  180,    0,  189, 2255, 2255,  183,
      188,  196,  194,  273,  445,  206,  323,  317,  383,  234,

      242,  258,  262,  349,  297,  301,  320,  367,  375,  327,
      329,  332,  358,  372,    0,  385,  428,  385,  392,  425,
      404,  439,  400,  403,  448,  450,  441,  435,  438,  460,
      487,  455,  454,  479,  478,  497,  494,  484,  500,  488,
      489,  503,  508, 2255, 2255,  496,  266,  539,  505,  492,
      600,  512,  505,  540,  520,  509,  552,  549,  506,  543,
      552,  552,  545,  562,  595,  569,  567,  589,  606,  574,
      598,  589,  584,  549,  539, 2255,    0, 2255, 2255,    0,
     2255, 2255,  628,  540,  650,  664,  310,  656,    0,    0,
      497,  495,    0,    0,  495,  582,  602,    0,    0,  602,

      489,  619,  629,  625,  641,  650,  659,  653,  645,  650,
      655,  669,  652,  667,  655,  669,  661,    0,  676,  673,
      660,  677,  661,  677,  664,  684,  683,  667,  669,  670,
      685,  712,  707,    0,  716,  708,  710,  718,  704,  717,
      709,  713,  724,  725,  748,  712,  717,    0,  725,  716,
      734,  719,  735,  732,  735,    0,  727,  734,  726,    0,
      758,  751,  763,    0,  488,  765,  767,  775,  776,  778,
      766,  761,  784,  782,  783,  772,  774,  792,  793,  779,
      791, 2255, 2255,  799,  778,    0,  799,  793,  804,  813,
      810,  825,  814,  820,  822,  834,  822,  823,  831,  839,

      827,  842,  839,    0,  843,  831,  838,  835,  835,  850,
      846,  852,  842,  847,  848,  853,  864,  877,  865,  866,
      885,  879,  884,  883,  895,  892,  884,  898,  484,  926,
      941,  524,  273,  948,  952,  441,  887,  910,  902,  932,
      924,    0,  930,    0,    0,    0,  945,  410,  950,  947,
      948,  935,  939,  939,  409,  954,  940,  955,  941,  943,
      959,    0,  956,    0,  392,  951,  953,  954,  950,  952,
      972,  969,  955,  956,  968,  984,    0,    0,  977,  981,
      992,    0,  989,  990,  991,  423,  992,    0, 1006, 1008,
        0, 1010,  375,    0,    0,    0,  996, 1014, 1003, 1010,

     1000, 1020, 1014, 1014, 1010, 1009, 1006, 1024, 1022, 1012,
     1029, 1013, 1029,    0, 1025, 1039, 1037, 1046,    0, 1056,
     1061, 1062, 1048, 1064,    0,    0,    0, 1055, 1050, 1074,
     1071, 1057,    0, 1064,  355, 1061, 1075, 1067, 1080, 1076,
        0, 1074,    0, 1067, 1083, 1075, 1087, 1090, 1087,    0,
     1080,    0, 1094, 1082,    0, 1107, 1102, 1110, 1110, 1107,
     1107, 1122, 1126, 1124, 1132, 1125, 1119, 1131,    0,    0,
     1132, 1124, 1126,    0,    0, 2255, 1142, 1120,  349, 1140,
     1131,    0, 1128, 1127, 1129, 1132, 1132, 1148,  339,    0,
     1155, 1155, 1162, 1183, 1158, 1170, 1180,  335, 1175, 1167,

        0, 1186, 1172, 1189, 1175, 1192,    0,  333,  365, 1173,
     1172, 1198, 1192, 1197, 1200,    0, 1186,    0, 1217, 1203,
     1208,    0, 1193,    0, 1216, 1208, 1210, 1235, 1216,    0,
     1223, 1229, 1244, 1246,    0, 1242,    0, 1240, 1230, 1232,
     1232,    0, 1252, 1235,    0, 1235, 1243, 1255, 1241, 1256,
        0, 1243, 1247, 1261, 1263,    0, 1246, 1270, 1271,    0,
     1283, 1274, 1282, 1289, 1280, 1278, 1294, 1283, 1280, 1293,
     1303, 1288, 1320, 1294, 1311, 1299,    0, 1292, 1297, 1313,
        0, 1300, 1319, 1308, 1311, 1316, 1332, 1324,    0, 1322,
     1331, 1343,  300, 1355, 1343, 1341, 1358, 1349, 1359, 1345,

     1350, 1361, 1354, 1362, 1355, 1363, 1373, 1369, 1358, 1362,
     1377, 1378, 1369,    0, 1373, 1394, 1389,    0,    0, 1396,
        0, 1383, 1388,  329, 1404,    0, 1394, 1401,    0,    0,
        0, 1411, 1416, 1408, 1403, 1421, 1411, 1419, 1420,    0,
        0, 1423, 1428, 1419, 1421,    0, 1431,    0,    0,    0,
     1423,    0, 1427, 1417, 1429, 1431, 1423, 1438,  292, 1444,
     1435, 1443, 1458, 1455, 1467,    0,    0, 1457, 1458,  289,
      288,  287,    0,    0,  285, 1473, 1474, 1473, 1470, 1459,
     1463, 1468, 1458, 1482, 1473,    0,    0,    0, 1471, 1488,
     1485, 1477, 1481, 1491,    0, 1476, 1477, 1511, 1498, 1492,

        0,    0, 1508, 1508,    0,    0, 1504,    0, 1511, 1528,
     1511,  284, 1527, 1529, 1529, 1535, 1517, 1534, 1539,    0,
     1540, 1524, 1525,    0,    0, 1546,    0, 1535, 1545, 1544,
     1549, 1541,    0,    0, 1542,  244, 1553, 1560, 1545, 1559,
        0, 1551,    0,    0, 1560, 1568, 1570, 1571,    0, 1565,
     1585,    0,    0, 1587, 1572, 1587, 1591, 1572,  243, 1578,
     1576, 1586, 1606, 1588, 1585, 1598, 1608, 1608, 1619, 1602,
      235,    0, 1620,    0,    0, 1624,    0,    0, 1614, 1632,
        0, 1630, 1627, 1623, 1630, 1639, 1633,    0, 1628, 1635,
     1635, 1640, 1635, 1636,  220,    0, 1654,    0, 1647, 1652,

     1647, 1652,    0, 1659, 1656, 1662,  188,    0, 1650,    0,
     1651, 1678, 1666, 1668,    0,    0, 1682, 1674, 1679, 1682,
     1695, 1689, 1699, 1690, 1682, 1702, 1704, 1691, 1694, 1705,
        0, 1694,    0, 1709, 1704, 1720, 1716, 1715, 1706,    0,
     1710,    0, 1721,    0, 1714, 1711, 1733,    0,    0, 1714,
        0, 1720, 1744, 1730,    0, 1746, 1732, 1754,    0, 1744,
        0, 1752, 1743, 1763,    0, 1760,    0,    0, 1754,    0,
     1748,    0, 1768,    0, 1766, 1759, 1758, 1763, 1765,    0,
        0, 1776, 1783,    0,    0,    0, 1771, 1766, 1779, 1779,
        0, 1794, 1789, 1785, 1787, 1793, 1803, 1811, 1806, 1815,

      147,    0, 1818, 1802,    0,    0, 1809, 1811,   99, 1826,
        0, 1820,    0, 1817, 1826, 1830, 1826, 1816, 1821,    0,
        0, 1835, 1840, 1833,    0, 1839,    0, 1840, 1842,   88,
     1839, 1835, 1839, 1849,    0, 1842, 1864, 1862, 1866,    0,
     1860,    0, 1872, 1860, 1879,    0, 1861, 1861, 1865, 1884,
     1868, 1875, 1887, 1875, 1891, 1891, 1898, 1880,    0, 1882,
     1891,    0,    0,    0, 1916, 1900, 1912, 1914, 1922,    0,
     1913, 1914,    0,    0,    0,    0, 1930, 1926, 1915, 1919,
     1929,   82, 1930, 1926,   80, 1936, 1926,    0,    0, 1940,
        0, 1933, 1945, 1946, 1938, 1946,    0, 1947, 1954, 1955,

        0,    0, 1955, 1954, 1960, 1948, 1957, 1969, 1965, 1957,
     1980,    0, 1963,    0, 1987,   74, 1973, 1979, 1975, 1981,
     1976, 1992,    0, 1993,    0, 1987, 1996, 1995, 2000, 1994,
     2002, 2010,    0, 2012, 1994, 1995, 2013, 1998,    0,    0,
        0, 2015,    0, 2001, 2008, 2009, 2024, 2022, 2018, 2038,
        0,    0,    0,    0, 2021,    0,    0,    0, 2032, 2032,
     2038, 2043,    0, 2052, 2038, 2041, 2032,   68, 2056,    0,
     2060, 2042, 2045,    0, 2048, 2066, 2044,    0, 2255, 2121,
     2133, 2145, 2157, 2161, 2167, 2177, 2189, 2201, 2213, 2218,
     2220, 2230, 2242

    } ;

static const flex_int16_t yy_def[1094] =
    {   0,
     1079,    1, 1080, 1080, 1081, 1081, 1082, 1082, 1079, 1079,
     1079, 1079, 1079, 1079, 1083, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1084, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1086, 1079, 1079, 1087, 1079, 1079, 1088,
     1079, 1079, 1079, 1079, 1083, 1083, 1079, 1089, 1079, 1079,
     1079, 1090, 1079, 1079, 1079, 1079, 1079, 1091, 1092, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1079, 1079, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1079, 1079, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1086, 1079, 1079, 1087, 1079, 1079, 1088,
     1079, 1079, 1079, 1093, 1079, 1079, 1079, 1079, 1090, 1091,
     1092, 1079, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1079, 1079, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1079, 1079,
     1079, 1093, 1093, 1079, 1079, 1079, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1079, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,    0, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079

    } ;

static const flex_int16_t yy_nxt[2335] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   10,
       51,   54,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   55,   58,
       58,   61,   61,   63,   63,   63,   63,   63,   63,   67,
       67,   67,   67,   69,  119,   70,   70,   70,   70,   69,

      111,   70,   70,   70,   70,   73,   74,   75,   71,   76,
       77,   98,  143,  112,   71,   99,  168,  172, 1071,  100,
       59,   59,  173,  119, 1034,   62,   62,   72,   88,  111,
     1011,   89, 1008,  113,   63,   63,   63,   71,  965,  193,
       98,  143,  112,   71,   99,  168,  172,  114,  100,  950,
       90,  173,   94,  165,   91,  166,   72,   81,  167,   82,
       92,   83,  113,   84,   85,   86,   95,   87,  193,   96,
       93,  196,   97,  101,  140,  102,  114,  197,  141,   90,
      103,   94,  165,   91,  166,  104,   81,  167,   82,   92,
       83,  142,   84,   85,   86,   95,   87,  945,   96,   93,

      196,   97,  101,  140,  102,  198,  197,  141,  124,  103,
      194,  115,  116,  120,  104,  105,  125,  121,  199,  117,
      142,  122,  126,  106,  118,  200,  107,  123,  127,  108,
      201,  195,  109,  202,  198,  110,  203,  124,  873,  194,
      115,  116,  120,  213,  105,  125,  121,  199,  117,  128,
      122,  126,  106,  118,  200,  107,  123,  127,  108,  201,
      195,  109,  202,  129,  110,  203,  160,  161,  130,  131,
      864,  282,  213,  162,  283,  223,  163,  169,  128,  164,
      170,  171,  333,  224,  225,  846,  476,  226,   67,   67,
       67,   67,  129,  832,  812,  160,  161,  130,  131,  132,

      133,  183,  162,  134,  223,  163,  169,  204,  164,  170,
      171,  135,  224,  225,  205,  136,  226,  137,  138,  139,
      185,  185,  185,  185,  188,  188,  188,  188,  132,  133,
      183,  230,  134,  186,  794,  764,  204,  763,  762,  761,
      135,  231,  751,  205,  136,  727,  137,  138,  139,  144,
      698,   69,  145,   70,   70,   70,   70,  232,  214,  216,
      230,  237,  186,  215,  217,  238,   71,  146,  147,  239,
      231,  148,  187,  187,  227,  149,  188,  188,  188,  188,
      228,  150,  624,  623,  151,  615,  232,  214,  216,  603,
      237,  229,  215,  217,  238,   71,  146,  147,  239,  594,

      148,  233,  240,  227,  149,  558,  235,  234,  218,  228,
      150,  219,  236,  151,  152,  241,  153,  220,  154,  221,
      229,  242,  246,  247,  222,  523,  155,  251,  156,  255,
      233,  240,  252,  157,  158,  235,  234,  218,  159,  518,
      219,  236,  500,  152,  241,  153,  220,  154,  221,  256,
      242,  246,  247,  222,  248,  155,  251,  156,  255,  491,
      484,  252,  157,  158,  243,  249,  250,  159,  206,  244,
      245,  207,  253,  257,  254,  262,  260,  263,  256,  208,
      264,  209,  258,  248,  259,  210,  261,  269,  211,  212,
      265,  266,  191,  243,  249,  250,  270,  206,  244,  245,

      207,  253,  257,  254,  262,  260,  263,  271,  208,  264,
      209,  258,  272,  259,  210,  261,  269,  211,  212,  265,
      266,  267,  268,  273,  274,  270,  275,  276,  277,  278,
      279,  280,  281,  333,  290,  174,  271,  291,  407,  341,
      292,  272,  294,  299,  300,  337,  191,  306,  336,  333,
      267,  268,  273,  274,  293,  275,  276,  277,  278,  279,
      280,  281,  284,  290,  285,  295,  291,  286,  287,  292,
      307,  294,  299,  300,  296,  301,  306,  288,  302,  309,
      289,  297,  298,  293,  304,  305,  308,  310,  312,  313,
      174,  284,  303,  285,  295,  318,  286,  287,  319,  307,

      329,  324,  311,  296,  301,  282,  288,  302,  309,  289,
      297,  298,  327,  304,  305,  308,  310,  312,  313,  314,
      328,  303,  338,  320,  318,  339,  315,  319,  316,  321,
      324,  317,  322,  323,  325,  192,  182,  181,  330,  330,
      326,  327,  331,  331,  331,  331,  179,  340,  314,  328,
      178,  338,  320,  342,  339,  315,  343,  316,  321,  344,
      317,  322,  323,  325,  185,  185,  185,  185,  345,  326,
      188,  188,  188,  188,  334,  334,  340,  186,  335,  335,
      335,  335,  342,  346,  347,  343,  348,  349,  344,  350,
      351,  352,  353,  354,  355,  356,  357,  345,  358,  359,

      360,  361,  362,  363,  364,  365,  186,  367,  370,  371,
      368,  372,  346,  347,  366,  348,  349,  369,  350,  351,
      352,  353,  354,  355,  356,  357,  373,  358,  359,  360,
      361,  362,  363,  364,  365,  374,  367,  370,  371,  368,
      372,  375,  376,  377,  378,  379,  369,  380,  381,  382,
      383,  384,  385,  391,  392,  373,  176,  389,  393,  390,
      394,  395,  396,  397,  374,  386,  398,  399,  400,  401,
      375,  376,  377,  378,  379,  387,  380,  381,  382,  383,
      384,  385,  391,  392,  402,  388,  389,  393,  390,  394,
      395,  396,  397,  404,  405,  398,  399,  400,  401,  408,

      403,  409,  410,  411,  387,  412,  406,  413,  414,  417,
      418,  415,  419,  402,  388,  416,  420,  421,  422,  423,
      424,  428,  404,  405,  425,  426,  429,  430,  408,  403,
      409,  410,  411,  427,  412,  406,  413,  414,  417,  418,
      415,  419,  431,  432,  416,  420,  421,  422,  423,  424,
      428,  433,  435,  425,  426,  429,  430,  436,  437,  438,
      434,  439,  427,  440,  441,  442,  443,  444,  445,  448,
      446,  431,  432,  449,  450,  451,  452,  453,  454,  455,
      433,  435,  447,  456,  457,  458,  436,  437,  438,  459,
      439,  460,  440,  441,  442,  443,  444,  445,  448,  446,

      461,  462,  449,  450,  451,  452,  453,  454,  455,  463,
      464,  447,  456,  457,  458,  468,  465,  469,  459,  470,
      460,  472,  473,  471,  474,  475,  175,   79,   68,  461,
      462,  477,  466,   66,   64,  467, 1079, 1079,  463,  464,
      331,  331,  331,  331,  468,  465,  469,  478,  470,  479,
      472,  473,  471,  474,  475,  331,  331,  331,  331,  480,
      477,  466,  335,  335,  335,  335,  335,  335,  335,  335,
      481,  482,  483,  485,  486,  487,  478,  488,  479,  489,
      490,  492,  493,  495,  496,  497,  498,  499,  480,  501,
      494,  502,  503,  504,  505,  506,  507,  508,  509,  481,

      482,  483,  485,  486,  487,  510,  488,  511,  489,  490,
      492,  493,  495,  496,  497,  498,  499,  512,  501,  513,
      502,  503,  504,  505,  506,  507,  508,  509,  514,  515,
      516,  517,  519,  520,  510,  521,  511,  522,  524,  525,
      526,  527,  528,  529,  530,  531,  512,  532,  513,  533,
      534,  535,  538,  536,  539,  540,  541,  514,  515,  516,
      517,  519,  520,  537,  521,  542,  522,  524,  525,  526,
      527,  528,  529,  530,  531,  543,  532,  544,  533,  534,
      535,  538,  536,  539,  540,  541,  545,  546,  547,  548,
      550,  551,  537,  549,  542,  552,  553,  554,  555,  556,

      557,  559,  560,  561,  543,  562,  544,  563,  564,  565,
      566,  567,  568,  569,  570,  545,  546,  547,  548,  550,
      551,  571,  549,  574,  552,  553,  554,  555,  556,  557,
      559,  560,  561,  575,  562,  572,  563,  564,  565,  566,
      567,  568,  569,  570,  573,  576,  577,  578,  579,  580,
      571,  581,  574,  582,  583,  584,  585,  586,  588,  589,
      587,  590,  575,  591,  572,  592,  593,  595,  596,  597,
      598,  599,  600,  601,  576,  577,  578,  579,  580,  602,
      581,  604,  582,  583,  584,  585,  586,  588,  589,  587,
      590,  605,  591,  606,  592,  593,  595,  596,  597,  598,

      599,  600,  601,  611,  613,  612,  607,  614,  602,  608,
      604,  616,  617,  618,  619,  620,  621,  622,  625,  626,
      605,  627,  606,  628,  609,  610,  629,  630,  631, 1079,
      634,  635,  611,  613,  612,  607,  614,  636,  608,  637,
      616,  617,  618,  619,  620,  621,  622,  625,  626,  638,
      627,  639,  628,  609,  610,  629,  630,  631,  632,  634,
      635,  633,  640,  641,  642,  643,  636,  644,  637,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  638,  654,
      639,  655,  656,  657,  658,  659,  660,  632,  661,  662,
      633,  640,  641,  642,  643,  663,  644,  665,  645,  646,

      647,  648,  649,  650,  651,  652,  653,  664,  654,  666,
      655,  656,  657,  658,  659,  660,  667,  661,  662,  668,
      669,  670,  671,  672,  663,  673,  665,  674,  675,  676,
      677,  682, 1079, 1079,  683,  684,  664,  685,  666,  686,
      687,  688,  689,  678,  690,  667,  679,  691,  668,  669,
      670,  671,  672,  692,  673,  693,  674,  675,  676,  677,
      682,  680,  681,  683,  684,  694,  685,  695,  686,  687,
      688,  689,  678,  690,  696,  679,  691,  697,  699,  701,
      700,  702,  692,  703,  693,  704,  705,  706,  707,  708,
      680,  681,  709,  711,  694,  710,  695,  712,  713,  714,

      715,  716,  717,  696,  718,  719,  697,  699,  701,  700,
      702,  720,  703,  721,  704,  705,  706,  707,  708,  722,
      723,  709,  711,  724,  710,  725,  712,  713,  714,  715,
      716,  717,  726,  718,  719,  728,  729,  730,  731,  732,
      720,  733,  721,  734,  735,  736,  737,  738,  722,  723,
      739,  740,  724,  741,  725,  742,  743,  744,  745,  746,
      747,  726,  748,  749,  728,  729,  730,  731,  732,  750,
      733,  752,  734,  735,  736,  737,  738,  753,  754,  739,
      740,  755,  741,  756,  742,  743,  744,  745,  746,  747,
      758,  748,  749,  759,  760,  757,  765,  766,  750,  767,

      752,  768,  769,  770,  771,  772,  753,  754,  773,  774,
      755,  775,  756,  776,  777,  778,  779,  780,  781,  758,
      782, 1079,  759,  760,  757,  765,  766,  786,  767,  787,
      768,  769,  770,  771,  772,  788,  783,  773,  774,  789,
      775,  790,  776,  777,  778,  779,  780,  781,  791,  782,
      784,  792,  793,  785,  795,  796,  786,  797,  787,  798,
      799,  800,  801,  802,  788,  783,  803,  804,  789,  805,
      790,  806,  807,  808,  809,  810,  811,  791,  813,  784,
      792,  793,  785,  795,  796,  814,  797,  815,  798,  799,
      800,  801,  802,  816,  817,  803,  804,  818,  805,  819,

      806,  807,  808,  809,  810,  811,  821,  813,  822,  823,
      824,  827,  825,  828,  814,  829,  815,  830,  820,  831,
      833,  834,  816,  817,  835,  826,  818,  836,  819,  837,
      838,  839,  840,  841,  842,  821,  843,  822,  823,  824,
      827,  825,  828,  844,  829,  845,  830,  847,  831,  833,
      834,  848,  849,  835,  826,  850,  836,  851,  837,  838,
      839,  840,  841,  842,  852,  843,  853,  854,  855,  856,
      857,  858,  844,  859,  845,  860,  847,  861,  862,  863,
      848,  849,  865,  866,  850,  867,  851,  868,  869,  870,
      871,  872,  874,  852,  875,  853,  854,  855,  856,  857,

      858,  876,  859,  878,  860,  879,  861,  862,  863,  880,
      881,  865,  866,  882,  867,  877,  868,  869,  870,  871,
      872,  874,  883,  875,  884,  885,  886,  887,  888,  889,
      876,  890,  878,  891,  879,  892,  893,  894,  880,  881,
      895,  896,  882,  897,  877,  898,  899,  900,  901,  902,
      903,  883,  904,  884,  885,  886,  887,  888,  889,  905,
      890,  906,  891,  907,  892,  893,  894,  908,  909,  895,
      896,  910,  897,  911,  898,  899,  900,  901,  902,  903,
      912,  904,  913,  914,  915,  920,  916,  921,  905,  917,
      906,  922,  907,  925,  923,  926,  908,  909,  927,  928,

      910,  929,  911,  930,  918,  919,  931,  932,  933,  912,
      924,  913,  914,  915,  920,  916,  921,  934,  917,  935,
      922,  936,  925,  923,  926,  937,  938,  927,  928,  939,
      929,  940,  930,  918,  919,  931,  932,  933,  941,  924,
      942,  943,  944,  946,  947,  948,  934,  949,  935,  951,
      936,  952,  953,  954,  937,  938,  955,  956,  939,  957,
      940,  958,  959,  960,  961,  962,  963,  941,  964,  942,
      943,  944,  946,  947,  948,  966,  949,  967,  951,  968,
      952,  953,  954,  969,  970,  955,  956,  971,  957,  972,
      958,  959,  960,  961,  962,  963,  973,  964,  974,  975,

      976,  981,  977,  982,  966,  978,  967,  983,  968,  984,
      985,  986,  969,  970,  987,  988,  971,  989,  972,  990,
      979,  980,  991,  992,  993,  973,  994,  974,  975,  976,
      981,  977,  982,  997,  978,  998,  983,  999,  984,  985,
      986,  995,  996,  987,  988, 1000,  989, 1001,  990,  979,
      980,  991,  992,  993, 1002,  994, 1003, 1004, 1005, 1006,
     1007, 1009,  997, 1010,  998, 1012,  999, 1013, 1014, 1015,
      995,  996, 1016, 1017, 1000, 1018, 1001, 1019, 1020, 1021,
     1022, 1023, 1024, 1002, 1025, 1003, 1004, 1005, 1006, 1007,
     1009, 1026, 1010, 1027, 1012, 1028, 1013, 1014, 1015, 1029,

     1030, 1016, 1017, 1031, 1018, 1032, 1019, 1020, 1021, 1022,
     1023, 1024, 1033, 1025, 1035, 1036, 1037, 1038, 1039, 1040,
     1026, 1041, 1027, 1042, 1028, 1043, 1044, 1045, 1029, 1030,
     1046, 1047, 1031, 1048, 1032, 1049, 1050, 1051, 1052, 1053,
     1054, 1033, 1055, 1035, 1036, 1037, 1038, 1039, 1040, 1056,
     1041, 1057, 1042, 1058, 1043, 1044, 1045, 1059, 1060, 1046,
     1047, 1061, 1048, 1062, 1049, 1050, 1051, 1052, 1053, 1054,
     1063, 1055, 1064, 1065, 1066, 1067, 1068, 1069, 1056, 1070,
     1057, 1072, 1058, 1073, 1074, 1075, 1059, 1060, 1076, 1077,
     1061, 1078, 1062, 1079, 1079, 1079, 1079, 1079, 1079, 1063,

     1079, 1064, 1065, 1066, 1067, 1068, 1069, 1079, 1070, 1079,
     1072, 1079, 1073, 1074, 1075, 1079, 1079, 1076, 1077, 1079,
     1078,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   65, 1079, 1079,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   78,
       78, 1079,   78,   80,   80,   80,   80,  174, 1079,  174,
      174,  174,  174,  174,  174,  174,  174, 1079,  174,  177,
      177,  177,  177, 1079,  177,  177,  177,  177,  177, 1079,

      177,  180,  180,  180, 1079,  180,  180,  180,  180,  180,
      180, 1079,  180,  184,  184,  184,  184,  184, 1079,  184,
      184,  184,  184,  184,  184,  189,  189,  190,  190,  190,
      191, 1079,  191,  191,  191,  191,  191,  191,  191,  191,
     1079,  191,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,    9, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079
    } ;

static const flex_int16_t yy_chk[2335] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        6,    7,    8,   11,   11,   11,   12,   12,   12,   19,
       19,   19,   19,   21,   37,   21,   21,   21,   21,   22,

       34,   22,   22,   22,   22,   23,   23,   23,   21,   25,
       25,   31,   44,   34,   22,   31,   49,   52, 1068,   31,
        5,    6,   53,   37, 1016,    7,    8,   21,   29,   34,
      985,   29,  982,   35,   63,   63,   63,   21,  930,   81,
       31,   44,   34,   22,   31,   49,   52,   35,   31,  909,
       29,   53,   30,   48,   29,   48,   21,   28,   48,   28,
       29,   28,   35,   28,   28,   28,   30,   28,   81,   30,
       29,   83,   30,   32,   43,   32,   35,   84,   43,   29,
       32,   30,   48,   29,   48,   32,   28,   48,   28,   29,
       28,   43,   28,   28,   28,   30,   28,  901,   30,   29,

       83,   30,   32,   43,   32,   85,   84,   43,   40,   32,
       82,   36,   36,   39,   32,   33,   40,   39,   87,   36,
       43,   39,   40,   33,   36,   90,   33,   39,   40,   33,
       91,   82,   33,   92,   85,   33,   93,   40,  807,   82,
       36,   36,   39,   96,   33,   40,   39,   87,   36,   41,
       39,   40,   33,   36,   90,   33,   39,   40,   33,   91,
       82,   33,   92,   41,   33,   93,   47,   47,   41,   41,
      795,  147,   96,   47,  147,  100,   47,   50,   41,   47,
       50,   50,  333,  101,  102,  771,  333,  103,   67,   67,
       67,   67,   41,  759,  736,   47,   47,   41,   41,   42,

       42,   67,   47,   42,  100,   47,   50,   94,   47,   50,
       50,   42,  101,  102,   94,   42,  103,   42,   42,   42,
       69,   69,   69,   69,  187,  187,  187,  187,   42,   42,
       67,  105,   42,   69,  712,  675,   94,  672,  671,  670,
       42,  106,  659,   94,   42,  624,   42,   42,   42,   45,
      593,   70,   45,   70,   70,   70,   70,  107,   97,   98,
      105,  110,   69,   97,   98,  111,   70,   45,   45,  112,
      106,   45,   71,   71,  104,   45,   71,   71,   71,   71,
      104,   45,  509,  508,   45,  498,  107,   97,   98,  489,
      110,  104,   97,   98,  111,   70,   45,   45,  112,  479,

       45,  108,  113,  104,   45,  435,  109,  108,   99,  104,
       45,   99,  109,   45,   46,  114,   46,   99,   46,   99,
      104,  116,  118,  119,   99,  393,   46,  121,   46,  123,
      108,  113,  121,   46,   46,  109,  108,   99,   46,  386,
       99,  109,  365,   46,  114,   46,   99,   46,   99,  124,
      116,  118,  119,   99,  120,   46,  121,   46,  123,  355,
      348,  121,   46,   46,  117,  120,  120,   46,   95,  117,
      117,   95,  122,  125,  122,  127,  126,  128,  124,   95,
      129,   95,  125,  120,  125,   95,  126,  132,   95,   95,
      130,  130,  336,  117,  120,  120,  133,   95,  117,  117,

       95,  122,  125,  122,  127,  126,  128,  134,   95,  129,
       95,  125,  135,  125,   95,  126,  132,   95,   95,  130,
      130,  131,  131,  136,  137,  133,  138,  139,  140,  141,
      142,  143,  146,  332,  149,  329,  134,  150,  265,  201,
      152,  135,  153,  155,  156,  195,  192,  159,  191,  184,
      131,  131,  136,  137,  152,  138,  139,  140,  141,  142,
      143,  146,  148,  149,  148,  154,  150,  148,  148,  152,
      160,  153,  155,  156,  154,  157,  159,  148,  157,  161,
      148,  154,  154,  152,  158,  158,  160,  161,  163,  164,
      175,  148,  157,  148,  154,  166,  148,  148,  167,  160,

      174,  170,  162,  154,  157,  151,  148,  157,  161,  148,
      154,  154,  172,  158,  158,  160,  161,  163,  164,  165,
      173,  157,  196,  168,  166,  197,  165,  167,  165,  168,
      170,  165,  169,  169,  171,   79,   62,   61,  183,  183,
      171,  172,  183,  183,  183,  183,   59,  200,  165,  173,
       58,  196,  168,  202,  197,  165,  203,  165,  168,  204,
      165,  169,  169,  171,  185,  185,  185,  185,  205,  171,
      188,  188,  188,  188,  186,  186,  200,  185,  186,  186,
      186,  186,  202,  205,  206,  203,  207,  208,  204,  209,
      210,  211,  212,  213,  214,  215,  216,  205,  217,  219,

      220,  221,  222,  223,  224,  225,  185,  226,  228,  229,
      227,  230,  205,  206,  225,  207,  208,  227,  209,  210,
      211,  212,  213,  214,  215,  216,  231,  217,  219,  220,
      221,  222,  223,  224,  225,  232,  226,  228,  229,  227,
      230,  233,  235,  236,  237,  238,  227,  239,  240,  241,
      242,  243,  244,  247,  249,  231,   55,  246,  250,  246,
      251,  252,  253,  254,  232,  245,  255,  257,  258,  259,
      233,  235,  236,  237,  238,  245,  239,  240,  241,  242,
      243,  244,  247,  249,  261,  245,  246,  250,  246,  251,
      252,  253,  254,  262,  263,  255,  257,  258,  259,  266,

      261,  267,  268,  269,  245,  270,  263,  271,  272,  274,
      275,  273,  276,  261,  245,  273,  277,  278,  279,  280,
      281,  285,  262,  263,  281,  284,  287,  288,  266,  261,
      267,  268,  269,  284,  270,  263,  271,  272,  274,  275,
      273,  276,  289,  290,  273,  277,  278,  279,  280,  281,
      285,  291,  292,  281,  284,  287,  288,  293,  294,  295,
      291,  296,  284,  297,  298,  299,  300,  301,  302,  305,
      303,  289,  290,  306,  307,  308,  309,  310,  311,  312,
      291,  292,  303,  313,  314,  315,  293,  294,  295,  316,
      296,  317,  297,  298,  299,  300,  301,  302,  305,  303,

      318,  319,  306,  307,  308,  309,  310,  311,  312,  320,
      321,  303,  313,  314,  315,  322,  321,  323,  316,  324,
      317,  325,  326,  324,  327,  328,   54,   27,   20,  318,
      319,  337,  321,   18,   13,  321,    9,    0,  320,  321,
      330,  330,  330,  330,  322,  321,  323,  338,  324,  339,
      325,  326,  324,  327,  328,  331,  331,  331,  331,  340,
      337,  321,  334,  334,  334,  334,  335,  335,  335,  335,
      341,  343,  347,  349,  350,  351,  338,  352,  339,  353,
      354,  356,  357,  358,  359,  360,  361,  363,  340,  366,
      357,  367,  368,  369,  370,  371,  372,  373,  374,  341,

      343,  347,  349,  350,  351,  375,  352,  376,  353,  354,
      356,  357,  358,  359,  360,  361,  363,  379,  366,  380,
      367,  368,  369,  370,  371,  372,  373,  374,  381,  383,
      384,  385,  387,  389,  375,  390,  376,  392,  397,  398,
      399,  400,  401,  402,  403,  404,  379,  405,  380,  406,
      407,  408,  410,  409,  411,  412,  413,  381,  383,  384,
      385,  387,  389,  409,  390,  415,  392,  397,  398,  399,
      400,  401,  402,  403,  404,  416,  405,  417,  406,  407,
      408,  410,  409,  411,  412,  413,  418,  420,  421,  422,
      423,  424,  409,  422,  415,  428,  429,  430,  431,  432,

      434,  436,  437,  438,  416,  439,  417,  440,  442,  444,
      445,  446,  447,  448,  449,  418,  420,  421,  422,  423,
      424,  451,  422,  454,  428,  429,  430,  431,  432,  434,
      436,  437,  438,  456,  439,  453,  440,  442,  444,  445,
      446,  447,  448,  449,  453,  457,  458,  459,  460,  461,
      451,  462,  454,  463,  464,  465,  466,  467,  468,  471,
      467,  472,  456,  473,  453,  477,  478,  480,  481,  483,
      484,  485,  486,  487,  457,  458,  459,  460,  461,  488,
      462,  491,  463,  464,  465,  466,  467,  468,  471,  467,
      472,  492,  473,  493,  477,  478,  480,  481,  483,  484,

      485,  486,  487,  495,  496,  495,  494,  497,  488,  494,
      491,  499,  500,  502,  503,  504,  505,  506,  510,  511,
      492,  512,  493,  513,  494,  494,  514,  515,  517,    0,
      520,  521,  495,  496,  495,  494,  497,  523,  494,  525,
      499,  500,  502,  503,  504,  505,  506,  510,  511,  526,
      512,  527,  513,  494,  494,  514,  515,  517,  519,  520,
      521,  519,  528,  529,  531,  532,  523,  533,  525,  534,
      536,  538,  539,  540,  541,  543,  544,  546,  526,  547,
      527,  548,  549,  550,  552,  553,  554,  519,  555,  557,
      519,  528,  529,  531,  532,  558,  533,  559,  534,  536,

      538,  539,  540,  541,  543,  544,  546,  558,  547,  561,
      548,  549,  550,  552,  553,  554,  562,  555,  557,  563,
      564,  565,  566,  567,  558,  568,  559,  569,  570,  571,
      572,  574,    0,    0,  575,  576,  558,  578,  561,  579,
      580,  582,  583,  573,  584,  562,  573,  585,  563,  564,
      565,  566,  567,  586,  568,  587,  569,  570,  571,  572,
      574,  573,  573,  575,  576,  588,  578,  590,  579,  580,
      582,  583,  573,  584,  591,  573,  585,  592,  594,  595,
      594,  596,  586,  597,  587,  598,  599,  600,  601,  602,
      573,  573,  603,  604,  588,  603,  590,  605,  606,  607,

      608,  609,  610,  591,  611,  612,  592,  594,  595,  594,
      596,  613,  597,  615,  598,  599,  600,  601,  602,  616,
      617,  603,  604,  620,  603,  622,  605,  606,  607,  608,
      609,  610,  623,  611,  612,  625,  627,  628,  632,  633,
      613,  634,  615,  635,  636,  637,  638,  639,  616,  617,
      642,  643,  620,  644,  622,  645,  647,  651,  653,  654,
      655,  623,  656,  657,  625,  627,  628,  632,  633,  658,
      634,  660,  635,  636,  637,  638,  639,  661,  662,  642,
      643,  663,  644,  664,  645,  647,  651,  653,  654,  655,
      665,  656,  657,  668,  669,  664,  676,  677,  658,  678,

      660,  679,  680,  681,  682,  683,  661,  662,  684,  685,
      663,  689,  664,  690,  691,  692,  693,  694,  696,  665,
      697,    0,  668,  669,  664,  676,  677,  699,  678,  700,
      679,  680,  681,  682,  683,  703,  698,  684,  685,  704,
      689,  707,  690,  691,  692,  693,  694,  696,  709,  697,
      698,  710,  711,  698,  713,  714,  699,  715,  700,  716,
      717,  718,  719,  721,  703,  698,  722,  723,  704,  726,
      707,  728,  729,  730,  731,  732,  735,  709,  737,  698,
      710,  711,  698,  713,  714,  738,  715,  739,  716,  717,
      718,  719,  721,  740,  742,  722,  723,  745,  726,  746,

      728,  729,  730,  731,  732,  735,  747,  737,  748,  750,
      751,  754,  751,  755,  738,  756,  739,  757,  746,  758,
      760,  761,  740,  742,  762,  751,  745,  762,  746,  763,
      764,  764,  765,  766,  767,  747,  768,  748,  750,  751,
      754,  751,  755,  769,  756,  770,  757,  773,  758,  760,
      761,  776,  779,  762,  751,  780,  762,  782,  763,  764,
      764,  765,  766,  767,  783,  768,  784,  785,  786,  787,
      789,  790,  769,  791,  770,  792,  773,  793,  794,  794,
      776,  779,  797,  799,  780,  800,  782,  801,  802,  804,
      805,  806,  809,  783,  811,  784,  785,  786,  787,  789,

      790,  812,  791,  813,  792,  814,  793,  794,  794,  817,
      818,  797,  799,  819,  800,  812,  801,  802,  804,  805,
      806,  809,  820,  811,  821,  822,  823,  824,  825,  826,
      812,  827,  813,  828,  814,  829,  830,  832,  817,  818,
      834,  835,  819,  836,  812,  837,  838,  839,  841,  843,
      845,  820,  846,  821,  822,  823,  824,  825,  826,  847,
      827,  850,  828,  852,  829,  830,  832,  853,  854,  834,
      835,  856,  836,  857,  837,  838,  839,  841,  843,  845,
      858,  846,  860,  862,  863,  866,  864,  869,  847,  864,
      850,  871,  852,  875,  873,  876,  853,  854,  877,  878,

      856,  879,  857,  882,  864,  864,  883,  887,  888,  858,
      873,  860,  862,  863,  866,  864,  869,  889,  864,  890,
      871,  892,  875,  873,  876,  893,  894,  877,  878,  895,
      879,  896,  882,  864,  864,  883,  887,  888,  897,  873,
      898,  899,  900,  903,  904,  907,  889,  908,  890,  910,
      892,  912,  914,  915,  893,  894,  916,  917,  895,  918,
      896,  919,  922,  923,  924,  926,  928,  897,  929,  898,
      899,  900,  903,  904,  907,  931,  908,  932,  910,  933,
      912,  914,  915,  934,  936,  916,  917,  937,  918,  938,
      919,  922,  923,  924,  926,  928,  939,  929,  941,  943,

      944,  947,  945,  948,  931,  945,  932,  949,  933,  950,
      951,  952,  934,  936,  953,  954,  937,  955,  938,  956,
      945,  945,  957,  958,  960,  939,  961,  941,  943,  944,
      947,  945,  948,  966,  945,  967,  949,  968,  950,  951,
      952,  965,  965,  953,  954,  969,  955,  971,  956,  945,
      945,  957,  958,  960,  972,  961,  977,  978,  979,  980,
      981,  983,  966,  984,  967,  986,  968,  987,  990,  992,
      965,  965,  993,  994,  969,  995,  971,  996,  998,  999,
     1000, 1003, 1004,  972, 1005,  977,  978,  979,  980,  981,
      983, 1006,  984, 1007,  986, 1008,  987,  990,  992, 1009,

     1010,  993,  994, 1011,  995, 1013,  996,  998,  999, 1000,
     1003, 1004, 1015, 1005, 1017, 1018, 1019, 1020, 1021, 1022,
     1006, 1024, 1007, 1026, 1008, 1027, 1028, 1029, 1009, 1010,
     1030, 1031, 1011, 1032, 1013, 1034, 1035, 1036, 1037, 1038,
     1042, 1015, 1044, 1017, 1018, 1019, 1020, 1021, 1022, 1045,
     1024, 1046, 1026, 1047, 1027, 1028, 1029, 1048, 1049, 1030,
     1031, 1050, 1032, 1055, 1034, 1035, 1036, 1037, 1038, 1042,
     1059, 1044, 1060, 1061, 1062, 1064, 1065, 1066, 1045, 1067,
     1046, 1069, 1047, 1071, 1072, 1073, 1048, 1049, 1075, 1076,
     1050, 1077, 1055,    0,    0,    0,    0,    0,    0, 1059,

        0, 1060, 1061, 1062, 1064, 1065, 1066,    0, 1067,    0,
     1069,    0, 1071, 1072, 1073,    0,    0, 1075, 1076,    0,
     1077, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083,    0,    0,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084,
     1084,    0, 1084, 1085, 1085, 1085, 1085, 1086,    0, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086,    0, 1086, 1087,
     1087, 1087, 1087,    0, 1087, 1087, 1087, 1087, 1087,    0,

     1087, 1088, 1088, 1088,    0, 1088, 1088, 1088, 1088, 1088,
     1088,    0, 1088, 1089, 1089, 1089, 1089, 1089,    0, 1089,
     1089, 1089, 1089, 1089, 1089, 1090, 1090, 1091, 1091, 1091,
     1092,    0, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
        0, 1092, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "bigquery.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "bigquery.l"

#include "node.h"
#include "sqlparser_bigquery_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define YYSTYPE         BIGQUERY_STYPE
#define YYLTYPE         BIGQUERY_LTYPE

std::string escape_double_quotation_bigquery(const std::string& src, char c) {
    assert(c == '"' || c == '`' || c == ']');
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == c && src[1+i] == c) {
            ret += c;
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return BIGQUERY_##name; }


#line 1582 "sqlparser_bigquery_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1595 "sqlparser_bigquery_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define qq 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 129 "bigquery.l"

#line 1882 "sqlparser_bigquery_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1080 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1079 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 130 "bigquery.l"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 131 "bigquery.l"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 132 "bigquery.l"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 133 "bigquery.l"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 134 "bigquery.l"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 135 "bigquery.l"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 136 "bigquery.l"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 137 "bigquery.l"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 138 "bigquery.l"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 139 "bigquery.l"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 140 "bigquery.l"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 141 "bigquery.l"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 142 "bigquery.l"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 143 "bigquery.l"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 144 "bigquery.l"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 145 "bigquery.l"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 146 "bigquery.l"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 147 "bigquery.l"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 148 "bigquery.l"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 149 "bigquery.l"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 150 "bigquery.l"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 151 "bigquery.l"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 152 "bigquery.l"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 153 "bigquery.l"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "bigquery.l"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 155 "bigquery.l"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 156 "bigquery.l"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 157 "bigquery.l"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 158 "bigquery.l"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 159 "bigquery.l"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 160 "bigquery.l"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 161 "bigquery.l"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 162 "bigquery.l"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 163 "bigquery.l"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 164 "bigquery.l"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 165 "bigquery.l"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 166 "bigquery.l"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 167 "bigquery.l"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 168 "bigquery.l"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 169 "bigquery.l"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 170 "bigquery.l"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 171 "bigquery.l"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 172 "bigquery.l"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 173 "bigquery.l"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 174 "bigquery.l"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 175 "bigquery.l"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 176 "bigquery.l"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 177 "bigquery.l"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 178 "bigquery.l"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "bigquery.l"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 180 "bigquery.l"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 181 "bigquery.l"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 182 "bigquery.l"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 183 "bigquery.l"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 184 "bigquery.l"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 185 "bigquery.l"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 186 "bigquery.l"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 187 "bigquery.l"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 188 "bigquery.l"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 189 "bigquery.l"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 190 "bigquery.l"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 191 "bigquery.l"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 192 "bigquery.l"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 193 "bigquery.l"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 194 "bigquery.l"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 195 "bigquery.l"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 196 "bigquery.l"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 197 "bigquery.l"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 198 "bigquery.l"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 199 "bigquery.l"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 200 "bigquery.l"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 201 "bigquery.l"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 202 "bigquery.l"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 203 "bigquery.l"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 204 "bigquery.l"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 205 "bigquery.l"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 206 "bigquery.l"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 207 "bigquery.l"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 208 "bigquery.l"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 209 "bigquery.l"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 210 "bigquery.l"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 211 "bigquery.l"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 212 "bigquery.l"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 213 "bigquery.l"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 214 "bigquery.l"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 215 "bigquery.l"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 216 "bigquery.l"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 217 "bigquery.l"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 218 "bigquery.l"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 219 "bigquery.l"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 220 "bigquery.l"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 221 "bigquery.l"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 222 "bigquery.l"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 223 "bigquery.l"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 224 "bigquery.l"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 225 "bigquery.l"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 226 "bigquery.l"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 227 "bigquery.l"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 228 "bigquery.l"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 229 "bigquery.l"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 230 "bigquery.l"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 231 "bigquery.l"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 232 "bigquery.l"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 233 "bigquery.l"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 234 "bigquery.l"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 235 "bigquery.l"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 236 "bigquery.l"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 237 "bigquery.l"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 238 "bigquery.l"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 239 "bigquery.l"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 240 "bigquery.l"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 241 "bigquery.l"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 242 "bigquery.l"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 243 "bigquery.l"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 244 "bigquery.l"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 245 "bigquery.l"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 246 "bigquery.l"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 247 "bigquery.l"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 248 "bigquery.l"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 249 "bigquery.l"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 250 "bigquery.l"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 251 "bigquery.l"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 252 "bigquery.l"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 253 "bigquery.l"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 254 "bigquery.l"
TOKEN(LIMIT)            /* bigquery */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 255 "bigquery.l"
TOKEN(OFFSET)           /* bigquery */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 256 "bigquery.l"
TOKEN(REPLACE)          /* bigquery */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 257 "bigquery.l"
TOKEN(NULLS)            /* bigquery */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 258 "bigquery.l"
TOKEN(FIRST)            /* bigquery */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 259 "bigquery.l"
TOKEN(LAST)             /* bigquery */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 260 "bigquery.l"
TOKEN(ORDINAL)          /* bigquery */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 261 "bigquery.l"
TOKEN(SAFE_OFFSET)      /* bigquery */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 262 "bigquery.l"
TOKEN(SAFE_ORDINAL)     /* bigquery */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 263 "bigquery.l"
TOKEN(STRUCT)           /* bigquery datatype */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 264 "bigquery.l"
TOKEN(INT64)            /* bigquery */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 265 "bigquery.l"
TOKEN(FLOAT64)          /* bigquery */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 266 "bigquery.l"
TOKEN(STRING)           /* bigquery */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 267 "bigquery.l"
TOKEN(BYTES)            /* bigquery */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 268 "bigquery.l"
TOKEN(DATETIME)         /* bigquery */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 269 "bigquery.l"
TOKEN(ARRAY)            /* bigquery */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 270 "bigquery.l"
TOKEN(DATE)             /* bigquery */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 271 "bigquery.l"
TOKEN(TIME)             /* bigquery */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 272 "bigquery.l"
TOKEN(TIMESTAMP)        /* bigquery */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 273 "bigquery.l"
TOKEN(BOOL)             /* bigquery */
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 274 "bigquery.l"
TOKEN(VALUE)            /* bigquery  no reserved */
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 275 "bigquery.l"
TOKEN(UNNEST)           /* bigquery */
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 276 "bigquery.l"
TOKEN(FIRST_VALUE)      /* bigquery function */
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 277 "bigquery.l"
TOKEN(RESPECT)          /* bigquery function */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 278 "bigquery.l"
TOKEN(IGNORE)           /* bigquery function */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 279 "bigquery.l"
TOKEN(WINDOW)           /* bigquery function */
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 280 "bigquery.l"
TOKEN(LAST_VALUE)       /* bigquery function */
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 281 "bigquery.l"
TOKEN(NTH_VALUE)        /* bigquery function */
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 282 "bigquery.l"
TOKEN(LEAD)             /* bigquery function */
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 283 "bigquery.l"
TOKEN(LAG)              /* bigquery function */
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 284 "bigquery.l"
TOKEN(PERCENTILE_CONT)  /* bigquery function */
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 285 "bigquery.l"
TOKEN(PERCENTILE_DISC)  /* bigquery function */
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 286 "bigquery.l"
TOKEN(NTILE)            /* bigquery function */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 287 "bigquery.l"
TOKEN(ARRAY_AGG)        /* bigquery function */
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 288 "bigquery.l"
TOKEN(CORR)             /* bigquery function */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 289 "bigquery.l"
TOKEN(COVAR_POP)        /* bigquery function */
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 290 "bigquery.l"
TOKEN(COVAR_SAMP)       /* bigquery function */
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 291 "bigquery.l"
TOKEN(STRING_AGG)       /* bigquery function */
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 292 "bigquery.l"
TOKEN(ANY_VALUE)        /* bigquery function */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 293 "bigquery.l"
TOKEN(COUNTIF)          /* bigquery function */
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 294 "bigquery.l"
TOKEN(SAFE_CAST)        /* bigquery function */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 295 "bigquery.l"
TOKEN(ARRAY_CONCAT_AGG) /* bigquery function */
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 296 "bigquery.l"
TOKEN(BIT_XOR)          /* bigquery function */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 297 "bigquery.l"
TOKEN(LOGICAL_AND)      /* bigquery function */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 298 "bigquery.l"
TOKEN(LOGICAL_OR)       /* bigquery function */
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 299 "bigquery.l"
TOKEN(APPROX_COUNT_DISTINCT)       /* bigquery function */
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 300 "bigquery.l"
TOKEN(APPROX_QUANTILES)            /* bigquery function */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 301 "bigquery.l"
TOKEN(APPROX_TOP_COUNT)            /* bigquery function */
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 302 "bigquery.l"
TOKEN(AT)      /* bigquery function */
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 303 "bigquery.l"
TOKEN(WEEK)      /* bigquery function */
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 304 "bigquery.l"
TOKEN(QUARTER)      /* bigquery function */
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 305 "bigquery.l"
TOKEN(DAYOFWEEK)      /* bigquery function */
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 306 "bigquery.l"
TOKEN(DAYOFYEAR)      /* bigquery function */
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 307 "bigquery.l"
TOKEN(ISOWEEK)      /* bigquery function */
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 308 "bigquery.l"
TOKEN(ISOYEAR)      /* bigquery function */
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 309 "bigquery.l"
TOKEN(MICROSECOND)      /* bigquery function */
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 310 "bigquery.l"
TOKEN(MILLISECOND)      /* bigquery function */
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 311 "bigquery.l"
TOKEN(SUNDAY)      /* bigquery function */
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 312 "bigquery.l"
TOKEN(MONDAY)      /* bigquery function */
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 313 "bigquery.l"
TOKEN(TUESDAY)      /* bigquery function */
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 314 "bigquery.l"
TOKEN(WEDNESDAY)      /* bigquery function */
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 315 "bigquery.l"
TOKEN(THURSDAY)      /* bigquery function */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 316 "bigquery.l"
TOKEN(FRIDAY)      /* bigquery function */
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 317 "bigquery.l"
TOKEN(SATURDAY)      /* bigquery function */
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 318 "bigquery.l"
TOKEN(EXTRACT)      /* bigquery function */
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 319 "bigquery.l"
TOKEN(DATE_ADD)      /* bigquery function */
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 320 "bigquery.l"
TOKEN(DATE_SUB)      /* bigquery function */
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 321 "bigquery.l"
TOKEN(DATE_DIFF)      /* bigquery function */
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 322 "bigquery.l"
TOKEN(DATE_TRUNC)      /* bigquery function */
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 323 "bigquery.l"
TOKEN(DATETIME_ADD)      /* bigquery function */
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 324 "bigquery.l"
TOKEN(DATETIME_SUB)      /* bigquery function */
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 325 "bigquery.l"
TOKEN(DATETIME_DIFF)      /* bigquery function */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 326 "bigquery.l"
TOKEN(DATETIME_TRUNC)      /* bigquery function */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 327 "bigquery.l"
TOKEN(TIME_ADD)      /* bigquery function */
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 328 "bigquery.l"
TOKEN(TIME_SUB)      /* bigquery function */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 329 "bigquery.l"
TOKEN(TIME_DIFF)      /* bigquery function */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 330 "bigquery.l"
TOKEN(TIME_TRUNC)      /* bigquery function */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 331 "bigquery.l"
TOKEN(TIMESTAMP_ADD)      /* bigquery function */
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 332 "bigquery.l"
TOKEN(TIMESTAMP_SUB)      /* bigquery function */
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 333 "bigquery.l"
TOKEN(TIMESTAMP_DIFF)      /* bigquery function */
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 334 "bigquery.l"
TOKEN(TIMESTAMP_TRUNC)      /* bigquery function */
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 335 "bigquery.l"
TOKEN(TO_JSON_STRING)      /* bigquery function */
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 336 "bigquery.l"
TOKEN(STDDEV)      /* bigquery function */
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 337 "bigquery.l"
TOKEN(VARIANCE)      /* bigquery function */
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 338 "bigquery.l"
TOKEN(STARTS_WITH)      /* bigquery function */
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 339 "bigquery.l"
TOKEN(ENDS_WITH)      /* bigquery function */
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 340 "bigquery.l"
TOKEN(REGEXP_CONTAINS)      /* bigquery function */
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 341 "bigquery.l"
TOKEN(REGEXP_EXTRACT)      /* bigquery function */
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 342 "bigquery.l"
TOKEN(REGEXP_REPLACE)      /* bigquery function */
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 343 "bigquery.l"
TOKEN(GENERATE_DATE_ARRAY)     /* bigquery function */
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 344 "bigquery.l"
TOKEN(GENERATE_TIMESTAMP_ARRAY)     /* bigquery function */
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 345 "bigquery.l"
TOKEN(SYSTEM_TIME)          /* bigquery */
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 346 "bigquery.l"
TOKEN(IF)                   /* bigquery function */
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 348 "bigquery.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return BIGQUERY_NULLX;
}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 353 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return BIGQUERY_INTNUM;
}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 359 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return BIGQUERY_INTNUM;
}
	YY_BREAK
case 221:
#line 369 "bigquery.l"
case 222:
#line 370 "bigquery.l"
case 223:
YY_RULE_SETUP
#line 370 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return BIGQUERY_APPROXNUM;
}
	YY_BREAK
case 224:
#line 378 "bigquery.l"
case 225:
YY_RULE_SETUP
#line 378 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return BIGQUERY_APPROXNUM;
}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 385 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BIGQUERY_BOOL_VAL;
}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 392 "bigquery.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return BIGQUERY_UNKNOWN;
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 397 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BIGQUERY_BOOL_VAL;
}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 405 "bigquery.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 410 "bigquery.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "B'";
}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 415 "bigquery.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "R'";
}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 420 "bigquery.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "RB'";
}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 426 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 430 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << "\\'";
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 434 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << '\\';
}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 438 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 442 "bigquery.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return BIGQUERY_STR;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 450 "bigquery.l"
{
  //fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return BIGQUERY_ERROR;
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 456 "bigquery.l"
{
    BEGIN(qq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '"';
}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 461 "bigquery.l"
{
    BEGIN(qq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "B\"";
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 466 "bigquery.l"
{
    BEGIN(qq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "R\"";
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 471 "bigquery.l"
{
    BEGIN(qq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "RB\"";
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 477 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << "\"\"";
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 480 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << "\\\"";
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 483 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << '\\';
}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 486 "bigquery.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 489 "bigquery.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '"';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return BIGQUERY_STR;
}
	YY_BREAK
case YY_STATE_EOF(qq):
#line 497 "bigquery.l"
{
  //fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return BIGQUERY_ERROR;
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 504 "bigquery.l"
{  /* todo table can contain '-' but field */
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_bigquery(std::string(yytext+1, yytext + strlen(yytext) - 1), '`');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return BIGQUERY_NAME;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 513 "bigquery.l"
{  /* todo table can contain '-' but field */
    Node* nd = Node::makeTerminalNode(E_PARAMETER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_bigquery(std::string(yytext+1, yytext + strlen(yytext) - 1), '`');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return BIGQUERY_PARAM;
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 523 "bigquery.l"
{
	Node* nd = Node::makeTerminalNode(E_PARAMETER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext));
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return BIGQUERY_PARAM;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 532 "bigquery.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return BIGQUERY_NAME;
}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 541 "bigquery.l"
{ /* ignore */ }
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 542 "bigquery.l"
{ /* ignore */ }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 544 "bigquery.l"
{ return yytext[0];}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 546 "bigquery.l"
{ return BIGQUERY_CNNOP; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 547 "bigquery.l"
{ return BIGQUERY_COMP_EQ; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 548 "bigquery.l"
{ return BIGQUERY_COMP_GE; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 549 "bigquery.l"
{ return BIGQUERY_COMP_GT; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 550 "bigquery.l"
{ return BIGQUERY_COMP_LE; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 551 "bigquery.l"
{ return BIGQUERY_COMP_LT; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 552 "bigquery.l"
{ return BIGQUERY_COMP_NE; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 553 "bigquery.l"
{ return BIGQUERY_COMP_NE; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 554 "bigquery.l"
{ return BIGQUERY_OP_RS; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 555 "bigquery.l"
{ return BIGQUERY_OP_LS; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 557 "bigquery.l"

	YY_BREAK
case 265:
YY_RULE_SETUP
#line 559 "bigquery.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return BIGQUERY_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 566 "bigquery.l"
{ return BIGQUERY_END_P; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 568 "bigquery.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return BIGQUERY_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 572 "bigquery.l"
ECHO;
	YY_BREAK
#line 3416 "sqlparser_bigquery_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1080 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1080 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1079);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 572 "bigquery.l"

/***************************
 ** Section 3: User code
 ***************************/

//int yyerror(const char *msg) {
//    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return BIGQUERY_ERROR;
//}

