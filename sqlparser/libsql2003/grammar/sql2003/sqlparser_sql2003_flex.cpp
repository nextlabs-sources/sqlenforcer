#line 1 "sqlparser_sql2003_flex.cpp"

#line 3 "sqlparser_sql2003_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sql2003__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql2003__create_buffer
#endif

#ifdef yy_delete_buffer
#define sql2003__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql2003__delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql2003__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql2003__scan_buffer
#endif

#ifdef yy_scan_string
#define sql2003__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql2003__scan_string
#endif

#ifdef yy_scan_bytes
#define sql2003__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql2003__scan_bytes
#endif

#ifdef yy_init_buffer
#define sql2003__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql2003__init_buffer
#endif

#ifdef yy_flush_buffer
#define sql2003__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql2003__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql2003__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql2003__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql2003__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql2003__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sql2003_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sql2003_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define sql2003_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sql2003_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sql2003_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sql2003_ensure_buffer_stack
#endif

#ifdef yylex
#define sql2003_lex_ALREADY_DEFINED
#else
#define yylex sql2003_lex
#endif

#ifdef yyrestart
#define sql2003_restart_ALREADY_DEFINED
#else
#define yyrestart sql2003_restart
#endif

#ifdef yylex_init
#define sql2003_lex_init_ALREADY_DEFINED
#else
#define yylex_init sql2003_lex_init
#endif

#ifdef yylex_init_extra
#define sql2003_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sql2003_lex_init_extra
#endif

#ifdef yylex_destroy
#define sql2003_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sql2003_lex_destroy
#endif

#ifdef yyget_debug
#define sql2003_get_debug_ALREADY_DEFINED
#else
#define yyget_debug sql2003_get_debug
#endif

#ifdef yyset_debug
#define sql2003_set_debug_ALREADY_DEFINED
#else
#define yyset_debug sql2003_set_debug
#endif

#ifdef yyget_extra
#define sql2003_get_extra_ALREADY_DEFINED
#else
#define yyget_extra sql2003_get_extra
#endif

#ifdef yyset_extra
#define sql2003_set_extra_ALREADY_DEFINED
#else
#define yyset_extra sql2003_set_extra
#endif

#ifdef yyget_in
#define sql2003_get_in_ALREADY_DEFINED
#else
#define yyget_in sql2003_get_in
#endif

#ifdef yyset_in
#define sql2003_set_in_ALREADY_DEFINED
#else
#define yyset_in sql2003_set_in
#endif

#ifdef yyget_out
#define sql2003_get_out_ALREADY_DEFINED
#else
#define yyget_out sql2003_get_out
#endif

#ifdef yyset_out
#define sql2003_set_out_ALREADY_DEFINED
#else
#define yyset_out sql2003_set_out
#endif

#ifdef yyget_leng
#define sql2003_get_leng_ALREADY_DEFINED
#else
#define yyget_leng sql2003_get_leng
#endif

#ifdef yyget_text
#define sql2003_get_text_ALREADY_DEFINED
#else
#define yyget_text sql2003_get_text
#endif

#ifdef yyget_lineno
#define sql2003_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sql2003_get_lineno
#endif

#ifdef yyset_lineno
#define sql2003_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sql2003_set_lineno
#endif

#ifdef yyget_column
#define sql2003_get_column_ALREADY_DEFINED
#else
#define yyget_column sql2003_get_column
#endif

#ifdef yyset_column
#define sql2003_set_column_ALREADY_DEFINED
#else
#define yyset_column sql2003_set_column
#endif

#ifdef yywrap
#define sql2003_wrap_ALREADY_DEFINED
#else
#define yywrap sql2003_wrap
#endif

#ifdef yyget_lval
#define sql2003_get_lval_ALREADY_DEFINED
#else
#define yyget_lval sql2003_get_lval
#endif

#ifdef yyset_lval
#define sql2003_set_lval_ALREADY_DEFINED
#else
#define yyset_lval sql2003_set_lval
#endif

#ifdef yyget_lloc
#define sql2003_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sql2003_get_lloc
#endif

#ifdef yyset_lloc
#define sql2003_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sql2003_set_lloc
#endif

#ifdef yyalloc
#define sql2003_alloc_ALREADY_DEFINED
#else
#define yyalloc sql2003_alloc
#endif

#ifdef yyrealloc
#define sql2003_realloc_ALREADY_DEFINED
#else
#define yyrealloc sql2003_realloc
#endif

#ifdef yyfree
#define sql2003_free_ALREADY_DEFINED
#else
#define yyfree sql2003_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sql2003_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[818] =
    {   0,
      210,  210,    0,    0,  188,  188,  192,  192,    0,    0,
        0,    0,  183,  183,  214,  212,  200,  200,  201,  212,
      196,  201,  185,  201,  201,  201,  160,  160,  207,  203,
      205,  211,  212,  196,  196,  196,  196,  196,  196,   58,
      196,  196,  196,   74,  196,   78,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  190,  212,  201,
      213,  188,  189,  192,  193,  173,  172,  172,  173,  173,
      173,  182,  180,  180,  182,  176,  182,  181,  182,  182,
      178,  182,  183,  184,  200,  209,    0,    0,  196,  199,
      165,    0,  164,  160,    0,    0,  206,  208,  204,  197,

        0,  196,  196,  196,    5,  196,  196,  196,  196,  196,
       13,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,   63,   64,   72,  196,  196,  196,
      196,  196,  196,  196,  196,  186,  196,  196,   89,  196,
      196,  196,  196,   95,   96,   98,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  135,  196,
      196,  196,  196,  196,  196,  196,  196,  196,    0,    0,
      202,  188,  187,  192,  191,  172,  171,    0,    0,  180,

        0,    0,  176,  179,    0,    0,    0,    0,  183,  194,
      199,    0,    0,  164,    0,    0,  161,  159,  198,    1,
        2,    3,  196,    6,    7,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,   34,   35,  196,  196,  196,
      196,  196,  196,  196,  196,   45,  196,  196,  196,  196,
      196,  196,  196,   55,  196,  196,  196,  196,  196,  196,
      196,   67,  196,  196,  196,  196,   79,   80,   82,  196,
      196,  196,  196,  196,   90,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  112,  196,  114,  196,  196,  196,  196,  121,
      196,  196,  196,  196,  128,  196,  196,  196,  196,  196,
      151,  196,  196,  196,  196,  196,  196,  196,  153,  196,
      196,  196,  196,  196,  196,  196,  195,  171,  171,  171,
        0,    0,  174,  179,  179,  179,    0,  177,  175,    0,
      163,    0,    0,    0,  162,  198,  196,  196,  196,  196,
       11,  196,   16,   14,   15,   17,   20,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,   33,  196,  196,
      196,  196,  196,   40,  196,  196,   43,   44,  196,  196,
      196,  196,   50,  196,  196,  196,  196,   56,   57,  196,

      196,   62,  196,  196,  196,   71,   73,  196,   76,   77,
      196,  196,  196,  196,  196,  196,  196,  158,  196,  196,
      196,  196,   97,  196,  196,  196,  102,  196,  196,  196,
      196,  196,  108,  109,  110,  196,  196,  115,  196,  196,
      196,  196,  196,  122,  196,  124,  196,  196,  196,  196,
      131,  132,  133,  154,  166,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  145,  196,  147,  149,  150,
      171,  171,    0,    0,    0,  179,  179,    0,    0,  177,
      199,    4,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,   26,  196,   28,  196,  196,  196,  196,  196,

      196,  196,  196,  196,   46,  196,  196,  196,  196,  196,
      168,   53,  196,   59,  196,   65,  196,  196,  196,   75,
      196,   83,  196,  196,  196,   87,   88,  196,  196,  196,
      196,  196,   99,  196,  101,  196,  196,  156,  196,  196,
      107,  196,  113,  196,  117,  196,  196,  196,  196,  196,
      196,  196,  130,  196,  196,  137,  196,  196,  196,  139,
      196,  196,  196,  196,  196,  146,  196,  171,  171,  171,
      171,  170,  179,  179,  179,  179,  196,    9,   10,  196,
      196,  196,  196,  196,  196,  196,  169,  196,  196,  196,
      196,  196,   38,  196,  196,   42,   47,   48,  196,  196,

       52,  196,  196,   61,   66,  196,  196,  196,   81,  196,
      196,  196,   91,  196,  196,   93,   94,  100,  196,  196,
      196,  196,  196,  196,  118,  119,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  138,  140,  196,  196,  196,
      196,  196,  171,  171,  171,  171,  171,  171,    0,    0,
      179,  179,  179,  179,  179,  179,    0,    0,    8,   12,
      196,  196,  196,   23,   24,  196,  196,  196,   30,   36,
      157,   37,  196,  196,   49,   51,  196,  196,   68,  196,
      196,  196,  196,   86,   92,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  167,

      155,  141,  142,  143,  196,  148,  171,    0,  171,  171,
      179,    0,  179,  179,  196,   21,  196,  196,  196,  196,
      196,  196,   41,  196,   60,  196,   70,   84,   85,  152,
      196,  196,  196,  196,  196,  196,  196,  123,  196,  196,
      196,  196,  196,  196,  144,  171,    0,  171,  179,    0,
      179,   18,  196,  196,  196,   29,  196,  196,  196,   54,
       69,  103,  196,  105,  106,  111,  196,  196,  196,  196,
      196,  196,  134,  136,   19,   22,  196,  196,  196,  196,
       39,  196,  116,  196,  196,  126,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  127,  129,  196,  196,  196,

       32,  104,  120,  196,   25,  196,  196,  125,  196,  196,
      196,  196,  196,  196,   27,   31,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    9,    9,    9,   10,    9,
        9,   11,   12,    9,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    1,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    9,   53,   54,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,    9,   81,    9,    9,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    5,
        1,    6,    1,    1,    1,    7,    7,    8,    1,    1,
        1,    1,    9,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    1,
       12,   13,   11,    1,   10,   10,   10,   10,   10,   10,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        1
    } ;

static const flex_int16_t yy_base[856] =
    {   0,
        0,    0,    0,    0, 1778, 1777, 1722, 1641,   80,   84,
      158,  239, 1673, 1670, 1686, 2123,   89,   98, 1665, 1677,
        0, 2123, 2123, 1670,   88, 1671,  169,   92,   90, 2123,
     1661, 2123, 1656,   77,  156,  158,  239,  231,  241,   49,
       78,  158,   60,    0,  260,  290,  311,  363,  319,  308,
      414,  423,  164,   83,   93,   85,   77, 2123, 1624, 1596,
     2123,    0, 1666,    0, 1623, 2123,  132,  137, 1661, 1662,
       93, 2123,  322,  391, 1665,    0, 1658, 2123, 1658, 1645,
     2123, 1613,    0, 2123,  267, 2123, 1659, 1658,    0,    0,
      258,    0,  313,  385,  345,    0, 2123, 2123, 2123, 1539,

        0,   91,  306,  149,  166,  168,  162,  353,  169,  226,
        0,  363,  257,  249,  463,  310,  303,  367,  437,  258,
      298,  312,  355,  376,  386,  480,  382,  380,  410,  387,
      425,  427,  423,  426,    0,  472,    0,  448,  461,  484,
      482,  470,  482,  493,  487, 2123,  480,  493,  482,  491,
      508,  501,  493,    0,  506,  515,  518,  509,  532,  521,
      523,  521,  540,  532,  550,  540,  525,  537,  561,  553,
      542, 1500,  554,  546,  542,  560,  558,  562,  549,  579,
      599,  562,  594,  595,  566,  571,  604,  595, 1498, 1496,
     2123,    0, 2123,    0, 2123,  644,  115,    0,  612,  668,

     1494, 1481,    0,  288,    0,    0, 1420, 1412,    0, 1408,
        0,  627, 1402,  649,  662,  115,  289,    0,    0,    0,
        0,    0,  626,    0,    0,  605,  620,  632,  633,  625,
      641,  652,  643,  660,  651,  660,  655,  647,  652,  657,
      672,  655,  670,  658,  672,    0,  669,  678,  675,  663,
      680,  666,  685,  673,  685, 1359,  690,  711,  692,  678,
      680,  714,  707,    0,  711,  713,  706,  720,  713,  727,
      728,  729,  721,  729,  717,  733,    0,  718,    0,  720,
      721,  736,  741,  728,    0,  736,  744,  733,  747,  748,
      734,  756,  772,  773,  763,  765,  783,  772,  786,  784,

      789,  773,    0,  788,  780,  781,  783,  795,  783,  784,
      792,  800,  801,  803,    0,  791,  801,  800,  796,  814,
        0,  808,  818,  824,  825,  827,  834,  846,    0,  834,
      828,  852,  839,  848,  840,  854, 1345,  396,  409,  872,
     1376,  849, 1378,  417,  454,  875, 1362,    0, 1295,  410,
      875, 1241,  893,  882,  900,    0,  841,  868,  869,  873,
        0,  890,    0,    0,    0,  895,    0,  893, 1186,  898,
      895,  896,  882,  883,  886, 1174,  901,    0,  894,  908,
      889,  891,  907,    0,  904,  903,    0,    0,  900,  901,
      902,  898,  899,  901,  918,  904,  910,    0,    0,  912,

      921,    0,  921,  927,  946,    0,    0,  952,    0,    0,
      938,  952,  952,  947,  945,  947,  965,  959,  951,  968,
      969,  953,    0,  956,  957,  959,    0,  969,  974,  960,
      976,  977,    0,    0,    0,  965,  966,    0,  973,  985,
      983,  998,  998,    0, 1003,    0,  995, 1015, 1017, 1018,
        0,    0, 1005,    0,    0, 1004, 1012, 1012, 1007, 1010,
     1024, 1028, 1026, 1026, 1020,    0, 1032, 1025,    0,    0,
      462, 1092, 1215, 1053, 1037, 1057, 1096, 1055, 1056,    0,
     2123,    0, 1047, 1039, 1038, 1068, 1072, 1058, 1058, 1060,
     1069, 1070,    0, 1086,    0, 1088, 1079, 1094, 1078, 1085,

     1093,  821, 1085, 1096,    0, 1097, 1083, 1100, 1085, 1088,
        0,    0, 1086, 1103, 1106,    0, 1094, 1110, 1097,    0,
     1112,    0, 1102, 1111, 1130,    0,    0, 1131, 1130, 1133,
     1122, 1130,    0, 1132,    0, 1133, 1140,    0, 1151, 1138,
        0, 1139,    0, 1138,    0, 1156, 1141, 1148, 1155, 1160,
     1144, 1154,    0, 1149, 1157,    0, 1151, 1160, 1171,    0,
     1158, 1177, 1165, 1166, 1182,    0, 1166, 1231, 1240, 1245,
     1209, 2123, 1254, 1259, 1268, 1225, 1179,    0,    0, 1212,
     1211, 1235, 1226, 1238, 1225, 1236,  588, 1244, 1234, 1243,
     1254, 1241,    0, 1245, 1261,    0,    0,    0, 1260, 1261,

        0, 1258, 1254,    0,    0, 1252, 1267, 1272,    0, 1270,
     1276, 1266,    0, 1276, 1279,    0,    0,    0, 1272, 1262,
     1278, 1279, 1280, 1278,    0,    0, 1279, 1286, 1299,  539,
      406, 1304, 1303, 1300, 1295,    0,    0, 1298, 1310, 1305,
     1310, 1305, 1347, 1352, 1361, 1375, 1378, 1389,  420,  405,
     1392, 1403, 1406, 1417, 1420, 1431,  371,  365,    0,    0,
     1323, 1325, 1364,    0,    0, 1360, 1367, 1382,  299,    0,
        0,    0, 1402, 1394,    0,    0, 1401, 1409,    0, 1414,
     1410, 1404, 1413,    0,    0, 1408, 1412,  230, 1414, 1414,
     1408, 1429,  164, 1413, 1414, 1420, 1416, 1425, 1435,    0,

        0,    0,    0,    0, 1425,    0, 1462,  203, 1493, 1494,
     1507,  200, 1508, 1521, 1431,    0, 1443, 1463, 1478, 1471,
     1472, 1488,    0, 1497,    0, 1485,    0,    0,    0,    0,
     1492, 1489, 1505, 1500, 1510, 1511, 1496,    0, 1498, 1504,
     1519, 1502, 1509, 1522,    0, 1552,  155, 1573, 1578,  141,
     1587, 1509, 1512, 1537, 1552,    0, 1555, 1552, 1562,    0,
        0,    0, 1573,    0,    0,    0, 1558, 1559, 1575, 1565,
     1569, 1578,    0,    0,    0,    0, 1575, 1574, 1574, 1583,
        0, 1575,    0, 1585, 1572,    0, 1576, 1575, 1580, 1591,
     1592, 1580, 1588, 1582, 1584,    0,    0, 1596,   43, 1587,

        0,    0,    0, 1596,    0, 1592, 1596,    0, 1621, 1632,
     1616, 1623, 1618, 1624,    0,    0, 2123, 1694, 1707, 1720,
     1733, 1746, 1759, 1772, 1782, 1787, 1798, 1811, 1824, 1836,
     1846, 1857, 1870, 1883, 1896, 1903, 1904, 1915, 1928, 1941,
     1954, 1958, 1969, 1976, 1987, 2000, 2007, 2018, 2031, 2044,
     2057, 2070, 2083, 2096, 2109
    } ;

static const flex_int16_t yy_def[856] =
    {   0,
      817,    1,  818,  818,  819,  819,  820,  820,  821,  821,
      822,  822,  823,  823,  817,  817,  817,  817,  817,  824,
      825,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  826,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  817,  827,  817,
      817,  828,  817,  829,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  830,  831,  817,  817,  817,  817,
      817,  832,  833,  817,  817,  817,  824,  817,  825,  834,
      817,  835,  817,  817,  817,  836,  817,  817,  817,  826,

      837,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  817,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  827,  817,
      817,  828,  817,  829,  817,  817,  838,  839,  817,  817,

      830,  817,  831,  840,  841,  842,  832,  817,  833,  817,
      834,  817,  843,  817,  817,  817,  817,  836,  844,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  817,  838,  838,  838,
      845,  817,  817,  840,  840,  840,  846,  847,  817,  817,
      817,  843,  843,  817,  817,  844,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      838,  848,  845,  845,  817,  840,  849,  846,  846,  847,
      817,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  850,  850,  850,
      817,  817,  851,  851,  851,  817,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  850,  850,  850,  850,  850,  852,  817,  817,
      851,  851,  851,  851,  851,  853,  817,  817,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  850,  845,  854,  850,
      851,  846,  855,  851,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  850,  845,  850,  851,  846,
      851,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,    0,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817
    } ;

static const flex_int16_t yy_nxt[2205] =
    {   0,
       16,   17,   18,   16,   17,   19,   20,   21,   22,   23,
       22,   22,   24,   25,   26,   27,   28,   22,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   21,
       50,   51,   52,   53,   54,   55,   21,   56,   57,   58,
       16,   16,   21,   59,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       21,   50,   51,   52,   53,   54,   55,   21,   56,   57,
       60,   67,   68,   67,   67,   67,   68,   67,   67,  132,
       85,   85,   69,   85,   70,  806,   69,  138,   70,   85,

       85,  133,   85,   91,   91,   93,  184,   94,   94,   97,
       98,  102,  187,  103,  188,  134,  199,  104,  105,   95,
      132,  106,   71,  185,  186,  220,   71,  339,  138,  340,
      217,  217,  133,  196,  196,  196,  196,  184,  196,  196,
      196,  196,  102,  187,  103,  188,  134,  199,  104,  105,
       95,  479,  106,   71,  185,  186,  220,   71,   72,   73,
       74,   73,   73,   72,   75,  474,   72,   72,   72,   72,
       77,   78,   79,   72,   72,   72,   72,   72,   72,   72,
       80,  112,   93,  107,   94,   94,  135,  108,  113,  223,
      109,  224,  114,  110,  136,  115,   95,  225,  116,  137,

      181,  117,  182,  111,  226,  183,  229,   81,   72,   72,
      479,   82,  112,  474,  107,   96,  737,  135,  108,  113,
      223,  109,  224,  114,  110,  136,  115,   95,  225,  116,
      137,  181,  117,  182,  111,  226,  183,  229,   72,   72,
       73,   74,   73,   73,   72,   75,   96,   72,   72,   72,
       72,   77,   78,   79,   72,   72,   72,   72,   72,   72,
       72,   80,  118,  230,  127,  123,  119,  124,   85,   85,
      120,   85,  125,   91,   91,  128,  121,  126,  129,  122,
      233,  130,  732,  139,  131,  212,  234,  140,   81,   72,
       72,  141,   82,  118,  230,  127,  123,  119,  124,  252,

      345,  120,  346,  125,  217,  217,  128,  121,  126,  129,
      122,  233,  130,  142,  139,  131,  212,  234,  140,   72,
      146,  143,  141,  200,  200,  200,  200,  144,  214,  214,
      252,  164,  221,  145,  147,  165,  148,  241,  243,  166,
      215,  253,  160,  244,  142,  167,  161,  242,  149,  254,
      162,  721,  143,  222,  150,  151,  216,  216,  144,  163,
      217,  217,  164,  221,  145,  147,  165,  148,  241,  243,
      166,  215,  253,  160,  244,  205,  167,  161,  242,  149,
      254,  162,  227,  204,  222,  150,  151,  152,  153,  228,
      163,  154,  200,  200,  200,  200,  255,  231,   93,  155,

       94,   94,  256,  156,  232,  157,  158,  159,  339,  245,
      340,  257,   95,  227,  246,  198,  261,  262,  152,  153,
      228,  471,  154,  340,  265,  351,  351,  255,  231,  345,
      155,  346,  197,  256,  156,  232,  157,  158,  159,  168,
      245,  169,  257,   95,  263,  246,  176,  261,  262,  170,
      264,  171,  172,  177,  178,  265,  173,  174,  697,  266,
      179,  175,  247,  180,  267,  248,  476,  268,  346,  269,
      168,  249,  169,  250,  471,  263,  340,  176,  251,  273,
      170,  264,  171,  172,  177,  178,  235,  173,  174,  236,
      266,  179,  175,  247,  180,  267,  248,  237,  268,  238,

      269,  274,  249,  239,  250,  258,  240,  259,  270,  251,
      273,  260,  275,  271,  272,  276,  277,  235,  278,  279,
      236,  281,  282,  283,  285,  286,  287,  284,  237,  280,
      238,  288,  274,  289,  239,  290,  258,  240,  259,  270,
      291,  292,  260,  275,  271,  272,  276,  277,  293,  278,
      279,  294,  281,  282,  283,  285,  286,  287,  284,  295,
      280,  296,  288,  297,  289,  298,  290,  299,  300,  304,
      305,  291,  292,  301,  306,  302,  311,  312,  303,  293,
      314,  315,  294,  316,  317,  318,  307,  321,  328,  319,
      295,  696,  296,  333,  297,  308,  298,  320,  299,  300,

      304,  305,  309,  310,  301,  306,  302,  311,  312,  303,
      322,  314,  315,  334,  316,  317,  318,  307,  321,  328,
      319,  329,  323,  324,  333,  330,  308,  335,  320,  331,
      325,  336,  326,  309,  310,  332,  342,  327,  350,  350,
      667,  322,  351,  351,  334,  196,  196,  196,  196,  357,
      358,  359,  329,  323,  324,  360,  330,  361,  335,  362,
      331,  325,  336,  326,  214,  214,  332,  342,  327,  200,
      200,  200,  200,  354,  354,  363,  215,  355,  355,  364,
      357,  358,  359,  366,  367,  368,  360,  369,  361,  370,
      362,  371,  372,  373,  365,  374,  375,  376,  377,  378,

      379,  381,  382,  380,  383,  384,  363,  215,  385,  386,
      364,  387,  388,  390,  366,  367,  368,  393,  369,  394,
      370,  395,  371,  372,  373,  365,  374,  375,  376,  377,
      378,  379,  381,  382,  380,  383,  384,  396,  391,  385,
      386,  397,  387,  388,  390,  392,  398,  399,  393,  400,
      394,  401,  395,  402,  403,  404,  405,  407,  408,  409,
      410,  411,  412,  413,  416,  417,  406,  414,  396,  391,
      418,  419,  397,  420,  421,  422,  392,  398,  399,  415,
      400,  423,  401,  424,  402,  403,  404,  405,  407,  408,
      409,  410,  411,  412,  413,  416,  417,  406,  414,  425,

      426,  418,  419,  427,  420,  421,  422,  428,  429,  430,
      415,  431,  423,  432,  424,  434,  436,  433,  437,  440,
      441,  438,  442,  435,  443,  444,  445,  446,  447,  448,
      425,  426,  439,  449,  427,  450,  451,  452,  428,  429,
      430,  453,  431,  454,  432,  455,  434,  436,  433,  437,
      440,  441,  438,  442,  435,  443,  444,  445,  446,  447,
      448,  456,  457,  458,  449,  459,  450,  451,  452,  460,
      461,  462,  453,  594,  454,  466,  455,  463,  468,  467,
      469,  470,  472,  475,  339,  477,  340,  345,  482,  346,
      351,  351,  456,  457,  458,  483,  459,  355,  355,  464,

      460,  461,  462,  353,  465,  484,  466,  481,  463,  468,
      467,  469,  470,  485,  475,  355,  355,  486,  487,  482,
      488,  490,  491,  492,  493,  494,  483,  495,  497,  498,
      464,  499,  500,  501,  502,  503,  484,  504,  505,  506,
      507,  508,  509,  510,  485,  511,  512,  513,  486,  487,
      514,  488,  490,  491,  492,  493,  494,  515,  495,  497,
      498,  516,  499,  500,  501,  502,  503,  517,  504,  505,
      506,  507,  508,  509,  510,  518,  511,  512,  513,  520,
      521,  514,  522,  523,  524,  525,  519,  526,  515,  527,
      528,  529,  516,  530,  531,  532,  533,  534,  517,  535,

      536,  537,  538,  539,  541,  542,  518,  540,  543,  544,
      520,  521,  545,  522,  523,  524,  525,  519,  526,  546,
      527,  528,  529,  547,  530,  531,  532,  533,  534,  548,
      535,  536,  537,  538,  539,  541,  542,  549,  540,  543,
      544,  550,  551,  545,  552,  553,  554,  555,  556,  557,
      546,  558,  559,  560,  547,  561,  562,  563,  564,  566,
      548,  565,  567,  474,  572,  479,  479,  571,  549,  476,
      576,  346,  550,  551,  577,  552,  553,  554,  555,  556,
      557,  578,  558,  559,  560,  579,  561,  562,  563,  564,
      566,  580,  565,  567,  341,  572,  341,  581,  347,  582,

      347,  583,  584,  338,  569,  577,  570,  344,  574,  585,
      575,  586,  578,  587,  588,  589,  579,  590,  591,  592,
      593,  595,  580,  596,  597,  598,  599,  600,  581,  601,
      582,  602,  583,  584,  603,  604,  605,  606,  607,  609,
      585,  608,  586,  610,  587,  588,  589,  611,  590,  591,
      592,  593,  595,  612,  596,  597,  598,  599,  600,  613,
      601,  614,  602,  615,  616,  603,  604,  605,  606,  607,
      609,  617,  608,  618,  610,  619,  620,  621,  611,  622,
      623,  624,  625,  626,  612,  627,  628,  629,  630,  631,
      613,  632,  614,  633,  615,  616,  634,  635,  636,  637,

      638,  639,  617,  640,  618,  641,  619,  620,  621,  642,
      622,  623,  624,  625,  626,  659,  627,  628,  629,  630,
      631,  649,  632,  650,  633,  474,  496,  634,  635,  636,
      637,  638,  639,  473,  640,  473,  641,  657,  489,  658,
      642,  644,  473,  645,  473,  646,  659,  473,  660,  473,
      644,  353,  647,  661,  646,  648,  478,  645,  478,  646,
      662,  478,  663,  478,  652,  664,  653,  665,  654,  652,
      478,  655,  478,  654,  666,  668,  669,  670,  656,  660,
      653,  671,  654,  672,  661,  673,  674,  675,  676,  677,
      678,  662,  679,  663,  680,  681,  664,  682,  665,  683,

      684,  685,  686,  687,  688,  666,  668,  669,  670,  689,
      690,  691,  671,  692,  672,  693,  673,  674,  675,  676,
      677,  678,  694,  679,  695,  680,  681,  698,  682,  699,
      683,  684,  685,  686,  687,  688,  700,  701,  702,  703,
      689,  690,  691,  704,  692,  705,  693,  706,  207,  473,
      715,  473,  716,  694,  473,  695,  473,  644,  698,  645,
      699,  646,  644,  473,  645,  473,  340,  700,  701,  702,
      703,  644,  479,  647,  704,  646,  705,  473,  706,  473,
      473,  715,  473,  716,  201,  648,  474,  645,  644,  646,
      647,  708,  646,  708,  478,  717,  478,  718,  189,  709,

      643,  710,  652,  570,  653,  478,  654,  478,  478,  719,
      478,  389,  353,  652,   87,  653,  652,  346,  655,  478,
      654,  478,  478,  720,  478,  722,  717,  656,  718,  653,
      652,  654,  655,  712,  654,  712,  723,  724,  725,  726,
      719,  713,  651,  714,  727,  575,  728,  729,  730,  731,
      733,  734,  735,  736,  720,  738,  722,  739,  740,  742,
      743,  741,  744,  745,  473,  207,  473,  723,  724,  725,
      726,  752,  644,  349,  645,  727,  646,  728,  729,  730,
      731,  733,  734,  735,  736,  753,  738,  201,  739,  740,
      742,  743,  741,  744,  745,  747,  473,  747,  473,  754,

      343,  755,  752,  644,  644,  748,  647,  646,  646,  478,
      750,  478,  750,  756,  757,  758,  753,  652,  652,  653,
      751,  654,  654,  478,  759,  478,  760,  761,  762,  763,
      754,  652,  755,  655,  764,  654,  765,  766,  767,  768,
      769,  770,  771,  772,  756,  757,  758,  773,  774,  189,
      775,  337,  313,  776,  473,  759,  473,  760,  761,  762,
      763,  817,  644,  777,  645,  764,  646,  765,  766,  767,
      768,  769,  770,  771,  772,  473,  778,  473,  773,  774,
      478,  775,  478,  644,  776,  647,  779,  646,  652,  478,
      653,  478,  654,  780,  777,  781,  782,  652,  783,  655,

      784,  654,  785,  786,  787,  788,  789,  778,  790,  791,
      792,  793,  794,  795,  796,  797,  798,  779,  799,  800,
      801,  802,  803,  804,  780,  805,  781,  782,  807,  783,
      808,  784,  809,  785,  786,  787,  788,  789,  810,  790,
      791,  792,  793,  794,  795,  796,  797,  798,  811,  799,
      800,  801,  802,  803,  804,  812,  805,  813,  814,  807,
      815,  808,  816,  809,   87,  210,  208,  206,  205,  810,
      204,  202,  198,  197,  195,  193,  191,  190,  101,  811,
       99,   92,   90,   88,   86,  817,  812,   84,  813,  814,
       84,  815,   65,  816,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   87,   65,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   89,   63,   63,   89,  817,
      817,   89,   89,  100,  817,  100,  100,  100,  189,  817,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  817,
      189,  192,  192,  192,  192,  817,  192,  192,  192,  192,
      192,  192,  192,  192,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  201,  817,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  203,
      817,  817,  203,  817,  817,  203,  203,  207,  817,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  817,  207,
      209,  209,  209,  209,  209,  209,  209,  817,  209,  209,
      209,  209,  209,  211,  817,  817,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  213,  213,  213,  213,

      213,  817,  213,  213,  213,  213,  213,  213,  213,  218,
      817,  817,  218,  219,  219,  338,  817,  817,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  341,  341,
      341,  341,  341,  817,  341,  341,  341,  341,  341,  341,
      341,  344,  817,  817,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  347,  347,  347,  347,  347,  817,
      347,  347,  347,  347,  347,  347,  347,  348,  348,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  356,  817,  817,  356,  356,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  480,  817,  817,  480,  480,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,   15,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817
    } ;

static const flex_int16_t yy_chk[2205] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,    9,    9,    9,   10,   10,   10,   10,   40,
       17,   17,    9,   17,    9,  799,   10,   43,   10,   18,

       18,   41,   18,   25,   25,   28,   54,   28,   28,   29,
       29,   34,   56,   34,   57,   41,   71,   34,   34,   28,
       40,   34,    9,   55,   55,  102,   10,  197,   43,  197,
      216,  216,   41,   67,   67,   67,   67,   54,   68,   68,
       68,   68,   34,   56,   34,   57,   41,   71,   34,   34,
       28,  750,   34,    9,   55,   55,  102,   10,   11,   11,
       11,   11,   11,   11,   11,  747,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   36,   27,   35,   27,   27,   42,   35,   36,  104,
       35,  105,   36,   35,   42,   36,   27,  106,   36,   42,

       53,   36,   53,   35,  107,   53,  109,   11,   11,   11,
      712,   11,   36,  708,   35,   27,  693,   42,   35,   36,
      104,   35,  105,   36,   35,   42,   36,   27,  106,   36,
       42,   53,   36,   53,   35,  107,   53,  109,   11,   12,
       12,   12,   12,   12,   12,   12,   27,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   37,  110,   39,   38,   37,   38,   85,   85,
       37,   85,   38,   91,   91,   39,   37,   38,   39,   37,
      113,   39,  688,   45,   39,   91,  114,   45,   12,   12,
       12,   45,   12,   37,  110,   39,   38,   37,   38,  120,

      204,   37,  204,   38,  217,  217,   39,   37,   38,   39,
       37,  113,   39,   46,   45,   39,   91,  114,   45,   12,
       47,   46,   45,   73,   73,   73,   73,   46,   93,   93,
      120,   50,  103,   46,   47,   50,   47,  116,  117,   50,
       93,  121,   49,  117,   46,   50,   49,  116,   47,  122,
       49,  669,   46,  103,   47,   47,   95,   95,   46,   49,
       95,   95,   50,  103,   46,   47,   50,   47,  116,  117,
       50,   93,  121,   49,  117,  658,   50,   49,  116,   47,
      122,   49,  108,  657,  103,   47,   47,   48,   48,  108,
       49,   48,   74,   74,   74,   74,  123,  112,   94,   48,

       94,   94,  124,   48,  112,   48,   48,   48,  338,  118,
      338,  125,   94,  108,  118,  650,  127,  128,   48,   48,
      108,  339,   48,  339,  130,  350,  350,  123,  112,  344,
       48,  344,  649,  124,   48,  112,   48,   48,   48,   51,
      118,   51,  125,   94,  129,  118,   52,  127,  128,   51,
      129,   51,   51,   52,   52,  130,   51,   51,  631,  131,
       52,   51,  119,   52,  132,  119,  345,  133,  345,  134,
       51,  119,   51,  119,  471,  129,  471,   52,  119,  138,
       51,  129,   51,   51,   52,   52,  115,   51,   51,  115,
      131,   52,   51,  119,   52,  132,  119,  115,  133,  115,

      134,  139,  119,  115,  119,  126,  115,  126,  136,  119,
      138,  126,  140,  136,  136,  141,  142,  115,  143,  144,
      115,  145,  147,  148,  149,  150,  150,  148,  115,  144,
      115,  151,  139,  152,  115,  153,  126,  115,  126,  136,
      155,  156,  126,  140,  136,  136,  141,  142,  157,  143,
      144,  158,  145,  147,  148,  149,  150,  150,  148,  159,
      144,  160,  151,  161,  152,  162,  153,  163,  164,  166,
      167,  155,  156,  165,  168,  165,  170,  171,  165,  157,
      173,  174,  158,  175,  176,  177,  169,  179,  182,  178,
      159,  630,  160,  185,  161,  169,  162,  178,  163,  164,

      166,  167,  169,  169,  165,  168,  165,  170,  171,  165,
      180,  173,  174,  186,  175,  176,  177,  169,  179,  182,
      178,  183,  180,  181,  185,  183,  169,  187,  178,  184,
      181,  188,  181,  169,  169,  184,  199,  181,  212,  212,
      587,  180,  212,  212,  186,  196,  196,  196,  196,  223,
      226,  227,  183,  180,  181,  228,  183,  229,  187,  230,
      184,  181,  188,  181,  214,  214,  184,  199,  181,  200,
      200,  200,  200,  215,  215,  231,  214,  215,  215,  232,
      223,  226,  227,  233,  234,  235,  228,  236,  229,  237,
      230,  238,  239,  240,  232,  241,  242,  243,  244,  245,

      247,  248,  249,  247,  250,  251,  231,  214,  252,  253,
      232,  254,  255,  257,  233,  234,  235,  259,  236,  260,
      237,  261,  238,  239,  240,  232,  241,  242,  243,  244,
      245,  247,  248,  249,  247,  250,  251,  262,  258,  252,
      253,  263,  254,  255,  257,  258,  265,  266,  259,  267,
      260,  268,  261,  269,  270,  271,  272,  273,  274,  275,
      276,  278,  280,  281,  283,  284,  272,  282,  262,  258,
      286,  287,  263,  288,  289,  290,  258,  265,  266,  282,
      267,  291,  268,  292,  269,  270,  271,  272,  273,  274,
      275,  276,  278,  280,  281,  283,  284,  272,  282,  293,

      294,  286,  287,  295,  288,  289,  290,  296,  297,  298,
      282,  299,  291,  300,  292,  301,  302,  300,  304,  306,
      307,  305,  308,  301,  309,  310,  311,  312,  313,  314,
      293,  294,  305,  316,  295,  317,  318,  319,  296,  297,
      298,  320,  299,  322,  300,  323,  301,  302,  300,  304,
      306,  307,  305,  308,  301,  309,  310,  311,  312,  313,
      314,  324,  325,  326,  316,  327,  317,  318,  319,  328,
      330,  331,  320,  502,  322,  333,  323,  332,  334,  333,
      335,  336,  340,  342,  340,  346,  340,  346,  357,  346,
      351,  351,  324,  325,  326,  358,  327,  354,  354,  332,

      328,  330,  331,  353,  332,  359,  333,  353,  332,  334,
      333,  335,  336,  360,  342,  355,  355,  362,  366,  357,
      368,  370,  371,  372,  373,  374,  358,  375,  377,  379,
      332,  380,  381,  382,  383,  385,  359,  386,  389,  390,
      391,  392,  393,  394,  360,  395,  396,  397,  362,  366,
      400,  368,  370,  371,  372,  373,  374,  401,  375,  377,
      379,  403,  380,  381,  382,  383,  385,  404,  386,  389,
      390,  391,  392,  393,  394,  405,  395,  396,  397,  408,
      411,  400,  412,  413,  414,  415,  405,  416,  401,  417,
      418,  419,  403,  420,  421,  422,  424,  425,  404,  426,

      428,  429,  430,  431,  432,  436,  405,  431,  437,  439,
      408,  411,  440,  412,  413,  414,  415,  405,  416,  441,
      417,  418,  419,  442,  420,  421,  422,  424,  425,  443,
      426,  428,  429,  430,  431,  432,  436,  445,  431,  437,
      439,  447,  448,  440,  449,  450,  453,  456,  457,  458,
      441,  459,  460,  461,  442,  462,  463,  464,  465,  467,
      443,  465,  468,  474,  475,  478,  479,  474,  445,  476,
      479,  476,  447,  448,  483,  449,  450,  453,  456,  457,
      458,  484,  459,  460,  461,  485,  462,  463,  464,  465,
      467,  486,  465,  468,  472,  475,  472,  487,  477,  488,

      477,  489,  490,  472,  472,  483,  472,  477,  477,  491,
      477,  492,  484,  494,  496,  497,  485,  498,  499,  500,
      501,  503,  486,  504,  506,  507,  508,  509,  487,  510,
      488,  513,  489,  490,  514,  515,  517,  518,  519,  521,
      491,  519,  492,  523,  494,  496,  497,  524,  498,  499,
      500,  501,  503,  525,  504,  506,  507,  508,  509,  528,
      510,  529,  513,  530,  531,  514,  515,  517,  518,  519,
      521,  532,  519,  534,  523,  536,  537,  539,  524,  540,
      542,  544,  546,  547,  525,  548,  549,  550,  551,  552,
      528,  554,  529,  555,  530,  531,  557,  558,  559,  561,

      562,  563,  532,  564,  534,  565,  536,  537,  539,  567,
      540,  542,  544,  546,  547,  577,  548,  549,  550,  551,
      552,  571,  554,  571,  555,  473,  376,  557,  558,  559,
      561,  562,  563,  568,  564,  568,  565,  576,  369,  576,
      567,  568,  569,  568,  569,  568,  577,  570,  580,  570,
      569,  352,  569,  581,  569,  570,  573,  570,  573,  570,
      582,  574,  583,  574,  573,  584,  573,  585,  573,  574,
      575,  574,  575,  574,  586,  588,  589,  590,  575,  580,
      575,  591,  575,  592,  581,  594,  595,  599,  600,  602,
      603,  582,  606,  583,  607,  608,  584,  610,  585,  611,

      612,  614,  615,  619,  620,  586,  588,  589,  590,  621,
      622,  623,  591,  624,  592,  627,  594,  595,  599,  600,
      602,  603,  628,  606,  629,  607,  608,  632,  610,  633,
      611,  612,  614,  615,  619,  620,  634,  635,  638,  639,
      621,  622,  623,  640,  624,  641,  627,  642,  349,  643,
      661,  643,  662,  628,  644,  629,  644,  643,  632,  643,
      633,  643,  644,  645,  644,  645,  644,  634,  635,  638,
      639,  645,  347,  645,  640,  645,  641,  646,  642,  646,
      647,  661,  647,  662,  343,  646,  341,  646,  647,  646,
      647,  648,  647,  648,  651,  663,  651,  666,  337,  648,

      648,  648,  651,  648,  651,  652,  651,  652,  653,  667,
      653,  256,  213,  652,  210,  652,  653,  652,  653,  654,
      653,  654,  655,  668,  655,  673,  663,  654,  666,  654,
      655,  654,  655,  656,  655,  656,  674,  677,  678,  680,
      667,  656,  656,  656,  681,  656,  682,  683,  686,  687,
      689,  690,  691,  692,  668,  694,  673,  695,  696,  697,
      698,  696,  699,  705,  707,  208,  707,  674,  677,  678,
      680,  715,  707,  207,  707,  681,  707,  682,  683,  686,
      687,  689,  690,  691,  692,  717,  694,  202,  695,  696,
      697,  698,  696,  699,  705,  709,  710,  709,  710,  718,

      201,  719,  715,  709,  710,  709,  710,  709,  710,  711,
      713,  711,  713,  720,  721,  721,  717,  711,  713,  711,
      713,  711,  713,  714,  722,  714,  724,  726,  731,  732,
      718,  714,  719,  714,  733,  714,  734,  735,  736,  737,
      739,  740,  741,  742,  720,  721,  721,  743,  744,  190,
      752,  189,  172,  753,  746,  722,  746,  724,  726,  731,
      732,  100,  746,  754,  746,  733,  746,  734,  735,  736,
      737,  739,  740,  741,  742,  748,  755,  748,  743,  744,
      749,  752,  749,  748,  753,  748,  757,  748,  749,  751,
      749,  751,  749,  758,  754,  759,  763,  751,  767,  751,

      768,  751,  769,  770,  771,  772,  777,  755,  778,  779,
      780,  782,  784,  785,  787,  788,  789,  757,  790,  791,
      792,  793,  794,  795,  758,  798,  759,  763,  800,  767,
      804,  768,  806,  769,  770,  771,  772,  777,  807,  778,
      779,  780,  782,  784,  785,  787,  788,  789,  809,  790,
      791,  792,  793,  794,  795,  810,  798,  811,  812,  800,
      813,  804,  814,  806,   88,   87,   82,   80,   79,  807,
       77,   75,   70,   69,   65,   63,   60,   59,   33,  809,
       31,   26,   24,   20,   19,   15,  810,   14,  811,  812,
       13,  813,    8,  814,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  824,    7,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  825,    6,    5,  825,    0,
        0,  825,  825,  826,    0,  826,  826,  826,  827,    0,

      827,  827,  827,  827,  827,  827,  827,  827,  827,    0,
      827,  828,  828,  828,  828,    0,  828,  828,  828,  828,
      828,  828,  828,  828,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  830,    0,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  831,
        0,    0,  831,    0,    0,  831,  831,  832,    0,  832,
      832,  832,  832,  832,  832,  832,  832,  832,    0,  832,
      833,  833,  833,  833,  833,  833,  833,    0,  833,  833,
      833,  833,  833,  834,    0,    0,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  835,  835,  835,  835,

      835,    0,  835,  835,  835,  835,  835,  835,  835,  836,
        0,    0,  836,  837,  837,  838,    0,    0,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  839,  839,
      839,  839,  839,    0,  839,  839,  839,  839,  839,  839,
      839,  840,    0,    0,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  841,  841,  841,  841,  841,    0,
      841,  841,  841,  841,  841,  841,  841,  842,  842,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  844,    0,    0,  844,  844,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  847,    0,    0,  847,  847,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  854,  854,  854,  854,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser_sql2003.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser_sql2003.l"

#include "node.h"
#include "sqlparser_sql2003_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

std::string escape_double_quotation_2003(const std::string& src, char c) {
    assert(c == '"' || c == '`' || c == ']');
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == c && src[1+i] == c) {
            ret += c;
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return SQL2003_##name; }
#define YYSTYPE         SQL2003_STYPE
#define YYLTYPE         SQL2003_LTYPE

#line 1471 "sqlparser_sql2003_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1484 "sqlparser_sql2003_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3
#define cr 4
#define crtn 5
#define rest 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 123 "sqlparser_sql2003.l"

#line 1774 "sqlparser_sql2003_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 818 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 817 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 124 "sqlparser_sql2003.l"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 125 "sqlparser_sql2003.l"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 126 "sqlparser_sql2003.l"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 127 "sqlparser_sql2003.l"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 128 "sqlparser_sql2003.l"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 129 "sqlparser_sql2003.l"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 130 "sqlparser_sql2003.l"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 131 "sqlparser_sql2003.l"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 132 "sqlparser_sql2003.l"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 133 "sqlparser_sql2003.l"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 134 "sqlparser_sql2003.l"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 135 "sqlparser_sql2003.l"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 136 "sqlparser_sql2003.l"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 137 "sqlparser_sql2003.l"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 138 "sqlparser_sql2003.l"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 139 "sqlparser_sql2003.l"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 140 "sqlparser_sql2003.l"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 141 "sqlparser_sql2003.l"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 142 "sqlparser_sql2003.l"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 143 "sqlparser_sql2003.l"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 144 "sqlparser_sql2003.l"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 145 "sqlparser_sql2003.l"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 146 "sqlparser_sql2003.l"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 147 "sqlparser_sql2003.l"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 148 "sqlparser_sql2003.l"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 149 "sqlparser_sql2003.l"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 150 "sqlparser_sql2003.l"
TOKEN(CREATE_TABLE_REST)/* SQL-2003-R */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 151 "sqlparser_sql2003.l"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 152 "sqlparser_sql2003.l"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 153 "sqlparser_sql2003.l"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 154 "sqlparser_sql2003.l"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "sqlparser_sql2003.l"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "sqlparser_sql2003.l"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "sqlparser_sql2003.l"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "sqlparser_sql2003.l"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "sqlparser_sql2003.l"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "sqlparser_sql2003.l"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "sqlparser_sql2003.l"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 162 "sqlparser_sql2003.l"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 163 "sqlparser_sql2003.l"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 164 "sqlparser_sql2003.l"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 165 "sqlparser_sql2003.l"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 166 "sqlparser_sql2003.l"
TOKEN(DROP)             /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 167 "sqlparser_sql2003.l"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 168 "sqlparser_sql2003.l"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 169 "sqlparser_sql2003.l"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 170 "sqlparser_sql2003.l"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 171 "sqlparser_sql2003.l"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 172 "sqlparser_sql2003.l"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 173 "sqlparser_sql2003.l"
TOKEN(EXEC)             /* SQL-2003-N */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 174 "sqlparser_sql2003.l"
TOKEN(EXECUTE)          /* SQL-2003-N */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 175 "sqlparser_sql2003.l"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 176 "sqlparser_sql2003.l"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 177 "sqlparser_sql2003.l"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 178 "sqlparser_sql2003.l"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 179 "sqlparser_sql2003.l"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 180 "sqlparser_sql2003.l"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 181 "sqlparser_sql2003.l"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 182 "sqlparser_sql2003.l"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 183 "sqlparser_sql2003.l"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 184 "sqlparser_sql2003.l"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 185 "sqlparser_sql2003.l"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 186 "sqlparser_sql2003.l"
TOKEN(IF)               /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 187 "sqlparser_sql2003.l"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 188 "sqlparser_sql2003.l"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 189 "sqlparser_sql2003.l"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 190 "sqlparser_sql2003.l"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 191 "sqlparser_sql2003.l"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 192 "sqlparser_sql2003.l"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 193 "sqlparser_sql2003.l"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 194 "sqlparser_sql2003.l"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 195 "sqlparser_sql2003.l"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 196 "sqlparser_sql2003.l"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 197 "sqlparser_sql2003.l"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 198 "sqlparser_sql2003.l"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 199 "sqlparser_sql2003.l"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 200 "sqlparser_sql2003.l"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 201 "sqlparser_sql2003.l"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 202 "sqlparser_sql2003.l"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 203 "sqlparser_sql2003.l"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 204 "sqlparser_sql2003.l"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 205 "sqlparser_sql2003.l"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 206 "sqlparser_sql2003.l"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 207 "sqlparser_sql2003.l"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 208 "sqlparser_sql2003.l"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 209 "sqlparser_sql2003.l"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 210 "sqlparser_sql2003.l"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 211 "sqlparser_sql2003.l"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 212 "sqlparser_sql2003.l"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 213 "sqlparser_sql2003.l"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 214 "sqlparser_sql2003.l"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 215 "sqlparser_sql2003.l"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 216 "sqlparser_sql2003.l"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 217 "sqlparser_sql2003.l"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 218 "sqlparser_sql2003.l"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 219 "sqlparser_sql2003.l"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 220 "sqlparser_sql2003.l"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 221 "sqlparser_sql2003.l"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 222 "sqlparser_sql2003.l"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 223 "sqlparser_sql2003.l"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 224 "sqlparser_sql2003.l"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 225 "sqlparser_sql2003.l"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 226 "sqlparser_sql2003.l"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 227 "sqlparser_sql2003.l"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 228 "sqlparser_sql2003.l"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 229 "sqlparser_sql2003.l"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 230 "sqlparser_sql2003.l"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 231 "sqlparser_sql2003.l"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 232 "sqlparser_sql2003.l"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 233 "sqlparser_sql2003.l"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 234 "sqlparser_sql2003.l"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 235 "sqlparser_sql2003.l"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 236 "sqlparser_sql2003.l"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 237 "sqlparser_sql2003.l"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 238 "sqlparser_sql2003.l"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 239 "sqlparser_sql2003.l"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 240 "sqlparser_sql2003.l"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 241 "sqlparser_sql2003.l"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 242 "sqlparser_sql2003.l"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 243 "sqlparser_sql2003.l"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 244 "sqlparser_sql2003.l"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 245 "sqlparser_sql2003.l"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 246 "sqlparser_sql2003.l"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 247 "sqlparser_sql2003.l"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 248 "sqlparser_sql2003.l"
TOKEN(SP_EXECUTESQL)    /* SQL-2003-R */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 249 "sqlparser_sql2003.l"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 250 "sqlparser_sql2003.l"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 251 "sqlparser_sql2003.l"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 252 "sqlparser_sql2003.l"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 253 "sqlparser_sql2003.l"
TOKEN(TABLE)            /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 254 "sqlparser_sql2003.l"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 255 "sqlparser_sql2003.l"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 256 "sqlparser_sql2003.l"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 257 "sqlparser_sql2003.l"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 258 "sqlparser_sql2003.l"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 259 "sqlparser_sql2003.l"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 260 "sqlparser_sql2003.l"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 261 "sqlparser_sql2003.l"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 262 "sqlparser_sql2003.l"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 263 "sqlparser_sql2003.l"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 264 "sqlparser_sql2003.l"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 265 "sqlparser_sql2003.l"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 266 "sqlparser_sql2003.l"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 267 "sqlparser_sql2003.l"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 268 "sqlparser_sql2003.l"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 269 "sqlparser_sql2003.l"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 270 "sqlparser_sql2003.l"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 271 "sqlparser_sql2003.l"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 272 "sqlparser_sql2003.l"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 273 "sqlparser_sql2003.l"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 274 "sqlparser_sql2003.l"
TOKEN(TOP)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 275 "sqlparser_sql2003.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 276 "sqlparser_sql2003.l"
TOKEN(USE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 277 "sqlparser_sql2003.l"
TOKEN(TRIM)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 278 "sqlparser_sql2003.l"
TOKEN(UNPIVOT)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 279 "sqlparser_sql2003.l"
TOKEN(PIVOT)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 280 "sqlparser_sql2003.l"
TOKEN(DECLARE)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 282 "sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_NULLX;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 287 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return SQL2003_INTNUM;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 293 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return SQL2003_INTNUM;
}
	YY_BREAK
case 161:
#line 303 "sqlparser_sql2003.l"
case 162:
#line 304 "sqlparser_sql2003.l"
case 163:
YY_RULE_SETUP
#line 304 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 164:
#line 312 "sqlparser_sql2003.l"
case 165:
YY_RULE_SETUP
#line 312 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 319 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return SQL2003_BOOL;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 326 "sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_UNKNOWN;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 331 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return SQL2003_BOOL;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 338 "sqlparser_sql2003.l"
{
    BEGIN(cr);
    return SQL2003_CREATE;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 343 "sqlparser_sql2003.l"
{
    BEGIN(crtn);
    return SQL2003_TABLE;
}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 348 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 349 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case YY_STATE_EOF(cr):
#line 351 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    return SQL2003_END_P;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 356 "sqlparser_sql2003.l"
{
    return SQL2003_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 360 "sqlparser_sql2003.l"
{
    if(((ParseResult*)yyextra)->q_ == 0) {
        ((ParseResult*)yyextra)->q_ = 1;

        Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
        yylval->node = nd;
        nd->terminalToken_.str = escape_double_quotation_2003(std::string(yytext+1, yytext + strlen(yytext) - 1), '"');
        nd->terminalToken_.line = yylloc->first_line;
        nd->terminalToken_.column = yylloc->first_column;
        return SQL2003_NAME;
    } else {
        BEGIN(rest);
        yyless(0);  // pushes back all of the token's characters        
    }
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 376 "sqlparser_sql2003.l"
{
    if(((ParseResult*)yyextra)->q_ == 0) {
        ((ParseResult*)yyextra)->q_ = 1;
        
        Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
        yylval->node = nd;
        nd->terminalToken_.str = escape_double_quotation_2003(std::string(yytext+1, yytext + strlen(yytext) - 1), '`');
        nd->terminalToken_.line = yylloc->first_line;
        nd->terminalToken_.column = yylloc->first_column;
        return SQL2003_NAME;
    } else {
        BEGIN(rest);
        yyless(0);  // pushes back all of the token's characters        
    }
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 392 "sqlparser_sql2003.l"
{
    if(((ParseResult*)yyextra)->q_ == 0) {
        ((ParseResult*)yyextra)->q_ = 1;

        Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
        yylval->node = nd;
        nd->terminalToken_.str = yytext;
        nd->terminalToken_.line = yylloc->first_line;
        nd->terminalToken_.column = yylloc->first_column;
        return SQL2003_NAME;
    } else {
        BEGIN(rest);
        yyless(0);  // pushes back all of the token's characters
    }
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 408 "sqlparser_sql2003.l"
{
    if(((ParseResult*)yyextra)->q_ == 0) {
        ((ParseResult*)yyextra)->q_ = 1;

        Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
        yylval->node = nd;
        nd->terminalToken_.str = yytext;
        nd->terminalToken_.line = yylloc->first_line;
        nd->terminalToken_.column = yylloc->first_column;
        return SQL2003_NAME;
    } else {
        BEGIN(rest);
        yyless(0);  // pushes back all of the token's characters
    }
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 424 "sqlparser_sql2003.l"
{
    if(((ParseResult*)yyextra)->q_ == 0) {
        ((ParseResult*)yyextra)->q_ = 1;

        ((ParseResult*)yyextra)->old_state_ = YY_START;
        BEGIN(sb);
        ((ParseResult*)yyextra)->buf_ = std::stringstream{};
        ((ParseResult*)yyextra)->buf_ << '[';
    } else {
        BEGIN(rest);
        yyless(0);  // pushes back all of the token's characters
    }
}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 438 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 439 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 441 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->q_ = 0;
    return yytext[0];
}
	YY_BREAK
case YY_STATE_EOF(crtn):
#line 446 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    return SQL2003_END_P;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 451 "sqlparser_sql2003.l"
{
    BEGIN(rest);
    yyless(0);  // pushes back all of the token's characters
}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 456 "sqlparser_sql2003.l"
{
    // The rest part of CREATE TABLE statement.
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_CREATE_TABLE_REST;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 466 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    return yytext[0];
}
	YY_BREAK
case YY_STATE_EOF(rest):
#line 471 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    return SQL2003_END_P;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 476 "sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 482 "sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 488 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 492 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 496 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return SQL2003_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 505 "sqlparser_sql2003.l"
{
  //fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return SQL2003_ERROR;
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 510 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->old_state_ = YY_START;
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 517 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "]]";
}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 521 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 525 "sqlparser_sql2003.l"
{
    BEGIN(((ParseResult*)yyextra)->old_state_);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = escape_double_quotation_2003(text.substr(1, text.length() - 2), ']');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    yylval->node = nd;
    return SQL2003_NAME;
}
	YY_BREAK
case YY_STATE_EOF(sb):
#line 537 "sqlparser_sql2003.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unterminated identifier WITH '['\n");
    return SQL2003_ERROR;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 543 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_2003(std::string(yytext+1, yytext + strlen(yytext) - 1), '"');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return SQL2003_NAME;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 552 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_2003(std::string(yytext+1, yytext + strlen(yytext) - 1), '`');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return SQL2003_NAME;
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 561 "sqlparser_sql2003.l"
{
    //Node::strupr(yytext);
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_NAME;
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 571 "sqlparser_sql2003.l"
{
	Node* nd = Node::makeTerminalNode(E_PARAM, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_PARAM;
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 580 "sqlparser_sql2003.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_NAME;
}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 589 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 590 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 592 "sqlparser_sql2003.l"
{ return yytext[0];}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 594 "sqlparser_sql2003.l"
{ return SQL2003_CNNOP; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 595 "sqlparser_sql2003.l"
{ return SQL2003_COMP_EQ; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 596 "sqlparser_sql2003.l"
{ return SQL2003_COMP_GE; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 597 "sqlparser_sql2003.l"
{ return SQL2003_COMP_GT; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 598 "sqlparser_sql2003.l"
{ return SQL2003_COMP_LE; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 599 "sqlparser_sql2003.l"
{ return SQL2003_COMP_LT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 600 "sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 601 "sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 603 "sqlparser_sql2003.l"

	YY_BREAK
case 211:
YY_RULE_SETUP
#line 605 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return SQL2003_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 612 "sqlparser_sql2003.l"
{ return SQL2003_END_P; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 614 "sqlparser_sql2003.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return SQL2003_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 618 "sqlparser_sql2003.l"
ECHO;
	YY_BREAK
#line 3141 "sqlparser_sql2003_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 818 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 818 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 817);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 618 "sqlparser_sql2003.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char * /*msg*/ ) {
    //fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg);
    return SQL2003_ERROR;
}

