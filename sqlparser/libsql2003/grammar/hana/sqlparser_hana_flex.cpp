#line 2 "sqlparser_hana_flex.cpp"

#line 4 "sqlparser_hana_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hana__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hana__create_buffer
#endif

#ifdef yy_delete_buffer
#define hana__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hana__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hana__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hana__scan_buffer
#endif

#ifdef yy_scan_string
#define hana__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hana__scan_string
#endif

#ifdef yy_scan_bytes
#define hana__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hana__scan_bytes
#endif

#ifdef yy_init_buffer
#define hana__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hana__init_buffer
#endif

#ifdef yy_flush_buffer
#define hana__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hana__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hana__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hana__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hana__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hana__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hana_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hana_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hana_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hana_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hana_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hana_ensure_buffer_stack
#endif

#ifdef yylex
#define hana_lex_ALREADY_DEFINED
#else
#define yylex hana_lex
#endif

#ifdef yyrestart
#define hana_restart_ALREADY_DEFINED
#else
#define yyrestart hana_restart
#endif

#ifdef yylex_init
#define hana_lex_init_ALREADY_DEFINED
#else
#define yylex_init hana_lex_init
#endif

#ifdef yylex_init_extra
#define hana_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hana_lex_init_extra
#endif

#ifdef yylex_destroy
#define hana_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hana_lex_destroy
#endif

#ifdef yyget_debug
#define hana_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hana_get_debug
#endif

#ifdef yyset_debug
#define hana_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hana_set_debug
#endif

#ifdef yyget_extra
#define hana_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hana_get_extra
#endif

#ifdef yyset_extra
#define hana_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hana_set_extra
#endif

#ifdef yyget_in
#define hana_get_in_ALREADY_DEFINED
#else
#define yyget_in hana_get_in
#endif

#ifdef yyset_in
#define hana_set_in_ALREADY_DEFINED
#else
#define yyset_in hana_set_in
#endif

#ifdef yyget_out
#define hana_get_out_ALREADY_DEFINED
#else
#define yyget_out hana_get_out
#endif

#ifdef yyset_out
#define hana_set_out_ALREADY_DEFINED
#else
#define yyset_out hana_set_out
#endif

#ifdef yyget_leng
#define hana_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hana_get_leng
#endif

#ifdef yyget_text
#define hana_get_text_ALREADY_DEFINED
#else
#define yyget_text hana_get_text
#endif

#ifdef yyget_lineno
#define hana_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hana_get_lineno
#endif

#ifdef yyset_lineno
#define hana_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hana_set_lineno
#endif

#ifdef yyget_column
#define hana_get_column_ALREADY_DEFINED
#else
#define yyget_column hana_get_column
#endif

#ifdef yyset_column
#define hana_set_column_ALREADY_DEFINED
#else
#define yyset_column hana_set_column
#endif

#ifdef yywrap
#define hana_wrap_ALREADY_DEFINED
#else
#define yywrap hana_wrap
#endif

#ifdef yyget_lval
#define hana_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hana_get_lval
#endif

#ifdef yyset_lval
#define hana_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hana_set_lval
#endif

#ifdef yyget_lloc
#define hana_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hana_get_lloc
#endif

#ifdef yyset_lloc
#define hana_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hana_set_lloc
#endif

#ifdef yyalloc
#define hana_alloc_ALREADY_DEFINED
#else
#define yyalloc hana_alloc
#endif

#ifdef yyrealloc
#define hana_realloc_ALREADY_DEFINED
#else
#define yyrealloc hana_realloc
#endif

#ifdef yyfree
#define hana_free_ALREADY_DEFINED
#else
#define yyfree hana_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hana_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 291
#define YY_END_OF_BUFFER 292
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1184] =
    {   0,
      288,  288,    0,    0,  272,  272,    0,    0,  292,  290,
      277,  277,  278,  290,  276,  278,  269,  278,  278,  278,
      260,  260,  284,  280,  282,  289,  275,  275,  275,  275,
      275,  275,   54,  275,  275,  275,   69,  275,   73,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  278,  291,  272,  273,  277,  286,    0,    0,
      276,  276,  265,    0,  264,  260,    0,    0,  283,  285,
      287,  281,  275,  275,  275,  275,  275,  275,    5,  275,
      275,  275,  275,  275,  275,   13,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      234,  275,   59,   67,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  270,  275,  275,   84,
      275,  275,  275,  275,  275,   89,   90,   92,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  127,  275,  275,  223,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  279,  272,  271,  274,    0,
        0,  264,    0,    0,  261,  259,  275,    1,  275,    2,
        3,  275,  275,    6,    7,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
       33,   34,  275,  275,  275,  275,  275,  275,  275,   43,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,   51,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,   62,  275,  275,  154,  190,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
       74,  275,  275,   75,   77,  275,  275,  275,  275,  275,
       85,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      149,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  106,  275,  275,  275,  275,  275,
      108,  275,  275,  275,  275,  275,  115,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  121,  275,  275,  275,
      275,  275,  275,  275,  145,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  179,
      275,  275,  275,  275,  238,  275,  275,    0,  263,    0,
        0,    0,  262,  275,  275,  275,  275,  275,  275,  211,
      275,  275,  275,  275,  275,   11,  275,  248,   16,   14,
       15,   17,   20,  275,  275,  275,  275,  275,  275,  175,
      275,  275,  210,  275,  275,  275,   32,  275,  275,  275,

      275,   39,  275,  275,   42,  275,  275,  275,  275,  275,
      275,  275,  275,  222,  275,  245,  275,  275,   52,   53,
      275,  275,  275,  146,  275,   58,  275,  275,  275,  275,
       66,   68,  237,  275,  275,  174,  275,  191,   71,   72,
      275,  275,  275,  275,  231,  148,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  258,
      275,  275,  275,  275,  275,   91,  275,  275,  275,  275,
       96,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      102,  103,  104,  275,  275,  275,  275,  275,  275,  275,
      109,  275,  275,  275,  275,  275,  275,  116,  275,  275,

      275,  118,  225,  275,  275,  275,  275,  275,  275,  275,
      275,  160,  123,  124,  125,  275,  275,  275,  206,  266,
      275,  275,  275,  275,  275,  275,  169,  275,  275,  275,
      275,  275,  275,  275,  235,  275,  137,  275,  139,  141,
      142,  276,  256,  275,  275,    4,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,   26,   27,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   44,  275,  186,  275,  275,  275,
      275,  268,  173,   49,  275,  275,  253,   55,  275,  275,
      275,   60,  275,  275,  275,  275,   70,  275,  275,  275,

      275,  143,  275,  275,  275,  275,  275,  275,  275,  226,
      275,   78,  275,  275,  275,   82,   83,  275,  275,  198,
      275,  172,  275,  275,  275,  275,  275,   93,  275,  275,
       95,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  101,  275,  275,  275,  275,  107,  275,  275,
      275,  111,  275,  275,  275,  275,  230,  275,  275,  255,
      275,  275,  275,  275,  275,  275,  241,  275,  275,  275,
      214,  275,  275,  129,  275,  275,  275,  275,  131,  275,
      171,  275,  275,  275,  275,  275,  275,  138,  275,  275,
      275,  275,  275,  275,  275,    9,   10,  275,  275,  275,

      275,  275,  275,  275,  233,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   37,  275,  275,   41,   45,   46,
      275,   48,  275,  275,  275,  275,  275,   57,  275,  229,
       61,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  228,  275,  177,  181,   76,  275,  275,  275,
      275,  236,  275,   86,  275,   87,  275,   88,  144,  275,
       94,  275,  275,  275,  275,  275,  275,  275,  275,  217,
      275,  275,  275,  275,  275,  219,  187,  209,  275,  275,
      112,  113,  240,  275,  275,  275,  275,  178,  275,  275,
      275,  275,  170,  275,  275,  275,  275,  275,  275,  275,

      166,  130,  151,  275,  132,  275,  275,  275,  275,  275,
      249,  207,  275,  275,  275,  213,  275,    8,  189,  161,
       12,  275,  275,  275,   23,  275,   24,  275,  275,  275,
      275,   29,   35,   36,  275,  275,   47,  194,  275,  275,
      275,  275,  167,   63,  275,  275,  275,  275,  188,  246,
      275,  275,  275,  275,  224,  275,  275,  275,   81,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  254,  275,
      275,  153,  275,  275,  275,  152,  275,  239,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  158,  275,  275,  267,

      275,  275,  133,  134,  135,  275,  275,  140,  162,  275,
      275,  275,   21,  275,  156,  275,  275,  275,  275,  275,
      275,   40,  275,  275,  250,   56,  275,   65,  251,  275,
      275,  275,  275,  275,  215,   79,   80,  275,  150,  275,
      275,  275,  220,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  227,  275,  275,  275,  275,  275,
      275,  117,  275,  275,  275,  275,  275,  275,  212,  275,
      275,  275,  275,  275,  247,  275,  275,  275,  136,  275,
      275,  185,   18,  275,  275,  275,  275,   28,  275,  275,
      275,  275,   50,   64,  275,  275,  275,  275,  275,  197,

      275,  275,  275,  275,   97,  275,  275,   99,  100,  275,
      275,  105,  275,  275,  275,  275,  275,  275,  164,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      126,  128,  275,  163,  275,  275,   19,   22,  275,  275,
      275,  275,  275,   38,  275,  196,  275,  275,  252,  275,
      257,  165,  168,  155,  275,  275,  275,  275,  275,  216,
      110,  157,  275,  275,  275,  119,  275,  180,  218,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  195,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  120,  275,  275,  182,

      122,  184,  221,  275,  275,  275,  275,  275,  275,  275,
       31,  244,  275,  275,  275,  275,  275,   98,  275,  275,
      275,  275,  114,  159,  275,  275,  232,  193,  275,   25,
      176,  275,  275,  243,  275,  275,  275,  275,  275,  275,
      275,  208,  275,  275,  275,  275,  275,  199,  275,  275,
      275,  275,  275,  275,  275,  202,  275,  275,  275,  275,
      204,  205,  275,  275,  201,  275,  183,  275,  275,  275,
      192,  275,  275,  275,   30,  275,  147,  203,  275,  275,
      242,  200,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    8,    8,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        8,   47,    8,    8,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   37,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    8,   74,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        5,    1,    1,    1,    6,    6,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,    7,    6,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1
    } ;

static const flex_int16_t yy_base[1193] =
    {   0,
        0,    0,    0,    0, 1477, 1422,    0,    0, 1245, 2393,
       73,   76, 1129, 1135,    0, 2393, 2393, 1098,   66, 1000,
       70,   74,   73,  933,  834, 2393,  116,  165,  217,   72,
       66,  265,   46,   67,  122,   73,   69,  138,  178,  325,
      373,  171,    0,  218,  420,  472,  225,   82,  283,   73,
       90,   82,  773, 2393,    0,  725,  116, 2393,  717,  670,
        0,    0,  201,    0,  217,  235,  153,    0, 2393, 2393,
     2393, 2393,    0,   73,  115,  238,  102,   95,  121,  156,
      161,  277,  292,  167,  278,    0,  263,  191,  194,  517,
      209,  337,  229,  346,  123,  130,  239,  232,  256,  380,

      261,  317,  369,  319,  264,  373,  274,  289,  400,  294,
        0,  290,  418,    0,  324,  326,  311,  477,  395,  444,
      340,  486,  430,  388,  462,  396, 2393,  427,  442,  493,
      490,  404,  430,  465,  522,  473,  527,  488,  528,  494,
      539,  516,  529,  530,  545,  531,  582,  544,  540,  541,
      574,  580,  567,  558,  606,  595,  572,  585,  576,  584,
      617,  617,  631,  632,  635,  639,  639,  635,  636,  640,
      650,  637,  651,  664,  652, 2393,    0, 2393,  626,  694,
      616,  692,  704,  189,  410,    0,  673,    0,  674,    0,
        0,  680,  697,    0,    0,  700,  688,  684,  682,  698,

      707,  707,  699,  704,  701,  713,  697,  714,  705,  714,
      710,  710,  733,  716,  710,  719,  753,  723,  725,  743,
        0,  748,  758,  758,  747,  761,  747,  766,  764,  576,
      770,  769,  769,  758,  760,  760,  761,  764,  768,  783,
      776,    0,  776,  783,  772,  786,  799,  791,  793,  796,
      800,  813,  814,  815,  807,  808,    0,    0,  817,  819,
      808,  824,  827,  813,  830,  828,  837,  850,  814,  842,
        0,  844,  854,  843,    0,  847,  848,  853,  868,  856,
        0,  874,  542,  864,  865,  862,  873,  861,  878,  866,
        0,  861,  883,  882,  888,  878,  897,  897,  882,  916,

      895,  920,  906,  893,    0,  913,  909,  912,  926,  923,
      937,  923,  927,  938,  936,  918,  929,  931,  933,  942,
      953,  941,  948,  965,  963,  960,    0,  954,  965,  961,
      971,  968,  984,  966,    0,  991,  985,  982,  991,  983,
      984,  988,  998, 1003, 1004,  994,  996,  995,  995, 1026,
      999, 1014, 1022, 1017,    0, 1015, 1029,  453,  474,  576,
      143,  493, 1049, 1023, 1034, 1038, 1025, 1034, 1037,    0,
     1050, 1044, 1043, 1050, 1060,    0, 1061,    0,    0,    0,
        0, 1068,    0, 1065,  527, 1070, 1063, 1072, 1069, 1076,
     1059, 1065,    0, 1079,  483, 1080,    0, 1076, 1070, 1072,

     1090,    0, 1087, 1091,    0, 1089, 1091, 1092, 1092, 1093,
     1095, 1115, 1115,    0, 1102,    0, 1105, 1111,    0, 1108,
     1104, 1114, 1118,    0, 1119,    0, 1119, 1120, 1122, 1139,
        0,    0,    0, 1122, 1140,  474, 1132, 1138,    0,  465,
     1131, 1152, 1138, 1141, 1158,    0, 1158, 1167, 1164, 1152,
     1168, 1170, 1165, 1164, 1165, 1183, 1178, 1167, 1185, 1183,
     1190, 1192, 1182, 1181, 1198,    0, 1187, 1192, 1193, 1194,
     1204, 1201, 1208, 1214, 1215, 1228, 1221, 1234, 1221, 1235,
        0,    0,    0, 1225, 1240, 1232, 1228, 1228, 1229, 1236,
        0, 1240, 1250, 1242, 1254, 1254, 1251,    0, 1257, 1246,

     1255,    0,    0, 1251, 1269, 1262, 1275, 1260, 1266, 1281,
     1284,  424,    0,    0, 1272, 1283, 1282, 1284,    0,    0,
     1278, 1283, 1285, 1284, 1285, 1290,    0, 1294, 1301, 1306,
     1303, 1305, 1306, 1300,    0, 1313,    0, 1318, 1318,    0,
        0, 2393,    0, 1317, 1331,    0, 1333, 1321, 1332, 1325,
     1322, 1334, 1326, 1351, 1350, 1337, 1336, 1338, 1340, 1345,
     1345, 1347, 1348,    0,    0,  411, 1364, 1356, 1370, 1361,
     1370,  382, 1364, 1374,    0, 1381,    0, 1368, 1385, 1372,
     1389,    0,  369,    0, 1372, 1392,    0, 1391, 1395, 1386,
     1400,    0, 1388, 1404, 1394, 1409,    0, 1390, 1418, 1407,

     1405,    0, 1406, 1417, 1422, 1425, 1427, 1420, 1418,    0,
     1436,    0, 1426, 1432, 1447,    0,    0, 1424, 1451,    0,
     1447,    0, 1448, 1438, 1441, 1442, 1444,    0, 1464, 1448,
        0, 1459, 1464, 1470, 1457, 1464, 1464, 1478, 1468, 1465,
     1472, 1470,  362, 1473, 1492, 1477, 1484,    0, 1483, 1481,
     1484,    0, 1496, 1488, 1490, 1497,    0, 1495, 1509,    0,
     1498, 1514, 1505, 1512, 1511, 1509, 1514, 1528, 1517, 1524,
        0, 1530, 1529,    0, 1522, 1528, 1546, 1533,    0, 1541,
     1537, 1545, 1560, 1549, 1550, 1567, 1550,    0, 1559, 1555,
     1556, 1573, 1573, 1569, 1570,    0,    0, 1578, 1568, 1572,

     1570, 1589, 1580, 1590,    0, 1584, 1580, 1589, 1591, 1591,
     1599, 1591, 1604, 1598,    0, 1601, 1618,    0,    0,    0,
     1619,    0, 1608, 1607, 1616, 1606, 1617,    0, 1609,    0,
        0, 1621, 1627, 1639, 1634, 1641, 1631, 1640, 1643,  338,
     1631,  325,    0, 1632,    0,    0,    0, 1642, 1653, 1661,
     1651,    0, 1652,    0, 1664,    0, 1662,    0,    0, 1660,
        0, 1669, 1669, 1659, 1671, 1663, 1667, 1675, 1676,    0,
     1662,  323, 1670, 1680, 1689, 1677, 1678,    0, 1684, 1686,
     1699,    0,  320, 1690, 1700, 1702, 1697,  316,  302, 1695,
     1709, 1718,  290, 1719, 1712, 1724, 1708, 1715, 1726, 1720,

        0,    0,    0, 1731,    0, 1737, 1722, 1734, 1726, 1731,
     1740,    0, 1730, 1738, 1734,    0, 1740,    0,    0,    0,
        0, 1751, 1754, 1751,    0, 1744,    0, 1746, 1760, 1752,
     1752,  272,    0,    0, 1773, 1756,    0,    0, 1777, 1768,
     1765, 1776,    0,    0, 1783, 1779, 1787, 1782,    0,    0,
     1788, 1796, 1779, 1782,    0, 1796, 1784, 1793,    0, 1786,
     1790, 1795, 1804, 1806, 1794, 1813, 1806, 1819,    0, 1810,
     1815,    0, 1816, 1831, 1816,  250, 1834,    0, 1822, 1838,
     1844, 1842,  228, 1826, 1848, 1833, 1838, 1854, 1841, 1847,
     1845, 1854, 1850, 1859, 1862, 1862,    0, 1871, 1876,    0,

     1866, 1869,    0,    0,    0, 1872, 1887,    0,    0, 1883,
     1884, 1877,    0, 1876,    0, 1885, 1900, 1892, 1887, 1890,
     1891,    0, 1896, 1906,    0,    0, 1895,    0,    0, 1896,
     1913, 1908, 1916, 1921,    0,    0,    0, 1923,    0, 1927,
     1915, 1917,    0, 1921, 1926, 1931, 1927, 1940, 1934, 1948,
     1932, 1950, 1939, 1940,    0, 1956, 1943, 1955, 1946, 1949,
     1956,    0, 1955, 1972, 1967, 1974, 1973, 1976,    0, 1973,
     1966, 1970, 1968, 1975,    0, 1991, 1977, 1974,    0,  220,
     1985,    0, 1984, 1985, 2001, 1993, 1997,    0, 2004, 1997,
     2006, 1999,    0,    0, 2013, 1997, 2006, 2022, 2020,    0,

     2024, 2007, 2028, 2018,    0, 2034, 2039,    0,    0, 2024,
     2024,    0, 2044, 2032, 2034, 2049, 2044, 2039,    0, 2047,
     2045, 2049, 2058, 2062,  215, 2063, 2059, 2068, 2062, 2070,
        0,    0, 2075,    0, 2079, 2067,    0,    0, 2074, 2073,
     2073, 2078, 2087,    0, 2090,    0, 2080, 2081,    0, 2092,
     2086,    0,    0,    0,  175, 2092, 2090, 2094, 2100,    0,
        0,    0, 2093, 2111, 2116,    0, 2102,    0,    0, 2103,
     2117, 2122, 2111, 2125, 2115, 2118, 2114,  167, 2124, 2140,
     2137, 2138, 2129,    0, 2131, 2136, 2129,  160, 2158, 2143,
     2148, 2155, 2160, 2162, 2154, 2156,    0, 2168, 2151,    0,

        0,    0,    0, 2161, 2171, 2161, 2176, 2170,   61, 2167,
        0,    0, 2163, 2172, 2173, 2179, 2188,    0, 2180, 2195,
     2179, 2186,    0,    0, 2200, 2193,    0,    0, 2201,    0,
        0, 2214, 2197,    0, 2201, 2215, 2207, 2204, 2215, 2208,
     2213,    0, 2227, 2216, 2223, 2223, 2239,    0, 2234, 2225,
     2239, 2232, 2242, 2235, 2230,    0, 2251, 2242, 2246, 2257,
        0,    0, 2249, 2250,    0, 2250,    0, 2253, 2257, 2252,
        0, 2260, 2259, 2263,    0, 2266,    0,    0, 2261, 2270,
        0,    0, 2393, 2335, 2343, 2351, 2358, 2361, 2368, 2376,
       98, 2384

    } ;

static const flex_int16_t yy_def[1193] =
    {   0,
     1183,    1, 1184, 1184, 1185, 1185, 1184, 1184, 1183, 1183,
     1183, 1183, 1183, 1186, 1187, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1183, 1183, 1189, 1183, 1183, 1183, 1186, 1183,
     1187, 1187, 1183, 1190, 1183, 1183, 1183, 1191, 1183, 1183,
     1183, 1183, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1183, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1183, 1189, 1183, 1183, 1183,
     1192, 1183, 1183, 1183, 1183, 1191, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1183, 1183, 1192,
     1192, 1183, 1183, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1183, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188,    0, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183

    } ;

static const flex_int16_t yy_nxt[2468] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   10,   43,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   57,   57,   57,   57,   57,   57,
       63,   63,   65,  107,   66,   66,   65,  108,   66,   66,
       69,   70,   93,  117,   67,  109,   94,   97,   67,   98,

       95,  110,  168,  186,   99,  173,   96,  115, 1132,  100,
      107,  116,  187,   68,  174,  108,  175,   57,   57,   57,
       93,  117,   67,  109,   94,   97,   67,   98,   95,  110,
      168,   99,  193,  173,   96,  115,  100,  192,  116,  187,
       68,   74,  174,  194,  175,  111,  188,   75,  112,   76,
      189,   77,  361,   78,   79,  113,  542,   80,  118,  193,
      114,  227,  119,  184,  184,  192,  120,  185,  185,   74,
      228,  194,  121,  111,  188,   75,  112,   76,  189,   77,
       78,   79,  195,  113,   80,   81,  118,  114,  227,   82,
      119,  142,  196,   83,  120,  143,   84,  228,  122,   85,

      121,  202,  123,  185,  185,  144,  124, 1115,  145,   86,
      195,  207,  125,   81, 1106,   63,   63,   82,  126,  142,
      196,   83, 1089,  143,   84,  180,  122,   85,  208,  202,
      123,  182,  182,  144,  124,  145,   86,   87,  146,  207,
      125,  183,  147,  216,   88,  126,  148,   65,   89,   66,
       66,   90,  149,  180,   91,  230,  208,   92,  164,   67,
      165,  190, 1070,  166,  167,   87,  146, 1035,  220,  183,
      147,  216,   88,  221,  148,  959,   89,  229,  231,   90,
      149,   91,  191,  230,   92,  101,  164,   67,  165,  190,
      166,  167,  236,  102,  205,  220,  103,  953,  243,  104,

      221,  206,  105,  169,  229,  106,  231,  170,  246,  191,
      171,  172,  203,  101,  197,  198,  199,  204,  200,  920,
      236,  102,  205,  251,  103,  201,  243,  104,  206,  105,
      247,  169,  106,  127,  250,  170,  246,  893,  171,  172,
      203,  197,  198,  199,  204,  128,  200,  129,  237,  888,
      241,  251,  255,  201,  238,  257,  242,  247,  217,  130,
      256,  250,  268,  887,  131,  132,  133,  882,  222,  218,
      873,  223,  854,  128,  219,  129,  237,  224,  241,  225,
      255,  238,  257,  242,  226,  852,  217,  130,  256,  239,
      268,  131,  132,  133,  134,  135,  222,  218,  136,  223,

      232,  219,  233,  240,  244,  224,  137,  225,  234,  773,
      138,  226,  139,  140,  141,  263,  724,  239,  245,  235,
      264,  274,  134,  135,  185,  185,  136,  277,  232,  716,
      233,  240,  244,  248,  137,  285,  234,  138,  249,  139,
      140,  141,  150,  263,  151,  245,  235,  152,  264,  274,
      286,  252,  153,  272,  154,  277,  253,  254,  710,  155,
      156,  248,  273,  285,  157,  249,  278,  359,  359,  279,
      150,  668,  151,  280,  265,  152,  266,  267,  286,  252,
      153,  272,  154,  253,  254,  275,  155,  156,  359,  359,
      273,  157,  158,  278,  287,  276,  159,  279,  290,  160,

      161,  280,  265,  258,  266,  267,  162,  363,  363,  163,
      259,  293,  601,  275,  260,  261,  262,  283,  284,  269,
      158,  598,  287,  276,  159,  270,  290,  160,  161,  271,
      567,  258,  281,  295,  162,  282,  163,  209,  259,  293,
      210,  260,  261,  262,  288,  283,  284,  269,  211,  212,
      213,  291,  270,  297,  214,  294,  271,  215,  292,  281,
      295,  289,  282,  296,  302,  209,  298,  299,  210,  300,
      309,  310,  288,  301,  557,  312,  211,  212,  213,  291,
      297,  214,  311,  294,  215,  361,  292,  320,  289,  458,
      321,  296,  302,  298,  299,  322,  313,  300,  309,  310,

      318,  301,  303,  312,  304,  314,  329,  305,  331,  311,
      328,  315,  316,  317,  319,  320,  326,  306,  321,  330,
      307,  308,  322,  406,  313,  361,  323,  327,  318,  324,
      303,   59,  304,  314,  329,  305,  331,  328,  315,  316,
      317,  332,  319,  325,  326,  306,  330,  307,  308,  333,
      334,  337,  335,  340,  323,  327,  336,  324,  344,  338,
      341,  348,  342,  346,  351,  343,  349,  347,  352,  332,
      325,  339,  350,  345,  353,   59,  354,  333,  334,  337,
      335,  340,  355,  336,  356,  357,  344,  338,  341,  348,
      342,  346,  351,  343,  349,  347,  352,  364,  339,  350,

      345,  365,  353,  354,  358,  358,  182,  182,  359,  359,
      355,  366,  356,  357,  362,  362,  183,  367,  363,  363,
      368,  369,  179,  370,  371,  364,  372,  373,  376,  365,
      377,  378,  379,  178,  382,  383,  384,  380,  385,  366,
      374,  386,  387,  391,  183,  367,  375,  395,  368,  369,
      370,  371,  381,  390,  372,  373,  376,  392,  377,  378,
      379,  382,  396,  383,  384,  380,  385,  397,  374,  386,
      387,  391,  388,  375,  389,  395,  398,  393,  399,  381,
      390,  394,  400,  402,  392,  401,  403,  404,  405,  396,
      407,  408,  414,  409,  416,  397,  411,  412,  413,  388,

      410,  389,  415,  417,  398,  393,  399,  418,  419,  394,
      400,  402,  401,  403,  420,  404,  405,  421,  407,  408,
      414,  409,  416,  411,  412,  413,  422,  423,  410,  415,
      424,  417,  425,  426,  427,  418,  419,  428,  429,  430,
      432,  433,  420,  434,  421,  435,  176,  436,  437,  431,
      438,   72,  439,  422,  440,  423,  441,  424,  446,  425,
      426,  442,  427,  443,  447,  428,  429,  430,  432,  433,
      444,  434,  448,  435,  436,  449,  437,  431,  438,  439,
      445,  453,  440,  450,  441,  446,  451,  452,  455,  442,
      456,  443,  447,  454,  457,  459,  460,  462,  444,  461,

      448,  463,  464,  449,  465,  466,  469,  467,  445,  453,
      450,  468,  470,  451,  452,  471,  455,  472,  456,  474,
      454,  475,  457,  459,  460,  462,  461,  478,  463,  482,
      464,  465,  466,  484,  469,  467,  473,  483,  476,  468,
      470,  477,  471,  479,  485,  472,  480,  474,  475,  486,
      481,   71,  487,  488,  489,  478,  497,  482,  493,  490,
      484,  494,  495,  473,  496,  483,  476,  498,  499,  477,
      500,  479,  485,  501,  480,  491,  486,  502,  481,  487,
      503,  488,  489,  497,  492,  504,  493,  490,  505,  494,
      495,  506,  496,  510,  498,  499,  511,  500,  508,  509,

      512,  501,  491,  507,  513,  502,  514,  503,  515,   64,
      516,  517,  504,  518,  519,  520,  505,  521,  522,  506,
      510,  523,  524,  525,  511,  508,  509,  512,  526,  528,
      507,  527,  513,  514,  529,  530,  515,  516,  535,  517,
      536,  518,  519,  520,  539,  521,  522,  531,  532,  523,
      524,  525,  540,  541,  544,  537,  526,  528,  527,  538,
      543,  529,  530,  363,  363,  535,  545,  547,  536,  546,
      533,  548,  539,  534,  549,  531,  532,  550,  552,  540,
      551,  541,  544,  537,  553,  554,  538,  543,  555,  556,
      558,  559,  560,  561,  545,  547,  546,  533,  564,  548,

      562,  566,  549,  565,  568,  550,  552,  551,  569,   62,
      570,  571,  553,  554,  572,  573,  555,  556,  558,  559,
      560,  561,  574,  563,  575,  564,  576,  578,  562,  566,
      565,  577,  568,  579,  580,  581,  569,  570,  571,  582,
       60,  583,  572,  573,  584,  585,   58,  586,  587,  588,
      574,  589,  575,  590,  576,  578,  591,  592,  577,  593,
      579,  580,  596,  581,  597,  594,  600,  582,  583,  599,
      602,  584,  603,  585,  586,  587,  595,  588,  604,  589,
      605,  590,  606,  591,  592,  607,  593,  608,  609,  596,
      610,  611,  597,  594,  600,  612,  599,  602,  613,  614,

      603,  615,  616,  595,  617,  604,  618,  605,  619,  620,
      606,  621,  623,  607,  624,  608,  609,  610,  611,  625,
      626,  622,  627,  612,  628,  629,  613,  614,  615,  616,
      630,  631,  617,  634,  618,  619,  635,  620,  636,  621,
      623,  632,  624,  637, 1183,  633,  625,  626,  622,  640,
      627,  628,  638,  629,  641,  642,  639,  630,  631,  643,
      645,  634,  644,  646,  635,  647,  636,  648,  632,  649,
      650,  637,  633,  651,  652,  653,  654,  640,  655,  656,
      638,  657,  641,  642,  639,  658,  659,  643,  645,  644,
      660,  646,  647,  661,  648,  662,  649,  663,  650,  664,

      665,  651,  652,  653,  654,  666,  655,  656,  667,  657,
      669,  670,  658,  671,  659,  672,  674,  660,  673,  675,
      679,  661,  676,  662,  677,  663,  664,  678,  665,  680,
      681,  682,  683,  666,  684,  685,  667,  669,  686,  670,
      687,  671,  688,  672,  674,  673,  689,  675,  679,  676,
      691,  677,  690,  692,  678,  693,  695,  680,  681,  682,
      683,  694,  684,  685,  696,  686,  697,  698,  687,  699,
      688,  700,  701,  706,  689,  702,  703,  704,  691,  705,
      690,  692,  707,  693,  695,  708,  709,  711,  694,  712,
      713,  696,  714,  697,  715,  698,  699,  717,  718,  700,

      701,  706,  702,  703,  704,  719,  705,  720,  721,  707,
      722,  723,  708,  709,  725,  711,  726,  712,  713,  727,
      714,  728,  715,  729,  730,  717,  718,  731,  732,  735,
       56,  736,  733,  719,  720,  734,  721,  722,  737,  723,
      738,  725,  739,  740,  726,  741,  742,  727,  743,  728,
      729,  744,  730,  745,  731,  746,  732,  735,  736,  733,
      747,  748,  734,  752,  749,  750,  737,  751,  738,  739,
      740,  753,  754,  741,  742,  755,  743,  756,  757,  744,
      758,  745,  746,  759,  760,   56,  761,  762,  747,  748,
      752,  749,  763,  750,  764,  751,  765,  766,  767,  753,

      754,  768,  772,  755,  756,  757,  769,  758,  770,  771,
      759,  774,  760,  761,  775,  762,  776,  777,  778,  781,
      763,  779,  764,  765,  780,  766,  767,  782,  783,  768,
      772,  784,  786,  769,  785,  770,  771,  787,  774,  788,
      789,  793,  775,  776,  790,  777,  778,  781,  779,  791,
      792,  780,  794,  795,  782,  783,  796,  797,  798,  784,
      786,  785,  799, 1183,  800,  787,  788,  801,  789,  793,
      802,  790,  803,  804, 1183,  805,  791,  792,  806,  794,
      807,  795,  808,  796,  809,  797,  798,  810, 1183,  811,
      799,  800,  812,  815,  801,  813,  814,  816,  802,  803,

      817,  804,  805,  818,  819,  821,  806,  820,  807,  822,
      808,  823,  809,  824,  825,  810,  811,  826, 1183,  827,
      812,  815,  813,  814,  828,  816,  829,  831,  817,  830,
      832,  818,  819,  821,  820,  833,  822,  834,  835,  823,
      836,  824,  825,  837,  840,  826,  827,  838,  839,  841,
      842,  845,  828,  843,  829,  831,  830,  832,  844,  846,
      847,  848,  849,  833,  834,  835,  850,  851,  836,  853,
      855,  837,  840,  856,  838,  839,  841,  857,  842,  845,
      843,  858,  859,  860,  861,  844,  862,  846,  847,  848,
      849,  863,  864,  865,  850,  851,  853,  855,  866,  867,

      869,  856,  868,  870,  871,  857,  872,  874,  875,  858,
      859,  860,  861,  876,  862,  877,  878,  879,  880,  863,
      864,  865,  881,  883,  884,  866,  885,  867,  869,  868,
      886,  870,  871,  872,  874,  889,  875,  890,  892,  894,
      895,  876,  877,  878,  896,  879,  880,  897,  898,  899,
      881,  883,  884,  900,  885,  901,  891,  902,  886,  903,
      904,  905,  889,  906,  907,  890,  892,  894,  895,  908,
      909,  911,  896,  910,  897,  912,  898,  899,  913,  914,
      916,  900,  915,  901,  917,  902,  903,  918,  904,  905,
      919,  906,  907,  921, 1183,  922,  908,  923,  909,  911,

      910,  924,  926,  912,  925,  927,  913,  914,  916,  915,
      928,  929,  917,  930,  931,  918,  932,  919,  933,  934,
      935,  921,  922,  936,  937,  923,  938,  939,  940,  924,
      926,  925,  941,  927,  942, 1183,  943,  944,  928,  929,
      945,  930,  931,  948,  932,  933,  934,  946,  935,  949,
      936,  950,  937,  938,  939,  951,  940,  952,  954,  956,
      941,  955,  942,  943,  957,  944,  947,  958,  945,  960,
      961,  948,  962,  963,  965,  946,  964,  949,  966,  950,
      967, 1183,  968,  951,  952,  969,  954,  956,  955,  970,
      971,  972,  957,  973,  974,  958,  960,  975,  961,  962,

      976,  963,  965,  964,  977,  966,  978,  979,  967,  968,
      980,  981,  982,  969,  983,  984,  970,  971,  985,  972,
      986,  973,  974,  987,  991,  975,  988,  992,  976,  989,
      990,  977,  993,  978,  994,  979,  995,  996,  980,  981,
      982,  983,  984,  997,  998,  999,  985, 1000,  986, 1001,
     1003,  987,  991,  988, 1002,  992,  989,  990, 1004, 1005,
      993,  994, 1006,  995, 1007,  996, 1008, 1009, 1010, 1183,
     1011,  997,  998,  999, 1012, 1000, 1013, 1001, 1003, 1014,
     1015, 1002, 1016, 1017, 1020, 1004, 1018, 1005, 1019, 1021,
     1006, 1007, 1022, 1023, 1008, 1009, 1010, 1011, 1024, 1025,

     1026, 1027, 1012, 1013, 1028, 1029, 1014, 1030, 1015, 1016,
     1031, 1017, 1020, 1018, 1032, 1019, 1033, 1021, 1034, 1036,
     1022, 1023, 1037, 1038, 1039, 1041, 1024, 1025, 1026, 1027,
     1040, 1028, 1042, 1029, 1030, 1043, 1044, 1046, 1031, 1045,
     1047, 1048, 1032, 1033, 1049, 1034, 1050, 1036, 1051, 1037,
     1038, 1052, 1039, 1041, 1053, 1183, 1054, 1040, 1055, 1056,
     1042, 1057, 1043, 1058, 1044, 1046, 1045, 1047, 1059, 1048,
     1060, 1061, 1049, 1062, 1050, 1063, 1051, 1064, 1052, 1065,
     1066, 1067, 1053, 1054, 1068, 1069, 1055, 1056, 1057, 1071,
     1058, 1072, 1073, 1074, 1075, 1076, 1059, 1060, 1061, 1077,

     1078, 1062, 1079, 1063, 1064, 1080, 1081, 1065, 1066, 1067,
     1082, 1083, 1068, 1069, 1084, 1085, 1087, 1071, 1086, 1072,
     1073, 1074, 1075, 1076, 1088, 1090, 1093, 1077, 1078, 1091,
     1079, 1092, 1094, 1080, 1081, 1095, 1096, 1097, 1082, 1083,
     1098, 1099, 1084, 1085, 1087, 1086, 1100, 1183, 1101, 1102,
     1104, 1088, 1103, 1090, 1093, 1105, 1091, 1107, 1092, 1094,
     1108, 1109, 1110, 1095, 1096, 1097, 1111, 1098, 1112, 1099,
     1113, 1183, 1114, 1118, 1100, 1101, 1119, 1102, 1104, 1103,
     1116, 1117, 1105, 1120, 1121, 1107, 1122, 1124, 1108, 1109,
     1110, 1123, 1125, 1111, 1126, 1112, 1127, 1128, 1113, 1114,

     1129, 1118, 1130, 1131, 1119, 1133, 1134, 1135, 1116, 1117,
     1136, 1120, 1121, 1137, 1122, 1124, 1138, 1140, 1123, 1139,
     1125, 1126, 1141, 1142, 1127, 1128, 1143, 1129, 1144, 1145,
     1130, 1131, 1133, 1134, 1146, 1135, 1147, 1136, 1148, 1149,
     1150, 1137, 1151, 1152, 1138, 1140, 1139, 1153, 1154, 1141,
     1142, 1155, 1183, 1156, 1143, 1157, 1144, 1145, 1158, 1159,
     1160, 1162, 1146, 1147, 1161, 1148, 1163, 1149, 1150, 1151,
     1164, 1152, 1165, 1166, 1153, 1167, 1154, 1168, 1169, 1155,
     1156, 1170, 1171, 1157, 1172, 1173, 1158, 1159, 1160, 1162,
     1174, 1161, 1175, 1177, 1163, 1176, 1178, 1179, 1164, 1165,

     1166, 1180, 1183, 1167, 1181, 1168, 1169, 1182, 1183, 1170,
     1171, 1183, 1172, 1173, 1183, 1183, 1183, 1174, 1183, 1183,
     1175, 1177, 1176, 1178, 1183, 1179, 1183, 1183, 1183, 1180,
     1183, 1181, 1183, 1183, 1182,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   55,   55,   55,   55,   55,   55,
       55,   59, 1183,   59,   59,   59,   59,   59,   61, 1183,
     1183,   61,   61,   61,   61,   61,   73,   73,  177,  177,
      177, 1183,  177,  177,  177,  177,  181,  181,  181,  181,
     1183,  181,  181,  181,  360,  360,  360,  360,  360,  360,
      360,  360,    9, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183
    } ;

static const flex_int16_t yy_chk[2468] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,   11,   11,   12,   12,   12,
       19,   19,   21,   33,   21,   21,   22,   34,   22,   22,
       23,   23,   30,   37,   21,   34,   30,   31,   22,   31,

       30,   34,   48, 1191,   31,   50,   30,   36, 1109,   31,
       33,   36,   74,   21,   51,   34,   52,   57,   57,   57,
       30,   37,   21,   34,   30,   31,   22,   31,   30,   34,
       48,   31,   78,   50,   30,   36,   31,   77,   36,   74,
       21,   27,   51,   79,   52,   35,   75,   27,   35,   27,
       75,   27,  361,   27,   27,   35,  361,   27,   38,   78,
       35,   95,   38,   67,   67,   77,   38,   67,   67,   27,
       96,   79,   38,   35,   75,   27,   35,   27,   75,   27,
       27,   27,   80,   35,   27,   28,   38,   35,   95,   28,
       38,   42,   81,   28,   38,   42,   28,   96,   39,   28,

       38,   84,   39,  184,  184,   42,   39, 1088,   42,   28,
       80,   88,   39,   28, 1078,   63,   63,   28,   39,   42,
       81,   28, 1055,   42,   28,   63,   39,   28,   89,   84,
       39,   65,   65,   42,   39,   42,   28,   29,   44,   88,
       39,   65,   44,   91,   29,   39,   44,   66,   29,   66,
       66,   29,   44,   63,   29,   98,   89,   29,   47,   66,
       47,   76, 1025,   47,   47,   29,   44,  980,   93,   65,
       44,   91,   29,   93,   44,  883,   29,   97,   99,   29,
       44,   29,   76,   98,   29,   32,   47,   66,   47,   76,
       47,   47,  101,   32,   87,   93,   32,  876,  105,   32,

       93,   87,   32,   49,   97,   32,   99,   49,  107,   76,
       49,   49,   85,   32,   82,   82,   82,   85,   83,  832,
      101,   32,   87,  112,   32,   83,  105,   32,   87,   32,
      108,   49,   32,   40,  110,   49,  107,  793,   49,   49,
       85,   82,   82,   82,   85,   40,   83,   40,  102,  789,
      104,  112,  115,   83,  102,  117,  104,  108,   92,   40,
      116,  110,  121,  788,   40,   40,   40,  783,   94,   92,
      772,   94,  742,   40,   92,   40,  102,   94,  104,   94,
      115,  102,  117,  104,   94,  740,   92,   40,  116,  103,
      121,   40,   40,   40,   41,   41,   94,   92,   41,   94,

      100,   92,  100,  103,  106,   94,   41,   94,  100,  643,
       41,   94,   41,   41,   41,  119,  583,  103,  106,  100,
      119,  124,   41,   41,  185,  185,   41,  126,  100,  572,
      100,  103,  106,  109,   41,  132,  100,   41,  109,   41,
       41,   41,   45,  119,   45,  106,  100,   45,  119,  124,
      133,  113,   45,  123,   45,  126,  113,  113,  566,   45,
       45,  109,  123,  132,   45,  109,  128,  358,  358,  129,
       45,  512,   45,  129,  120,   45,  120,  120,  133,  113,
       45,  123,   45,  113,  113,  125,   45,   45,  359,  359,
      123,   45,   46,  128,  134,  125,   46,  129,  136,   46,

       46,  129,  120,  118,  120,  120,   46,  362,  362,   46,
      118,  138,  440,  125,  118,  118,  118,  131,  131,  122,
       46,  436,  134,  125,   46,  122,  136,   46,   46,  122,
      395,  118,  130,  140,   46,  130,   46,   90,  118,  138,
       90,  118,  118,  118,  135,  131,  131,  122,   90,   90,
       90,  137,  122,  142,   90,  139,  122,   90,  137,  130,
      140,  135,  130,  141,  146,   90,  143,  144,   90,  145,
      148,  149,  135,  145,  385,  150,   90,   90,   90,  137,
      142,   90,  149,  139,   90,  360,  137,  153,  135,  283,
      154,  141,  146,  143,  144,  154,  151,  145,  148,  149,

      152,  145,  147,  150,  147,  151,  158,  147,  160,  149,
      157,  151,  151,  151,  152,  153,  156,  147,  154,  159,
      147,  147,  154,  230,  151,  181,  155,  156,  152,  155,
      147,  179,  147,  151,  158,  147,  160,  157,  151,  151,
      151,  161,  152,  155,  156,  147,  159,  147,  147,  161,
      161,  163,  162,  164,  155,  156,  162,  155,  165,  163,
      164,  167,  164,  166,  169,  164,  168,  166,  170,  161,
      155,  163,  168,  165,  171,   60,  172,  161,  161,  163,
      162,  164,  173,  162,  174,  175,  165,  163,  164,  167,
      164,  166,  169,  164,  168,  166,  170,  187,  163,  168,

      165,  189,  171,  172,  180,  180,  182,  182,  180,  180,
      173,  192,  174,  175,  183,  183,  182,  193,  183,  183,
      196,  197,   59,  198,  199,  187,  200,  201,  202,  189,
      203,  204,  205,   56,  207,  208,  209,  206,  210,  192,
      201,  211,  212,  215,  182,  193,  201,  218,  196,  197,
      198,  199,  206,  214,  200,  201,  202,  216,  203,  204,
      205,  207,  219,  208,  209,  206,  210,  220,  201,  211,
      212,  215,  213,  201,  213,  218,  222,  217,  223,  206,
      214,  217,  224,  226,  216,  225,  227,  228,  229,  219,
      231,  232,  237,  233,  239,  220,  234,  235,  236,  213,

      233,  213,  238,  240,  222,  217,  223,  241,  243,  217,
      224,  226,  225,  227,  244,  228,  229,  245,  231,  232,
      237,  233,  239,  234,  235,  236,  246,  247,  233,  238,
      248,  240,  249,  250,  251,  241,  243,  252,  253,  254,
      255,  256,  244,  259,  245,  260,   53,  261,  262,  254,
      263,   25,  264,  246,  265,  247,  266,  248,  269,  249,
      250,  267,  251,  267,  270,  252,  253,  254,  255,  256,
      268,  259,  272,  260,  261,  273,  262,  254,  263,  264,
      268,  278,  265,  274,  266,  269,  276,  277,  279,  267,
      280,  267,  270,  278,  282,  284,  285,  287,  268,  286,

      272,  288,  289,  273,  290,  292,  294,  293,  268,  278,
      274,  293,  295,  276,  277,  296,  279,  297,  280,  298,
      278,  299,  282,  284,  285,  287,  286,  301,  288,  303,
      289,  290,  292,  304,  294,  293,  297,  303,  300,  293,
      295,  300,  296,  302,  306,  297,  302,  298,  299,  307,
      302,   24,  308,  309,  310,  301,  316,  303,  312,  311,
      304,  313,  314,  297,  315,  303,  300,  317,  318,  300,
      319,  302,  306,  320,  302,  311,  307,  321,  302,  308,
      322,  309,  310,  316,  311,  323,  312,  311,  324,  313,
      314,  325,  315,  328,  317,  318,  329,  319,  326,  326,

      330,  320,  311,  325,  331,  321,  332,  322,  333,   20,
      334,  336,  323,  337,  338,  339,  324,  340,  341,  325,
      328,  342,  343,  344,  329,  326,  326,  330,  345,  347,
      325,  346,  331,  332,  348,  349,  333,  334,  351,  336,
      352,  337,  338,  339,  354,  340,  341,  350,  350,  342,
      343,  344,  356,  357,  365,  353,  345,  347,  346,  353,
      364,  348,  349,  363,  363,  351,  366,  368,  352,  367,
      350,  369,  354,  350,  371,  350,  350,  372,  374,  356,
      373,  357,  365,  353,  375,  377,  353,  364,  382,  384,
      386,  387,  388,  389,  366,  368,  367,  350,  391,  369,

      390,  394,  371,  392,  396,  372,  374,  373,  398,   18,
      399,  400,  375,  377,  401,  403,  382,  384,  386,  387,
      388,  389,  404,  390,  406,  391,  407,  409,  390,  394,
      392,  408,  396,  410,  411,  412,  398,  399,  400,  413,
       14,  415,  401,  403,  417,  418,   13,  420,  421,  422,
      404,  423,  406,  425,  407,  409,  427,  428,  408,  429,
      410,  411,  434,  412,  435,  430,  438,  413,  415,  437,
      441,  417,  442,  418,  420,  421,  430,  422,  443,  423,
      444,  425,  445,  427,  428,  447,  429,  448,  449,  434,
      450,  450,  435,  430,  438,  451,  437,  441,  452,  453,

      442,  454,  455,  430,  456,  443,  457,  444,  458,  459,
      445,  460,  461,  447,  462,  448,  449,  450,  450,  463,
      464,  460,  465,  451,  467,  468,  452,  453,  454,  455,
      469,  470,  456,  472,  457,  458,  473,  459,  474,  460,
      461,  471,  462,  475,    9,  471,  463,  464,  460,  477,
      465,  467,  476,  468,  478,  479,  476,  469,  470,  480,
      485,  472,  484,  486,  473,  487,  474,  488,  471,  489,
      490,  475,  471,  492,  493,  494,  495,  477,  496,  497,
      476,  499,  478,  479,  476,  500,  501,  480,  485,  484,
      504,  486,  487,  505,  488,  506,  489,  507,  490,  508,

      509,  492,  493,  494,  495,  510,  496,  497,  511,  499,
      515,  516,  500,  517,  501,  518,  522,  504,  521,  523,
      528,  505,  524,  506,  525,  507,  508,  526,  509,  529,
      530,  531,  532,  510,  533,  534,  511,  515,  534,  516,
      536,  517,  538,  518,  522,  521,  539,  523,  528,  524,
      544,  525,  539,  545,  526,  547,  549,  529,  530,  531,
      532,  548,  533,  534,  550,  534,  551,  552,  536,  553,
      538,  554,  555,  560,  539,  556,  557,  558,  544,  559,
      539,  545,  561,  547,  549,  562,  563,  567,  548,  568,
      569,  550,  570,  551,  571,  552,  553,  573,  574,  554,

      555,  560,  556,  557,  558,  576,  559,  578,  579,  561,
      580,  581,  562,  563,  585,  567,  586,  568,  569,  588,
      570,  589,  571,  590,  591,  573,  574,  593,  594,  596,
        6,  598,  595,  576,  578,  595,  579,  580,  599,  581,
      600,  585,  601,  603,  586,  604,  605,  588,  606,  589,
      590,  607,  591,  608,  593,  609,  594,  596,  598,  595,
      611,  613,  595,  618,  613,  614,  599,  615,  600,  601,
      603,  619,  621,  604,  605,  623,  606,  624,  625,  607,
      626,  608,  609,  627,  629,    5,  630,  632,  611,  613,
      618,  613,  633,  614,  634,  615,  635,  636,  637,  619,

      621,  638,  642,  623,  624,  625,  639,  626,  640,  641,
      627,  644,  629,  630,  645,  632,  646,  647,  649,  653,
      633,  650,  634,  635,  651,  636,  637,  654,  655,  638,
      642,  656,  659,  639,  658,  640,  641,  659,  644,  661,
      662,  666,  645,  646,  663,  647,  649,  653,  650,  664,
      665,  651,  667,  668,  654,  655,  669,  670,  672,  656,
      659,  658,  673,    0,  675,  659,  661,  676,  662,  666,
      677,  663,  678,  680,    0,  681,  664,  665,  682,  667,
      683,  668,  684,  669,  685,  670,  672,  686,    0,  687,
      673,  675,  689,  692,  676,  690,  691,  693,  677,  678,

      694,  680,  681,  695,  698,  700,  682,  699,  683,  701,
      684,  702,  685,  703,  704,  686,  687,  706,    0,  707,
      689,  692,  690,  691,  708,  693,  709,  711,  694,  710,
      712,  695,  698,  700,  699,  713,  701,  714,  716,  702,
      717,  703,  704,  721,  725,  706,  707,  723,  724,  726,
      727,  733,  708,  729,  709,  711,  710,  712,  732,  734,
      735,  736,  737,  713,  714,  716,  738,  739,  717,  741,
      744,  721,  725,  748,  723,  724,  726,  749,  727,  733,
      729,  750,  751,  753,  755,  732,  757,  734,  735,  736,
      737,  760,  762,  763,  738,  739,  741,  744,  764,  765,

      767,  748,  766,  768,  769,  749,  771,  773,  774,  750,
      751,  753,  755,  775,  757,  776,  777,  779,  780,  760,
      762,  763,  781,  784,  785,  764,  786,  765,  767,  766,
      787,  768,  769,  771,  773,  790,  774,  791,  792,  794,
      795,  775,  776,  777,  796,  779,  780,  797,  798,  799,
      781,  784,  785,  800,  786,  804,  791,  806,  787,  807,
      808,  809,  790,  810,  811,  791,  792,  794,  795,  813,
      814,  817,  796,  815,  797,  822,  798,  799,  823,  824,
      828,  800,  826,  804,  829,  806,  807,  830,  808,  809,
      831,  810,  811,  835,    0,  836,  813,  839,  814,  817,

      815,  840,  842,  822,  841,  845,  823,  824,  828,  826,
      846,  847,  829,  848,  851,  830,  852,  831,  853,  854,
      856,  835,  836,  857,  858,  839,  860,  861,  862,  840,
      842,  841,  863,  845,  864,    0,  865,  866,  846,  847,
      867,  848,  851,  870,  852,  853,  854,  868,  856,  871,
      857,  873,  858,  860,  861,  874,  862,  875,  877,  880,
      863,  879,  864,  865,  881,  866,  868,  882,  867,  884,
      885,  870,  886,  887,  888,  868,  887,  871,  889,  873,
      890,    0,  891,  874,  875,  892,  877,  880,  879,  893,
      893,  894,  881,  895,  896,  882,  884,  898,  885,  886,

      899,  887,  888,  887,  901,  889,  902,  906,  890,  891,
      907,  910,  911,  892,  912,  914,  893,  893,  916,  894,
      917,  895,  896,  918,  921,  898,  919,  923,  899,  920,
      920,  901,  924,  902,  927,  906,  930,  931,  907,  910,
      911,  912,  914,  932,  933,  934,  916,  938,  917,  940,
      942,  918,  921,  919,  941,  923,  920,  920,  944,  945,
      924,  927,  946,  930,  947,  931,  948,  949,  950,    0,
      951,  932,  933,  934,  952,  938,  953,  940,  942,  954,
      956,  941,  957,  958,  961,  944,  959,  945,  960,  963,
      946,  947,  964,  965,  948,  949,  950,  951,  966,  967,

      968,  970,  952,  953,  971,  972,  954,  973,  956,  957,
      974,  958,  961,  959,  976,  960,  977,  963,  978,  981,
      964,  965,  983,  984,  985,  987,  966,  967,  968,  970,
      986,  971,  989,  972,  973,  990,  991,  995,  974,  992,
      996,  997,  976,  977,  998,  978,  999,  981, 1001,  983,
      984, 1002,  985,  987, 1003,    0, 1004,  986, 1006, 1007,
      989, 1010,  990, 1011,  991,  995,  992,  996, 1013,  997,
     1014, 1015,  998, 1016,  999, 1017, 1001, 1018, 1002, 1020,
     1021, 1022, 1003, 1004, 1023, 1024, 1006, 1007, 1010, 1026,
     1011, 1027, 1028, 1029, 1030, 1033, 1013, 1014, 1015, 1035,

     1036, 1016, 1039, 1017, 1018, 1040, 1041, 1020, 1021, 1022,
     1042, 1043, 1023, 1024, 1045, 1047, 1050, 1026, 1048, 1027,
     1028, 1029, 1030, 1033, 1051, 1056, 1059, 1035, 1036, 1057,
     1039, 1058, 1063, 1040, 1041, 1064, 1065, 1067, 1042, 1043,
     1070, 1071, 1045, 1047, 1050, 1048, 1072,    0, 1073, 1074,
     1076, 1051, 1075, 1056, 1059, 1077, 1057, 1079, 1058, 1063,
     1080, 1081, 1082, 1064, 1065, 1067, 1083, 1070, 1085, 1071,
     1086,    0, 1087, 1090, 1072, 1073, 1091, 1074, 1076, 1075,
     1089, 1089, 1077, 1092, 1093, 1079, 1094, 1096, 1080, 1081,
     1082, 1095, 1098, 1083, 1099, 1085, 1104, 1105, 1086, 1087,

     1106, 1090, 1107, 1108, 1091, 1110, 1113, 1114, 1089, 1089,
     1115, 1092, 1093, 1116, 1094, 1096, 1117, 1120, 1095, 1119,
     1098, 1099, 1121, 1122, 1104, 1105, 1125, 1106, 1126, 1129,
     1107, 1108, 1110, 1113, 1132, 1114, 1133, 1115, 1135, 1136,
     1137, 1116, 1138, 1139, 1117, 1120, 1119, 1140, 1141, 1121,
     1122, 1143,    0, 1144, 1125, 1145, 1126, 1129, 1146, 1147,
     1149, 1151, 1132, 1133, 1150, 1135, 1152, 1136, 1137, 1138,
     1153, 1139, 1154, 1155, 1140, 1157, 1141, 1158, 1159, 1143,
     1144, 1160, 1163, 1145, 1164, 1166, 1146, 1147, 1149, 1151,
     1168, 1150, 1169, 1172, 1152, 1170, 1173, 1174, 1153, 1154,

     1155, 1176,    0, 1157, 1179, 1158, 1159, 1180,    0, 1160,
     1163,    0, 1164, 1166,    0,    0,    0, 1168,    0,    0,
     1169, 1172, 1170, 1173,    0, 1174,    0,    0,    0, 1176,
        0, 1179,    0,    0, 1180, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1186,    0, 1186, 1186, 1186, 1186, 1186, 1187,    0,
        0, 1187, 1187, 1187, 1187, 1187, 1188, 1188, 1189, 1189,
     1189,    0, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190,
        0, 1190, 1190, 1190, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser_hana.lex"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser_hana.lex"

#include "node.h"
#include "sqlparser_hana_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

std::string escape_double_quotation_hana(const std::string& src, char c) {
    assert(c == '"' || c == '`' || c == ']');
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == c && src[1+i] == c) {
            ret += c;
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return HANA_##name; }
#define YYSTYPE         HANA_STYPE
#define YYLTYPE         HANA_LTYPE

#line 1643 "sqlparser_hana_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1656 "sqlparser_hana_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 113 "sqlparser_hana.lex"

#line 1943 "sqlparser_hana_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1184 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1183 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 114 "sqlparser_hana.lex"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "sqlparser_hana.lex"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "sqlparser_hana.lex"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "sqlparser_hana.lex"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "sqlparser_hana.lex"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "sqlparser_hana.lex"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 120 "sqlparser_hana.lex"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "sqlparser_hana.lex"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 122 "sqlparser_hana.lex"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 123 "sqlparser_hana.lex"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 124 "sqlparser_hana.lex"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 125 "sqlparser_hana.lex"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "sqlparser_hana.lex"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "sqlparser_hana.lex"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "sqlparser_hana.lex"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "sqlparser_hana.lex"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 130 "sqlparser_hana.lex"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 131 "sqlparser_hana.lex"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 132 "sqlparser_hana.lex"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "sqlparser_hana.lex"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 134 "sqlparser_hana.lex"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 135 "sqlparser_hana.lex"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 136 "sqlparser_hana.lex"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 137 "sqlparser_hana.lex"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 138 "sqlparser_hana.lex"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "sqlparser_hana.lex"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "sqlparser_hana.lex"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 141 "sqlparser_hana.lex"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 142 "sqlparser_hana.lex"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 143 "sqlparser_hana.lex"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 144 "sqlparser_hana.lex"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 145 "sqlparser_hana.lex"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 146 "sqlparser_hana.lex"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 147 "sqlparser_hana.lex"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 148 "sqlparser_hana.lex"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 149 "sqlparser_hana.lex"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 150 "sqlparser_hana.lex"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 151 "sqlparser_hana.lex"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "sqlparser_hana.lex"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 153 "sqlparser_hana.lex"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "sqlparser_hana.lex"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "sqlparser_hana.lex"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "sqlparser_hana.lex"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "sqlparser_hana.lex"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 158 "sqlparser_hana.lex"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 159 "sqlparser_hana.lex"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 160 "sqlparser_hana.lex"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 161 "sqlparser_hana.lex"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 162 "sqlparser_hana.lex"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 163 "sqlparser_hana.lex"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 164 "sqlparser_hana.lex"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 165 "sqlparser_hana.lex"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 166 "sqlparser_hana.lex"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "sqlparser_hana.lex"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "sqlparser_hana.lex"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "sqlparser_hana.lex"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "sqlparser_hana.lex"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 171 "sqlparser_hana.lex"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 172 "sqlparser_hana.lex"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 173 "sqlparser_hana.lex"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 174 "sqlparser_hana.lex"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 175 "sqlparser_hana.lex"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 176 "sqlparser_hana.lex"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 177 "sqlparser_hana.lex"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "sqlparser_hana.lex"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "sqlparser_hana.lex"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "sqlparser_hana.lex"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 181 "sqlparser_hana.lex"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 182 "sqlparser_hana.lex"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "sqlparser_hana.lex"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 184 "sqlparser_hana.lex"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 185 "sqlparser_hana.lex"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 186 "sqlparser_hana.lex"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 187 "sqlparser_hana.lex"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 188 "sqlparser_hana.lex"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 189 "sqlparser_hana.lex"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 190 "sqlparser_hana.lex"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 191 "sqlparser_hana.lex"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 192 "sqlparser_hana.lex"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 193 "sqlparser_hana.lex"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 194 "sqlparser_hana.lex"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 195 "sqlparser_hana.lex"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 196 "sqlparser_hana.lex"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 197 "sqlparser_hana.lex"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 198 "sqlparser_hana.lex"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 199 "sqlparser_hana.lex"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 200 "sqlparser_hana.lex"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 201 "sqlparser_hana.lex"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 202 "sqlparser_hana.lex"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 203 "sqlparser_hana.lex"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 204 "sqlparser_hana.lex"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 205 "sqlparser_hana.lex"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 206 "sqlparser_hana.lex"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 207 "sqlparser_hana.lex"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 208 "sqlparser_hana.lex"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 209 "sqlparser_hana.lex"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 210 "sqlparser_hana.lex"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 211 "sqlparser_hana.lex"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 212 "sqlparser_hana.lex"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 213 "sqlparser_hana.lex"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 214 "sqlparser_hana.lex"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 215 "sqlparser_hana.lex"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 216 "sqlparser_hana.lex"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 217 "sqlparser_hana.lex"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 218 "sqlparser_hana.lex"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 219 "sqlparser_hana.lex"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 220 "sqlparser_hana.lex"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 221 "sqlparser_hana.lex"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 222 "sqlparser_hana.lex"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 223 "sqlparser_hana.lex"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 224 "sqlparser_hana.lex"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 225 "sqlparser_hana.lex"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 226 "sqlparser_hana.lex"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 227 "sqlparser_hana.lex"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 228 "sqlparser_hana.lex"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 229 "sqlparser_hana.lex"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 230 "sqlparser_hana.lex"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 231 "sqlparser_hana.lex"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 232 "sqlparser_hana.lex"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 233 "sqlparser_hana.lex"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 234 "sqlparser_hana.lex"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 235 "sqlparser_hana.lex"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 236 "sqlparser_hana.lex"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 237 "sqlparser_hana.lex"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 238 "sqlparser_hana.lex"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 239 "sqlparser_hana.lex"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 240 "sqlparser_hana.lex"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 241 "sqlparser_hana.lex"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 242 "sqlparser_hana.lex"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 243 "sqlparser_hana.lex"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 244 "sqlparser_hana.lex"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 245 "sqlparser_hana.lex"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 246 "sqlparser_hana.lex"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 247 "sqlparser_hana.lex"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 248 "sqlparser_hana.lex"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 249 "sqlparser_hana.lex"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 250 "sqlparser_hana.lex"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 251 "sqlparser_hana.lex"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 252 "sqlparser_hana.lex"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 253 "sqlparser_hana.lex"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 254 "sqlparser_hana.lex"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 255 "sqlparser_hana.lex"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 256 "sqlparser_hana.lex"
TOKEN(LIMIT)             /* hana */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 257 "sqlparser_hana.lex"
TOKEN(OFFSET)            /* hana */
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 258 "sqlparser_hana.lex"
TOKEN(TOP)               /* hana */
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 259 "sqlparser_hana.lex"
TOKEN(HINT)              /* hana */
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 260 "sqlparser_hana.lex"
TOKEN(RANGE_RESTRICTION) /* hana */
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 261 "sqlparser_hana.lex"
TOKEN(MANY)              /* hana --left outer many to one join */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 262 "sqlparser_hana.lex"
TOKEN(ONE)               /* hana */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 263 "sqlparser_hana.lex"
TOKEN(NVARCHAR)          /* hana */
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 264 "sqlparser_hana.lex"
TOKEN(UPSERT)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 265 "sqlparser_hana.lex"
TOKEN(REPLACE)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 266 "sqlparser_hana.lex"
TOKEN(PRIMARY)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 267 "sqlparser_hana.lex"
TOKEN(KEY)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 268 "sqlparser_hana.lex"
TOKEN(PARAMETERS)       /* hana */
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 269 "sqlparser_hana.lex"
TOKEN(CONTAINS)         /* hana */
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 270 "sqlparser_hana.lex"
TOKEN(SECONDDATE)       /* hana datatype */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 271 "sqlparser_hana.lex"
TOKEN(TINYINT)          /* hana datatype */
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 272 "sqlparser_hana.lex"
TOKEN(SMALLDECIMAL)     /* hana datatype */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 273 "sqlparser_hana.lex"
TOKEN(TEXT)             /* hana datatype */
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 274 "sqlparser_hana.lex"
TOKEN(BINTEXT)          /* hana datatype */
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 275 "sqlparser_hana.lex"
TOKEN(ALPHANUM)         /* hana datatype */
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 276 "sqlparser_hana.lex"
TOKEN(VARBINARY)        /* hana datatype */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 277 "sqlparser_hana.lex"
TOKEN(SHORTTEXT)        /* hana datatype */
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 278 "sqlparser_hana.lex"
TOKEN(ORDINALITY)       /* hana */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 279 "sqlparser_hana.lex"
TOKEN(UNNEST)           /* hana */
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 280 "sqlparser_hana.lex"
TOKEN(HISTORY)          /* hana */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 281 "sqlparser_hana.lex"
TOKEN(OVERRIDING)       /* hana */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 282 "sqlparser_hana.lex"
TOKEN(USER)             /* hana */
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 283 "sqlparser_hana.lex"
TOKEN(SYSTEM)           /* hana */
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 284 "sqlparser_hana.lex"
TOKEN(VALUE)            /* hana */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 285 "sqlparser_hana.lex"
TOKEN(NULLS)            /* hana */
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 286 "sqlparser_hana.lex"
TOKEN(FIRST)            /* hana */
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 287 "sqlparser_hana.lex"
TOKEN(LAST)             /* hana */
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 288 "sqlparser_hana.lex"
TOKEN(CORR)             /* hana */
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 289 "sqlparser_hana.lex"
TOKEN(CORR_SPEARMAN)    /* hana */
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 290 "sqlparser_hana.lex"
TOKEN(MEDIAN)           /* hana */
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 291 "sqlparser_hana.lex"
TOKEN(STDDEV)           /* hana */
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 292 "sqlparser_hana.lex"
TOKEN(VAR)              /* hana */
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 293 "sqlparser_hana.lex"
TOKEN(STRING_AGG)       /* hana */
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 294 "sqlparser_hana.lex"
TOKEN(MEMBER)           /* hana */
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 295 "sqlparser_hana.lex"
TOKEN(SYSTEM_TIME)      /* hana */
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 296 "sqlparser_hana.lex"
TOKEN(APPLICATION_TIME) /* hana */
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 297 "sqlparser_hana.lex"
TOKEN(TABLESAMPLE)      /* hana */
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 298 "sqlparser_hana.lex"
TOKEN(BERNOULLI)        /* hana */
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 299 "sqlparser_hana.lex"
TOKEN(EXACT)            /* hana */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 300 "sqlparser_hana.lex"
TOKEN(RETURN)           /* hana */
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 301 "sqlparser_hana.lex"
TOKEN(LATERAL)          /* hana */
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 302 "sqlparser_hana.lex"
TOKEN(BINNING)          /* hana */
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 303 "sqlparser_hana.lex"
TOKEN(LAG)              /* hana */
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 304 "sqlparser_hana.lex"
TOKEN(LEAD)             /* hana */
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 305 "sqlparser_hana.lex"
TOKEN(RANDOM_PARTITION) /* hana */
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 306 "sqlparser_hana.lex"
TOKEN(WEIGHTED_AVG)     /* hana */
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 307 "sqlparser_hana.lex"
TOKEN(EXTRACT)          /* hana */
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 308 "sqlparser_hana.lex"
TOKEN(FIRST_VALUE)      /* hana */
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 309 "sqlparser_hana.lex"
TOKEN(LAST_VALUE)       /* hana */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 310 "sqlparser_hana.lex"
TOKEN(NTH_VALUE)        /* hana */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 311 "sqlparser_hana.lex"
TOKEN(NTILE)            /* hana */
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 312 "sqlparser_hana.lex"
TOKEN(LOCATE_REGEXPR)   /* hana */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 313 "sqlparser_hana.lex"
TOKEN(OCCURRENCES_REGEXPR)          /* hana */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 314 "sqlparser_hana.lex"
TOKEN(REPLACE_REGEXPR)  /* hana */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 315 "sqlparser_hana.lex"
TOKEN(SUBSTR_REGEXPR)   /* hana */
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 316 "sqlparser_hana.lex"
TOKEN(SUBSTRING_REGEXPR)   /* hana */
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 317 "sqlparser_hana.lex"
TOKEN(PERCENTILE_CONT)  /* hana */
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 318 "sqlparser_hana.lex"
TOKEN(PERCENTILE_DISC)  /* hana */
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 319 "sqlparser_hana.lex"
TOKEN(TRIM)             /* hana */
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 320 "sqlparser_hana.lex"
TOKEN(WITHIN)           /* hana */
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 321 "sqlparser_hana.lex"
TOKEN(SERIES_FILTER)     /* hana *//* grouping sets option */
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 322 "sqlparser_hana.lex"
TOKEN(ROLLUP)            /* hana *//* grouping sets option */
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 323 "sqlparser_hana.lex"
TOKEN(CUBE)              /* hana *//* grouping sets option */
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 324 "sqlparser_hana.lex"
TOKEN(BEST)              /* hana *//* grouping sets option */
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 325 "sqlparser_hana.lex"
TOKEN(SUBTOTAL)          /* hana *//* grouping sets option */
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 326 "sqlparser_hana.lex"
TOKEN(BALANCE)           /* hana *//* grouping sets option */
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 327 "sqlparser_hana.lex"
TOKEN(TOTAL)             /* hana *//* grouping sets option */
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 328 "sqlparser_hana.lex"
TOKEN(MULTIPLE)          /* hana *//* grouping sets option */
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 329 "sqlparser_hana.lex"
TOKEN(RESULTSETS)        /* hana *//* grouping sets option */
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 330 "sqlparser_hana.lex"
TOKEN(PREFIX)            /* hana *//* grouping sets option */
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 331 "sqlparser_hana.lex"
TOKEN(STRUCTURED)        /* hana *//* grouping sets option */
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 332 "sqlparser_hana.lex"
TOKEN(RESULT)            /* hana *//* grouping sets option */
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 333 "sqlparser_hana.lex"
TOKEN(OVERVIEW)          /* hana *//* grouping sets option */
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 334 "sqlparser_hana.lex"
TOKEN(TEXT_FILTER)       /* hana *//* grouping sets option */
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 335 "sqlparser_hana.lex"
TOKEN(FILL)              /* hana *//* grouping sets option */
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 336 "sqlparser_hana.lex"
TOKEN(UP)                /* hana *//* grouping sets option */
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 337 "sqlparser_hana.lex"
TOKEN(MATCHES)           /* hana *//* grouping sets option */
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 338 "sqlparser_hana.lex"
TOKEN(SORT)              /* hana *//* grouping sets option */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 339 "sqlparser_hana.lex"
TOKEN(MINUS)             /* hana */
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 340 "sqlparser_hana.lex"
TOKEN(ROWCOUNT)          /* hana */
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 341 "sqlparser_hana.lex"
TOKEN(LOCKED)            /* hana */
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 342 "sqlparser_hana.lex"
TOKEN(IGNORE)
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 343 "sqlparser_hana.lex"
TOKEN(SHARE)
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 344 "sqlparser_hana.lex"
TOKEN(LOCK)
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 345 "sqlparser_hana.lex"
TOKEN(UTCTIMESTAMP)
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 346 "sqlparser_hana.lex"
TOKEN(COMMIT)
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 347 "sqlparser_hana.lex"
TOKEN(ID)
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 348 "sqlparser_hana.lex"
TOKEN(WAIT)
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 349 "sqlparser_hana.lex"
TOKEN(NOWAIT)
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 350 "sqlparser_hana.lex"
TOKEN(JSON)
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 351 "sqlparser_hana.lex"
TOKEN(XML)
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 352 "sqlparser_hana.lex"
TOKEN(RETURNS)
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 353 "sqlparser_hana.lex"
TOKEN(SERIES)
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 354 "sqlparser_hana.lex"
TOKEN(TABLE)
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 355 "sqlparser_hana.lex"
TOKEN(CUBIC_SPLINE_APPROX)
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 356 "sqlparser_hana.lex"
TOKEN(LINEAR_APPROX)
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 357 "sqlparser_hana.lex"
TOKEN(LIKE_REGEXPR)
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 358 "sqlparser_hana.lex"
TOKEN(FLAG)
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 359 "sqlparser_hana.lex"
TOKEN(LEADING)
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 360 "sqlparser_hana.lex"
TOKEN(TRAILING)
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 361 "sqlparser_hana.lex"
TOKEN(BOTH)
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 362 "sqlparser_hana.lex"
TOKEN(WEIGHT)
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 363 "sqlparser_hana.lex"
TOKEN(FULLTEXT)
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 364 "sqlparser_hana.lex"
TOKEN(LANGUAGE)
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 365 "sqlparser_hana.lex"
TOKEN(LINGUISTIC)
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 366 "sqlparser_hana.lex"
TOKEN(FUZZY)
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 367 "sqlparser_hana.lex"
TOKEN(PORTION)
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 368 "sqlparser_hana.lex"
TOKEN(START)
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 369 "sqlparser_hana.lex"
TOKEN(AFTER)
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 370 "sqlparser_hana.lex"
TOKEN(OCCURRENCE)
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 372 "sqlparser_hana.lex"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return HANA_NULLX;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 377 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return HANA_INTNUM;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 383 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return HANA_INTNUM;
}
	YY_BREAK
case 261:
#line 392 "sqlparser_hana.lex"
case 262:
#line 393 "sqlparser_hana.lex"
case 263:
YY_RULE_SETUP
#line 393 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return HANA_APPROXNUM;
}
	YY_BREAK
case 264:
#line 401 "sqlparser_hana.lex"
case 265:
YY_RULE_SETUP
#line 401 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return HANA_APPROXNUM;
}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 408 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return HANA_BOOL;
}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 415 "sqlparser_hana.lex"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return HANA_UNKNOWN;
}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 420 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return HANA_BOOL;
}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 427 "sqlparser_hana.lex"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 433 "sqlparser_hana.lex"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 439 "sqlparser_hana.lex"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 443 "sqlparser_hana.lex"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 447 "sqlparser_hana.lex"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return HANA_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 456 "sqlparser_hana.lex"
{
  //fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return HANA_ERROR;
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 462 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_hana(std::string(yytext+1, yytext + strlen(yytext) - 1), '"');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return HANA_NAME;
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 472 "sqlparser_hana.lex"
{
    Node::strupr(yytext);
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return HANA_NAME;
}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 483 "sqlparser_hana.lex"
{ /* ignore */ }
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 484 "sqlparser_hana.lex"
{ /* ignore */ }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 486 "sqlparser_hana.lex"
{ return yytext[0];}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 489 "sqlparser_hana.lex"
{ return HANA_CNNOP; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 490 "sqlparser_hana.lex"
{ return HANA_COMP_EQ; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 491 "sqlparser_hana.lex"
{ return HANA_COMP_GE; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 492 "sqlparser_hana.lex"
{ return HANA_COMP_GT; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 493 "sqlparser_hana.lex"
{ return HANA_COMP_LE; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 494 "sqlparser_hana.lex"
{ return HANA_COMP_LT; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 495 "sqlparser_hana.lex"
{ return HANA_COMP_NE; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 496 "sqlparser_hana.lex"
{ return HANA_COMP_NE; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 497 "sqlparser_hana.lex"
{ return HANA_P_POINT; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 499 "sqlparser_hana.lex"

	YY_BREAK
case 289:
YY_RULE_SETUP
#line 501 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    g_QuestMarkId++;
    nd->questmarkid_ = g_QuestMarkId;
    yylval->node = nd;
    return HANA_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 510 "sqlparser_hana.lex"
{ return HANA_END_P; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 512 "sqlparser_hana.lex"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return HANA_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 516 "sqlparser_hana.lex"
ECHO;
	YY_BREAK
#line 3536 "sqlparser_hana_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1184 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1184 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1183);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 516 "sqlparser_hana.lex"

/***************************
 ** Section 3: User code
 ***************************/

// int yyerror(const char *msg) {
//     fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return HANA_ERROR;
//  }

