#line 2 "sqlparser_oracle_flex.cpp"

#line 4 "sqlparser_oracle_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define oracle__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer oracle__create_buffer
#endif

#ifdef yy_delete_buffer
#define oracle__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer oracle__delete_buffer
#endif

#ifdef yy_scan_buffer
#define oracle__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer oracle__scan_buffer
#endif

#ifdef yy_scan_string
#define oracle__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string oracle__scan_string
#endif

#ifdef yy_scan_bytes
#define oracle__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes oracle__scan_bytes
#endif

#ifdef yy_init_buffer
#define oracle__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer oracle__init_buffer
#endif

#ifdef yy_flush_buffer
#define oracle__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer oracle__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define oracle__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state oracle__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define oracle__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer oracle__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define oracle_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state oracle_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define oracle_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state oracle_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define oracle_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack oracle_ensure_buffer_stack
#endif

#ifdef yylex
#define oracle_lex_ALREADY_DEFINED
#else
#define yylex oracle_lex
#endif

#ifdef yyrestart
#define oracle_restart_ALREADY_DEFINED
#else
#define yyrestart oracle_restart
#endif

#ifdef yylex_init
#define oracle_lex_init_ALREADY_DEFINED
#else
#define yylex_init oracle_lex_init
#endif

#ifdef yylex_init_extra
#define oracle_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra oracle_lex_init_extra
#endif

#ifdef yylex_destroy
#define oracle_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy oracle_lex_destroy
#endif

#ifdef yyget_debug
#define oracle_get_debug_ALREADY_DEFINED
#else
#define yyget_debug oracle_get_debug
#endif

#ifdef yyset_debug
#define oracle_set_debug_ALREADY_DEFINED
#else
#define yyset_debug oracle_set_debug
#endif

#ifdef yyget_extra
#define oracle_get_extra_ALREADY_DEFINED
#else
#define yyget_extra oracle_get_extra
#endif

#ifdef yyset_extra
#define oracle_set_extra_ALREADY_DEFINED
#else
#define yyset_extra oracle_set_extra
#endif

#ifdef yyget_in
#define oracle_get_in_ALREADY_DEFINED
#else
#define yyget_in oracle_get_in
#endif

#ifdef yyset_in
#define oracle_set_in_ALREADY_DEFINED
#else
#define yyset_in oracle_set_in
#endif

#ifdef yyget_out
#define oracle_get_out_ALREADY_DEFINED
#else
#define yyget_out oracle_get_out
#endif

#ifdef yyset_out
#define oracle_set_out_ALREADY_DEFINED
#else
#define yyset_out oracle_set_out
#endif

#ifdef yyget_leng
#define oracle_get_leng_ALREADY_DEFINED
#else
#define yyget_leng oracle_get_leng
#endif

#ifdef yyget_text
#define oracle_get_text_ALREADY_DEFINED
#else
#define yyget_text oracle_get_text
#endif

#ifdef yyget_lineno
#define oracle_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno oracle_get_lineno
#endif

#ifdef yyset_lineno
#define oracle_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno oracle_set_lineno
#endif

#ifdef yyget_column
#define oracle_get_column_ALREADY_DEFINED
#else
#define yyget_column oracle_get_column
#endif

#ifdef yyset_column
#define oracle_set_column_ALREADY_DEFINED
#else
#define yyset_column oracle_set_column
#endif

#ifdef yywrap
#define oracle_wrap_ALREADY_DEFINED
#else
#define yywrap oracle_wrap
#endif

#ifdef yyget_lval
#define oracle_get_lval_ALREADY_DEFINED
#else
#define yyget_lval oracle_get_lval
#endif

#ifdef yyset_lval
#define oracle_set_lval_ALREADY_DEFINED
#else
#define yyset_lval oracle_set_lval
#endif

#ifdef yyget_lloc
#define oracle_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc oracle_get_lloc
#endif

#ifdef yyset_lloc
#define oracle_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc oracle_set_lloc
#endif

#ifdef yyalloc
#define oracle_alloc_ALREADY_DEFINED
#else
#define yyalloc oracle_alloc
#endif

#ifdef yyrealloc
#define oracle_realloc_ALREADY_DEFINED
#else
#define yyrealloc oracle_realloc
#endif

#ifdef yyfree
#define oracle_free_ALREADY_DEFINED
#else
#define yyfree oracle_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define oracle_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 230
#define YY_END_OF_BUFFER 231
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[838] =
    {   0,
      227,  227,    0,    0,  206,  206,    0,    0,  210,  210,
      231,  229,  216,  216,  217,  229,  215,  217,  201,  217,
      217,  217,  190,  190,  229,  223,  219,  221,  228,  213,
      213,  213,  213,  213,  213,   54,  213,  213,  213,   69,
      213,   73,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  208,  217,  217,  230,  206,
      207,  210,  211,  216,  225,    0,    0,  215,  215,  197,
        0,    0,  196,  190,  191,    0,    0,  214,  222,  224,
      220,  213,  213,  213,  213,  213,    5,  213,  213,  213,
      213,  213,  213,   13,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,   59,
       67,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      202,  213,  213,  213,   84,  213,  213,  213,  213,   90,
       91,   93,  213,  213,  213,  213,  213,  213,  213,  203,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  128,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  226,  218,
      206,  205,  210,  209,  212,    0,    0,    0,    0,    0,
      196,    0,  190,    0,  192,  189,  189,    1,  213,    2,

        3,  213,  213,    6,    7,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,   33,   34,  213,
      213,  213,  213,  213,  213,  213,  213,   43,  213,  213,
      213,  213,  213,  213,  213,  213,  213,   51,  213,  213,
      213,  213,  213,  213,  213,  213,   62,  213,  213,  213,
      213,  213,  213,   74,   75,   77,  213,  213,  159,  213,
      213,  213,  213,  213,   85,  213,  204,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  107,  213,  213,  213,  109,

      213,  213,  213,  213,  213,  213,  213,  116,  213,  213,
      213,  213,  213,  213,  213,  122,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,    0,  195,  215,  193,    0,  194,
      191,  192,  189,  213,  213,  213,  213,  213,  213,  213,
       11,  213,  213,  213,   16,   14,   15,   17,   20,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,   32,  213,  213,  213,  213,  213,  213,   39,  213,
      213,   42,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,   52,   53,  213,  213,   58,  213,  213,

      213,  213,   66,   68,  213,  152,   71,   72,  213,  213,
      213,  213,  213,  213,  213,  213,  155,  213,  213,  188,
      213,  213,  213,  213,   92,  213,  213,  213,   97,  213,
      213,  213,  213,  213,  213,  103,  104,  105,  213,  213,
      213,  213,  110,  213,  213,  213,  213,  213,  174,  213,
      213,  117,  213,  213,  147,  213,  119,  213,  213,  213,
      124,  125,  126,  198,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  150,  138,  213,  140,  142,
      143,  177,  162,    4,  179,  213,  213,  213,  173,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,   26,

       27,  213,  213,  163,  213,  213,  213,  213,  213,  165,
      213,  213,   44,  213,  213,  213,  213,  213,  200,  144,
      145,   49,  213,   55,  213,  213,   60,  213,  213,  213,
       70,  213,  157,  213,   78,  213,  213,  213,   82,   83,
      213,  213,  213,  151,  213,  213,  213,  213,   94,  213,
       96,  213,  213,  182,  213,  213,  175,  102,  213,  213,
      213,  108,  213,  213,  112,  213,  213,  213,  213,  213,
      213,  213,  167,  213,  213,  213,  213,  213,  130,  213,
      213,  213,  213,  132,  213,  213,  213,  213,  213,  139,
      213,  213,    9,   10,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,   37,
      213,  213,   41,   45,   46,  213,   48,  213,  213,  213,
       57,  213,   61,  213,  213,  213,  148,   76,  213,  213,
      213,  213,  149,   86,  213,   88,   89,  154,   95,  213,
      213,  213,  213,  213,  213,  213,  213,  172,  164,  113,
      114,  213,  171,  213,  213,  176,  213,  213,  213,  213,
      158,  213,  213,  131,  133,  213,  213,  213,  213,  213,
        8,   12,  166,  213,  213,  213,   23,  168,  213,   24,
      213,  213,   29,   35,  180,   36,  213,  213,   47,  183,
      213,  213,  213,   63,  213,  213,  213,  213,   81,  169,

       87,  213,  156,  213,  213,  213,  213,  213,  213,  178,
      213,  213,  213,  213,  213,  213,  213,  199,  181,  134,
      135,  136,  213,  141,  213,   21,  213,  213,  213,  213,
      213,  213,   40,  213,   56,  160,  213,   65,   79,   80,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  153,
      118,  213,  213,  213,  213,  213,  213,  137,   18,  213,
      213,  213,   28,  213,  213,  213,   50,   64,   98,  213,
      100,  101,  106,  213,  146,  213,  213,  213,  213,  213,
      127,  213,  129,   19,   22,  170,  213,  213,  213,   38,
      213,  213,  111,  213,  120,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  161,  213,  121,  123,  213,
      213,  213,  213,  213,  213,   31,   99,  115,  213,  213,
      213,  213,   25,  213,  187,  184,  213,  213,  213,  213,
      213,  213,  185,  186,  213,   30,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,    9,   10,    9,
        9,   11,   12,    9,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    9,   19,
       20,   21,   22,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,    9,   80,    9,    9,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    4,    1,    5,
        1,    1,    1,    1,    1,    6,    6,    1,    1,    1,
        1,    1,    6,    6,    6,    6,    6,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    1,    8,
        9,    1,    7,    6,    6,    6,    6,    6,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1
    } ;

static const flex_int16_t yy_base[851] =
    {   0,
        0,    0,    0,    0,  925,  696,    0,    0,  597,  595,
      643, 1781,   79,   82,  606,  615,    0, 1781, 1781,  606,
       71,  585,   75,   79,    0,   77, 1781,  571, 1781,   74,
       82,  138,  128,  128,  194,   54,  119,   63,   63,    0,
      140,  187,  259,  310,  192,  572,  243,  363,  196,  204,
       94,  258,    0,   96,   89, 1781,  530,  462, 1781,    0,
      530,    0,  360,  275, 1781,  403,  391,    0,    0,  283,
      109,  111,  287,  344,  163,  278,  167,    0, 1781, 1781,
     1781,    0,  124,  144,  138,  164,  188,  191,  264,  256,
      192,  250,  281,    0,  291,  286,  289,  392,  291,  296,

      317,  301,  414,  303,  304,  308,  325,  339,  391,  334,
      334,  349,  355,  400,  375,  379,  377,  386,  395,  426,
        0,  420,  434,  428,  425,  435,  426,  440,  452,  443,
     1781,  448,  462,  434,  472,  345,  460,  468,  459,  474,
      470,  484,  482,  471,  489,  478,  480,  478,  503, 1781,
      488,  529,  500,  491,  502,  501,  539,  516,  522,  525,
      536,  528,  549,  539,  535,  551,  557,    0,  536,  589,
      560,  567,  574,  568,  573,  559,  593,  582, 1781, 1781,
        0, 1781,    0, 1781,  324,  621,  228,  376,  393,  624,
      638,  644,  658,  305,  651,  654,    0,    0,  601,    0,

        0,  608,  639,    0,    0,  632,  624,  645,  655,  663,
      655,  667,  657,  672,  652,  674,  667,  675,  669,  695,
      664,  669,  671,  697,  685,  692,  700,    0,  707,  705,
      713,  701,  702,  721,  705,  724,  722,  254,  727,  726,
      710,  712,  713,  736,  722,  741,  731,    0,  731,  733,
      731,  745,  746,  756,  761,  762,  763,  757,  770,  759,
      760,  776,  771,    0,  763,    0,  766,  767,    0,  779,
      788,  775,  771,  767,    0,  792, 1781,  782,  796,  798,
      799,  786,  781,  802,  809,  811,  808,  807,  825,  814,
      827,  818,  832,  836,  820,    0,  837,  823,  838,  831,

      833,  835,  834,  838,  850,  850,  837,  844,  847,  854,
      851,  856,  864,  858,  874,    0,  868,  875,  871,  886,
      887,  878,  886,  881,  893,  903,  891,  885,  913,  888,
      896,  903,  894,  910,  608,  619, 1781, 1781,  923,  933,
      935,  954,    0,  907,  906,  915,  936,  946,  938,  935,
        0,  943,  950,  953,    0,    0,    0,  957,    0,  954,
      230,  959,  956,  962,  959,  960,  946,  948,  222,  963,
      965,    0,  959,  972,  953,  955,  971,  969,    0,  969,
      967,    0,  964,  971,  977,  979,  982, 1011, 1008, 1006,
      995,  996, 1002,    0,    0, 1003, 1006,    0, 1007, 1004,

     1005, 1018,    0,    0, 1021,    0,    0,    0, 1022, 1009,
     1022, 1023, 1019, 1017, 1019, 1036,    0, 1036, 1031, 1053,
     1024, 1046, 1035, 1059,    0, 1056, 1057, 1058,    0, 1068,
     1073, 1059, 1076, 1064, 1078,    0,    0,    0, 1066, 1063,
     1070, 1069,    0, 1076, 1079, 1087, 1091, 1082,    0, 1094,
     1089,    0, 1095, 1091,    0, 1089,    0, 1082, 1099, 1106,
        0,    0, 1098,    0, 1105, 1120, 1115, 1122, 1116, 1119,
     1133, 1136, 1135, 1135, 1130,    0,    0, 1140, 1132,    0,
        0,    0,    0,    0,    0, 1145, 1131, 1127,    0, 1152,
     1134, 1153, 1139, 1138, 1140, 1158, 1153, 1145, 1145,    0,

        0, 1162, 1159,    0, 1178, 1168, 1176, 1191,  219,    0,
     1184, 1194,    0, 1195, 1181, 1198, 1184, 1202,    0,    0,
        0,    0, 1183, 1198, 1201, 1200,    0, 1191, 1207, 1194,
        0, 1210,    0, 1210,    0, 1199, 1206, 1220,    0,    0,
     1210, 1203, 1218,    0, 1216, 1206, 1209, 1215,    0, 1222,
        0, 1228, 1236,    0, 1254, 1241,    0,    0, 1242, 1246,
     1249,    0, 1243, 1260,    0, 1259, 1264, 1249, 1255, 1252,
     1259, 1265,    0, 1253, 1263, 1257, 1263, 1266,    0, 1277,
     1260, 1269, 1280,    0, 1267, 1286, 1274, 1275, 1296,    0,
     1282, 1296,    0,    0, 1298, 1312, 1302, 1320, 1310, 1320,

     1306, 1313, 1309, 1314, 1322, 1312, 1321, 1330, 1316,    0,
     1319, 1335,    0,    0,    0, 1334,    0, 1320, 1333, 1330,
        0, 1325,    0, 1328, 1342, 1347,    0,    0, 1344, 1349,
     1340, 1354,    0,    0, 1362,    0,    0,    0,    0, 1363,
     1354, 1373, 1375, 1376,  200, 1377, 1374,    0,    0,    0,
        0, 1374,    0, 1382, 1377,  194,  185, 1391, 1379, 1390,
        0, 1381, 1377,    0,    0, 1380, 1392, 1384, 1388, 1382,
        0,    0,    0, 1399, 1401, 1398,    0,    0, 1403,    0,
     1394, 1391,  161,    0,    0,    0, 1410, 1392,    0,    0,
     1400, 1414, 1422,    0, 1431, 1424, 1424, 1434,    0,    0,

        0, 1432,  158, 1434, 1434, 1428, 1439, 1439, 1452,  135,
     1436, 1436, 1441, 1438, 1448, 1457, 1458,    0,    0,    0,
        0,    0, 1448,    0, 1448,    0, 1448, 1451, 1456, 1451,
     1452, 1460,    0, 1469,    0,    0, 1463,    0,    0,    0,
     1475, 1478, 1491, 1492, 1503, 1500, 1503, 1506, 1491,    0,
        0, 1498, 1514, 1497, 1501,   58, 1514,    0, 1500, 1502,
     1503, 1519,    0, 1515, 1506, 1515,    0,    0,    0, 1527,
        0,    0,    0, 1519,    0, 1513, 1513, 1517, 1521, 1530,
        0, 1559,    0,    0,    0,    0, 1529, 1532, 1546,    0,
     1544, 1563,    0, 1565,    0, 1555, 1555, 1572, 1560, 1569,

     1574, 1566, 1576, 1565, 1573,    0, 1567,    0,    0, 1584,
     1566, 1574, 1583, 1585, 1574,    0,    0,    0, 1576, 1577,
     1575, 1588,    0, 1580,    0,    0, 1587, 1598, 1619, 1617,
     1615, 1617,    0,    0, 1616,    0, 1781, 1685, 1694, 1703,
     1712, 1721, 1730, 1734, 1738, 1745, 1754, 1762,   84, 1771
    } ;

static const flex_int16_t yy_def[851] =
    {   0,
      837,    1,  838,  838,  839,  839,  838,  838,  840,  840,
      837,  837,  837,  837,  837,  841,  842,  837,  837,  837,
      837,  837,  843,  843,  844,  837,  837,  837,  837,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  837,  837,  837,  837,  846,
      837,  847,  837,  837,  837,  841,  837,  842,  842,  837,
      848,  837,  837,  843,  837,  837,  849,  844,  837,  837,
      837,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      837,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  837,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  837,  837,
      846,  837,  847,  837,  837,  837,  848,  850,  848,  837,
      837,  837,  843,  837,  837,  849,  849,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  837,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  837,  837,  837,  837,  837,  837,
      837,  837,  849,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,    0,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837
    } ;

static const flex_int16_t yy_nxt[1862] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   18,   19,
       18,   18,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   12,
       12,   57,   53,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   58,
       64,   64,   64,   64,   64,   64,   70,   70,   73,  197,
       74,   74,   73,  117,   74,   74,   79,   80,  120,  122,

       75,   76,   75,  121,   75,   76,   75,   83,   89,   84,
      782,   85,   90,   86,   87,   91,  173,   88,   92,  188,
       77,   93,  177,  189,  117,  178,  190,  190,   94,  120,
      122,   75,   76,   75,  121,   75,   76,   75,   83,   89,
       84,  118,   85,   90,   86,   87,   91,  173,   88,   92,
      102,   77,   93,  177,  103,  119,  178,  198,  104,   94,
       95,  106,  123,  107,  105,  199,  124,   96,  108,  200,
      125,   97,  118,  109,   98,  202,  126,   99,  190,  190,
      100,  102,  196,  196,  101,  103,  119,  749,  198,  104,
      201,   95,  106,  123,  107,  105,  199,  124,   96,  108,

      200,  125,   97,  203,  109,   98,  202,  126,   99,  127,
      742,  100,  204,  731,  146,  101,  110,  128,  147,  205,
      111,  201,  148,  129,  112,  166,  167,  113,  210,  130,
      114,  149,  168,  115,  203,  169,  116,  714,  188,  170,
      127,  171,  189,  204,  172,  146,  713,  110,  128,  147,
      205,  111,  707,  148,  129,  112,  166,  167,  113,  210,
      130,  114,  149,  168,  115,  151,  169,  116,  131,  152,
      170,  611,  171,  153,  502,  172,   64,   64,   64,  154,
      174,  132,  494,  133,  208,  134,  211,  175,  176,  194,
      194,  209,  206,  195,  195,  135,  151,  136,   70,   70,

      152,  137,  191,  191,  153,  207,  383,  212,  215,  186,
      154,  174,  132,  192,  133,  208,  134,  211,  175,  176,
      342,  342,  209,  206,  213,  216,  135,  223,  136,   66,
      224,  214,  137,  138,  139,  225,  207,  140,  212,  215,
      186,  226,  227,  235,  192,  141,  236,  228,  237,  142,
      238,  143,  144,  145,  277,  213,  216,   73,  223,  193,
      193,  224,  214,  239,  138,  139,  225,  243,  140,   75,
       76,   75,  226,  227,  235,  244,  141,  236,  228,  237,
      142,  238,  143,  144,  145,  155,  188,  156,  245,  157,
      337,  246,  158,  159,  239,  160,   66,  161,  243,  162,

       75,   76,   75,  188,  163,  164,  244,  189,  185,  165,
      184,  249,  250,  251,  217,  240,  155,  218,  156,  245,
      157,  241,  246,  158,  159,  219,  160,  220,  161,  252,
      162,  221,  242,  247,  222,  163,  164,  253,  229,  248,
      165,  230,  249,  250,  251,  217,  240,  231,  218,  232,
      258,  233,  241,  254,  234,  261,  219,  262,  220,  263,
      252,  255,  221,  242,  247,  222,  256,  257,  253,  229,
      248,  264,  230,  259,  260,  265,  268,  266,  231,  273,
      232,  258,  233,  269,  254,  234,  261,  267,  262,  270,
      263,  271,  255,  278,  279,  272,  274,  256,  257,  280,

      281,  282,  264,  283,  259,  260,  265,  268,  266,  284,
      273,  285,  286,  275,  269,  287,  276,  288,  267,  289,
      270,  290,  271,  293,  278,  279,  272,  274,  299,  291,
      280,  281,  282,  292,  283,  300,  301,  302,  309,  182,
      284,  180,  285,  286,  275,  310,  287,  276,  288,  179,
      289,  294,  290,  295,  293,  311,  296,  297,  312,  299,
      291,  303,  313,  304,  292,  305,  300,  301,  302,  309,
      298,  314,  306,  316,  315,  317,  310,  318,  321,  307,
      308,  150,  294,  319,  295,  326,  311,  296,  297,  312,
       81,  320,  303,  313,  304,   71,  305,  327,  330,  331,

      332,  298,  314,  306,  316,  315,  317,  328,  318,  321,
      307,  308,  322,  329,  319,  333,  326,  334,   69,  323,
       67,  324,  320,  336,  336,   65,  325,  344,  327,  330,
      331,  332,  335,  335,  336,  336,  336,  336,  328,  190,
      190,  345,  837,  322,  329,   63,  333,   63,  334,  338,
      323,  338,  324,  191,  191,  339,  339,  325,  344,  340,
      340,  346,  347,  338,  192,  338,  195,  195,  348,  196,
      196,   73,  345,  193,  193,  349,  338,  350,  338,  343,
      338,  343,  338,  341,   76,  341,  351,  352,  353,  354,
      355,  358,  346,  347,  338,  192,  338,  359,  356,  348,

      360,  361,  362,  366,  367,   61,  349,  338,  350,  338,
      343,  368,  343,  357,  341,   76,  341,  351,  352,  353,
      354,  355,  358,  369,  370,  371,  372,  375,  359,  356,
      363,  360,  361,  362,  366,  367,  364,  373,  365,  376,
      374,  377,  368,  378,  357,  379,  380,  381,  382,  384,
      387,  388,  385,  389,  369,  370,  371,  372,  375,  386,
      390,  363,  391,  392,  393,  394,  395,  364,  373,  365,
      376,  374,  377,  396,  378,  397,  379,  380,  381,  382,
      384,  387,  388,  385,  389,  398,  399,  400,  401,  402,
      386,  390,  404,  391,  392,  393,  394,  395,  405,  403,

      406,  407,  408,  409,  396,  410,  397,  411,  412,  413,
      415,  416,  417,  418,  419,  420,  398,  399,  400,  401,
      402,  414,  421,  404,  422,  423,  424,  425,  426,  405,
      403,  406,  407,  408,  409,  427,  410,  428,  411,  412,
      413,  415,  416,  417,  418,  419,  420,  429,  430,  431,
      432,  433,  414,  421,  434,  422,  423,  424,  425,  426,
      435,  437,  439,  440,  436,  441,  427,  442,  428,  438,
      445,  443,  446,  447,  448,  449,  450,  451,  429,  430,
      431,  432,  433,  444,  452,  434,  453,  454,  455,  456,
      457,  435,  437,  439,  440,  436,  441,  458,  442,  459,

      438,  445,  443,  446,  447,  448,  449,  450,  451,  460,
      461,  462,  463,  464,  465,  452,  468,  453,  454,  455,
      456,  457,  466,  469,  467,  470,  471,  472,  458,  476,
      459,  477,  479,  480,   61,  478,  481,  473,  340,  340,
      460,  461,  462,  463,  464,  465,  482,  468,  340,  340,
      190,  190,  483,  466,  469,  467,  470,  471,  472,  474,
      476,  484,  477,  479,  480,  475,  478,  481,  473,  342,
      342,  485,  486,  487,  488,  489,  490,  482,  491,  492,
      493,  495,  496,  483,  497,  498,  499,  500,  501,  503,
      474,  504,  484,  505,  506,  507,  508,  509,  510,  511,

      512,  513,  485,  486,  487,  488,  489,  490,  514,  491,
      492,  493,  495,  496,  515,  497,  498,  499,  500,  501,
      503,  516,  504,  517,  505,  506,  507,  508,  509,  510,
      511,  512,  513,  518,  519,  520,  521,  522,  523,  514,
      524,  525,  526,  527,  528,  515,  529,  531,  532,  533,
      534,  535,  516,  536,  517,  537,  538,  530,  539,  540,
      541,  542,  837,  545,  518,  519,  520,  521,  522,  523,
      546,  524,  525,  526,  527,  528,  547,  529,  531,  532,
      533,  534,  535,  543,  536,  548,  537,  538,  530,  539,
      540,  541,  542,  544,  545,  549,  550,  551,  552,  553,

      554,  546,  555,  557,  558,  559,  556,  547,  560,  561,
      562,  563,  564,  565,  543,  566,  548,  567,  568,  569,
      570,  571,  572,  573,  544,  574,  549,  550,  551,  552,
      553,  554,  575,  555,  557,  558,  559,  556,  576,  560,
      561,  562,  563,  564,  565,  577,  566,  578,  567,  568,
      569,  570,  571,  572,  573,  579,  574,  580,  581,  582,
      583,  584,  585,  575,  586,  587,  590,  588,  591,  576,
      589,  592,  593,  594,  595,  596,  577,  597,  578,  598,
      599,  600,  601,  602,  603,  604,  579,  605,  580,  581,
      582,  583,  584,  585,  606,  586,  587,  590,  588,  591,

      607,  589,  592,  593,  594,  595,  596,  608,  597,  609,
      598,  599,  600,  601,  602,  603,  604,  610,  605,  612,
      613,  614,  615,  616,  617,  606,  618,  619,  620,  621,
      622,  607,  623,  624,  625,  627,  628,  626,  608,  629,
      609,  630,  631,  632,  633,  634,  635,  636,  610,  637,
      612,  613,  614,  615,  616,  617,  638,  618,  619,  620,
      621,  622,  639,  623,  624,  625,  627,  628,  626,  640,
      629,  641,  630,  631,  632,  633,  634,  635,  636,  642,
      637,  643,  644,  645,  646,  647,  648,  638,  649,  650,
      651,  652,  653,  639,  654,  655,  656,  657,  658,  659,

      640,  660,  641,  661,  662,  663,  664,  665,  666,  667,
      642,  668,  643,  644,  645,  646,  647,  648,  669,  649,
      650,  651,  652,  653,  670,  654,  655,  656,  657,  658,
      659,  671,  660,  672,  661,  662,  663,  664,  665,  666,
      667,  673,  668,  674,  675,  676,  677,  678,  679,  669,
      680,  681,  682,  683,  684,  670,  685,  686,  687,  688,
      689,  690,  671,  691,  672,  692,  693,  694,  695,  696,
      697,  698,  673,  699,  674,  675,  676,  677,  678,  679,
      700,  680,  681,  682,  683,  684,  701,  685,  686,  687,
      688,  689,  690,  702,  691,  703,  692,  693,  694,  695,

      696,  697,  698,  704,  699,  705,  706,  708,  709,  710,
      711,  700,  712,  715,  716,  717,  718,  701,  719,  720,
      721,  722,  723,  724,  702,  725,  703,  726,  727,  728,
      729,  730,  732,  733,  704,  734,  705,  706,  708,  709,
      710,  711,  735,  712,  715,  716,  717,  718,  736,  719,
      720,  721,  722,  723,  724,  737,  725,  738,  726,  727,
      728,  729,  730,  732,  733,  739,  734,  740,  741,  743,
      744,  745,  746,  735,  747,  748,  750,  751,  752,  736,
      754,  753,  755,  756,  757,  758,  737,  759,  738,  760,
      761,  762,  763,  764,  765,  766,  739,  767,  740,  741,

      743,  744,  745,  746,  768,  747,  748,  750,  751,  752,
      769,  754,  753,  755,  756,  757,  758,  770,  759,  771,
      760,  761,  762,  763,  764,  765,  766,  772,  767,  773,
      774,  775,  776,  777,  778,  768,  779,  780,  781,  783,
      784,  769,  785,  786,  787,  788,  789,  790,  770,  791,
      771,  792,  793,  794,  795,  796,  797,  837,  772,  802,
      773,  774,  775,  776,  777,  778,  803,  779,  780,  781,
      783,  784,  804,  785,  786,  787,  788,  789,  790,  805,
      791,  798,  792,  793,  794,  795,  796,  797,  799,  806,
      802,  807,  808,  800,  809,  810,  811,  803,  801,  812,

      813,  814,  815,  804,  816,  817,  818,  819,  820,  821,
      805,  822,  798,  823,  824,  825,  826,  827,  828,  799,
      806,  829,  807,  808,  800,  809,  810,  811,  830,  801,
      812,  813,  814,  815,  831,  816,  817,  818,  819,  820,
      821,  832,  822,  833,  823,  824,  825,  826,  827,  828,
      834,  835,  829,  836,  837,  837,  837,  837,  837,  830,
      837,  837,  837,  837,  837,  831,  837,  837,  837,  837,
      837,  837,  832,  837,  833,  837,  837,  837,  837,  837,
      837,  834,  835,  837,  836,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   66,  837,   66,   66,   66,   66,   66,  837,
       66,   68,  837,  837,   68,   68,   68,   68,   68,   68,
       72,  837,   72,   72,   72,   72,   72,   72,   72,   78,
       78,   82,  837,   82,   82,  181,  181,  181,  181,  837,
      181,  181,  181,  181,  183,  183,  183,  183,  183,  183,
      183,  183,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  189,  189,  189,  189,  189,  189,  189,  189,  189,
       11,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,

      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837
    } ;

static const flex_int16_t yy_chk[1862] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       13,   13,   13,   14,   14,   14,   21,   21,   23,  849,
       23,   23,   24,   36,   24,   24,   26,   26,   38,   39,

       23,   23,   23,   38,   24,   24,   24,   30,   31,   30,
      756,   30,   31,   30,   30,   31,   51,   30,   31,   71,
       23,   31,   54,   71,   36,   55,   72,   72,   31,   38,
       39,   23,   23,   23,   38,   24,   24,   24,   30,   31,
       30,   37,   30,   31,   30,   30,   31,   51,   30,   31,
       33,   23,   31,   54,   33,   37,   55,   83,   33,   31,
       32,   34,   41,   34,   33,   83,   41,   32,   34,   84,
       41,   32,   37,   34,   32,   85,   41,   32,   75,   75,
       32,   33,   77,   77,   32,   33,   37,  710,   83,   33,
       84,   32,   34,   41,   34,   33,   83,   41,   32,   34,

       84,   41,   32,   86,   34,   32,   85,   41,   32,   42,
      703,   32,   87,  683,   45,   32,   35,   42,   45,   88,
       35,   84,   45,   42,   35,   49,   49,   35,   91,   42,
       35,   45,   49,   35,   86,   49,   35,  657,  187,   50,
       42,   50,  187,   87,   50,   45,  656,   35,   42,   45,
       88,   35,  645,   45,   42,   35,   49,   49,   35,   91,
       42,   35,   45,   49,   35,   47,   49,   35,   43,   47,
       50,  509,   50,   47,  369,   50,   64,   64,   64,   47,
       52,   43,  361,   43,   90,   43,   92,   52,   52,   76,
       76,   90,   89,   76,   76,   43,   47,   43,   70,   70,

       47,   43,   73,   73,   47,   89,  238,   93,   96,   70,
       47,   52,   43,   73,   43,   90,   43,   92,   52,   52,
      194,  194,   90,   89,   95,   97,   43,   99,   43,  185,
      100,   95,   43,   44,   44,  100,   89,   44,   93,   96,
       70,  101,  102,  104,   73,   44,  105,  102,  106,   44,
      107,   44,   44,   44,  136,   95,   97,   74,   99,   74,
       74,  100,   95,  108,   44,   44,  100,  110,   44,   74,
       74,   74,  101,  102,  104,  111,   44,  105,  102,  106,
       44,  107,   44,   44,   44,   48,  188,   48,  112,   48,
      188,  113,   48,   48,  108,   48,   67,   48,  110,   48,

       74,   74,   74,  189,   48,   48,  111,  189,   66,   48,
       63,  115,  116,  117,   98,  109,   48,   98,   48,  112,
       48,  109,  113,   48,   48,   98,   48,   98,   48,  118,
       48,   98,  109,  114,   98,   48,   48,  119,  103,  114,
       48,  103,  115,  116,  117,   98,  109,  103,   98,  103,
      122,  103,  109,  120,  103,  124,   98,  125,   98,  126,
      118,  120,   98,  109,  114,   98,  120,  120,  119,  103,
      114,  127,  103,  123,  123,  128,  130,  129,  103,  134,
      103,  122,  103,  132,  120,  103,  124,  129,  125,  132,
      126,  133,  120,  137,  137,  133,  135,  120,  120,  138,

      139,  140,  127,  141,  123,  123,  128,  130,  129,  142,
      134,  143,  144,  135,  132,  145,  135,  146,  129,  147,
      132,  148,  133,  151,  137,  137,  133,  135,  153,  149,
      138,  139,  140,  149,  141,  154,  155,  156,  158,   61,
      142,   58,  143,  144,  135,  159,  145,  135,  146,   57,
      147,  152,  148,  152,  151,  160,  152,  152,  161,  153,
      149,  157,  162,  157,  149,  157,  154,  155,  156,  158,
      152,  163,  157,  164,  163,  165,  159,  166,  169,  157,
      157,   46,  152,  167,  152,  171,  160,  152,  152,  161,
       28,  167,  157,  162,  157,   22,  157,  172,  174,  175,

      176,  152,  163,  157,  164,  163,  165,  173,  166,  169,
      157,  157,  170,  173,  167,  177,  171,  178,   20,  170,
       16,  170,  167,  335,  335,   15,  170,  199,  172,  174,
      175,  176,  186,  186,  336,  336,  186,  186,  173,  190,
      190,  202,   11,  170,  173,   10,  177,    9,  178,  190,
      170,  190,  170,  191,  191,  192,  192,  170,  199,  192,
      192,  203,  206,  191,  191,  191,  195,  195,  207,  196,
      196,  193,  202,  193,  193,  208,  195,  209,  195,  196,
      190,  196,  190,  193,  193,  193,  210,  210,  211,  212,
      213,  215,  203,  206,  191,  191,  191,  216,  214,  207,

      217,  218,  219,  221,  222,    6,  208,  195,  209,  195,
      196,  223,  196,  214,  193,  193,  193,  210,  210,  211,
      212,  213,  215,  224,  225,  226,  227,  230,  216,  214,
      220,  217,  218,  219,  221,  222,  220,  229,  220,  231,
      229,  232,  223,  233,  214,  234,  235,  236,  237,  239,
      241,  242,  240,  243,  224,  225,  226,  227,  230,  240,
      244,  220,  245,  246,  247,  249,  250,  220,  229,  220,
      231,  229,  232,  251,  233,  252,  234,  235,  236,  237,
      239,  241,  242,  240,  243,  253,  254,  255,  256,  257,
      240,  244,  258,  245,  246,  247,  249,  250,  259,  257,

      260,  261,  262,  263,  251,  265,  252,  267,  268,  270,
      271,  272,  273,  274,  276,  278,  253,  254,  255,  256,
      257,  270,  279,  258,  280,  281,  282,  283,  284,  259,
      257,  260,  261,  262,  263,  285,  265,  286,  267,  268,
      270,  271,  272,  273,  274,  276,  278,  287,  288,  289,
      290,  291,  270,  279,  292,  280,  281,  282,  283,  284,
      293,  294,  295,  297,  293,  298,  285,  299,  286,  294,
      301,  300,  302,  303,  304,  305,  306,  307,  287,  288,
      289,  290,  291,  300,  308,  292,  309,  310,  311,  312,
      313,  293,  294,  295,  297,  293,  298,  314,  299,  315,

      294,  301,  300,  302,  303,  304,  305,  306,  307,  317,
      318,  319,  320,  321,  322,  308,  324,  309,  310,  311,
      312,  313,  323,  325,  323,  326,  327,  328,  314,  330,
      315,  331,  332,  333,    5,  331,  334,  329,  339,  339,
      317,  318,  319,  320,  321,  322,  344,  324,  340,  340,
      341,  341,  345,  323,  325,  323,  326,  327,  328,  329,
      330,  346,  331,  332,  333,  329,  331,  334,  329,  342,
      342,  347,  348,  349,  350,  352,  353,  344,  354,  358,
      360,  362,  363,  345,  364,  365,  366,  367,  368,  370,
      329,  371,  346,  373,  374,  375,  376,  377,  378,  380,

      381,  383,  347,  348,  349,  350,  352,  353,  384,  354,
      358,  360,  362,  363,  385,  364,  365,  366,  367,  368,
      370,  386,  371,  387,  373,  374,  375,  376,  377,  378,
      380,  381,  383,  388,  389,  390,  391,  392,  393,  384,
      396,  397,  399,  400,  401,  385,  402,  405,  409,  410,
      410,  411,  386,  412,  387,  413,  414,  402,  415,  416,
      418,  419,    0,  421,  388,  389,  390,  391,  392,  393,
      422,  396,  397,  399,  400,  401,  423,  402,  405,  409,
      410,  410,  411,  420,  412,  424,  413,  414,  402,  415,
      416,  418,  419,  420,  421,  426,  427,  428,  430,  431,

      432,  422,  433,  434,  435,  439,  433,  423,  440,  441,
      442,  444,  445,  446,  420,  447,  424,  448,  450,  451,
      453,  454,  456,  458,  420,  459,  426,  427,  428,  430,
      431,  432,  460,  433,  434,  435,  439,  433,  463,  440,
      441,  442,  444,  445,  446,  463,  447,  465,  448,  450,
      451,  453,  454,  456,  458,  466,  459,  467,  468,  469,
      470,  471,  472,  460,  473,  474,  478,  475,  479,  463,
      475,  486,  487,  488,  490,  491,  463,  492,  465,  493,
      494,  495,  496,  497,  498,  499,  466,  502,  467,  468,
      469,  470,  471,  472,  503,  473,  474,  478,  475,  479,

      505,  475,  486,  487,  488,  490,  491,  506,  492,  507,
      493,  494,  495,  496,  497,  498,  499,  508,  502,  511,
      512,  514,  515,  516,  517,  503,  518,  523,  524,  525,
      526,  505,  528,  529,  530,  532,  534,  530,  506,  536,
      507,  537,  538,  541,  542,  543,  545,  546,  508,  547,
      511,  512,  514,  515,  516,  517,  548,  518,  523,  524,
      525,  526,  550,  528,  529,  530,  532,  534,  530,  552,
      536,  553,  537,  538,  541,  542,  543,  545,  546,  555,
      547,  556,  559,  560,  561,  563,  564,  548,  566,  567,
      568,  569,  570,  550,  571,  572,  574,  575,  576,  577,

      552,  578,  553,  580,  581,  582,  583,  585,  586,  587,
      555,  588,  556,  559,  560,  561,  563,  564,  589,  566,
      567,  568,  569,  570,  591,  571,  572,  574,  575,  576,
      577,  592,  578,  595,  580,  581,  582,  583,  585,  586,
      587,  596,  588,  597,  598,  599,  600,  601,  602,  589,
      603,  604,  605,  606,  607,  591,  608,  609,  611,  612,
      616,  618,  592,  619,  595,  620,  622,  624,  625,  626,
      629,  630,  596,  631,  597,  598,  599,  600,  601,  602,
      632,  603,  604,  605,  606,  607,  635,  608,  609,  611,
      612,  616,  618,  640,  619,  641,  620,  622,  624,  625,

      626,  629,  630,  642,  631,  643,  644,  646,  647,  652,
      654,  632,  655,  658,  659,  660,  662,  635,  663,  666,
      667,  668,  669,  670,  640,  674,  641,  675,  676,  679,
      681,  682,  687,  688,  642,  691,  643,  644,  646,  647,
      652,  654,  692,  655,  658,  659,  660,  662,  693,  663,
      666,  667,  668,  669,  670,  695,  674,  696,  675,  676,
      679,  681,  682,  687,  688,  697,  691,  698,  702,  704,
      705,  706,  707,  692,  708,  709,  711,  712,  713,  693,
      714,  713,  715,  716,  717,  723,  695,  725,  696,  727,
      728,  729,  730,  731,  731,  732,  697,  734,  698,  702,

      704,  705,  706,  707,  737,  708,  709,  711,  712,  713,
      741,  714,  713,  715,  716,  717,  723,  742,  725,  743,
      727,  728,  729,  730,  731,  731,  732,  744,  734,  745,
      746,  747,  748,  749,  752,  737,  753,  754,  755,  757,
      759,  741,  760,  761,  762,  764,  765,  766,  742,  770,
      743,  774,  776,  777,  778,  779,  780,    0,  744,  787,
      745,  746,  747,  748,  749,  752,  788,  753,  754,  755,
      757,  759,  789,  760,  761,  762,  764,  765,  766,  791,
      770,  782,  774,  776,  777,  778,  779,  780,  782,  792,
      787,  794,  796,  782,  797,  798,  799,  788,  782,  800,

      801,  802,  803,  789,  804,  805,  807,  810,  811,  812,
      791,  813,  782,  814,  815,  819,  820,  821,  822,  782,
      792,  824,  794,  796,  782,  797,  798,  799,  827,  782,
      800,  801,  802,  803,  828,  804,  805,  807,  810,  811,
      812,  829,  813,  830,  814,  815,  819,  820,  821,  822,
      831,  832,  824,  835,    0,    0,    0,    0,    0,  827,
        0,    0,    0,    0,    0,  828,    0,    0,    0,    0,
        0,    0,  829,    0,  830,    0,    0,    0,    0,    0,
        0,  831,  832,    0,  835,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  841,    0,  841,  841,  841,  841,  841,    0,
      841,  842,    0,    0,  842,  842,  842,  842,  842,  842,
      843,    0,  843,  843,  843,  843,  843,  843,  843,  844,
      844,  845,    0,  845,  845,  846,  846,  846,  846,    0,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
      847,  847,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,

      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "oracle.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "oracle.l"

#include "node.h"
#include "sqlparser_oracle_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

std::string escape_double_quotation_oracle(const std::string& src, char c) {
    assert(c == '"' || c == '`' || c == ']');
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == c && src[1+i] == c) {
            ret += c;
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return ORACLE_##name; }
#define YYSTYPE         ORACLE_STYPE
#define YYLTYPE         ORACLE_LTYPE

#line 1395 "sqlparser_oracle_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1408 "sqlparser_oracle_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sqq 3
#define sb 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 130 "oracle.l"

#line 1696 "sqlparser_oracle_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 838 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 837 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 131 "oracle.l"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 132 "oracle.l"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 133 "oracle.l"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "oracle.l"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 135 "oracle.l"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "oracle.l"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 137 "oracle.l"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "oracle.l"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 139 "oracle.l"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 140 "oracle.l"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 141 "oracle.l"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "oracle.l"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 143 "oracle.l"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "oracle.l"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "oracle.l"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "oracle.l"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "oracle.l"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "oracle.l"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 149 "oracle.l"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "oracle.l"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "oracle.l"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "oracle.l"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "oracle.l"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "oracle.l"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 155 "oracle.l"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 156 "oracle.l"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 157 "oracle.l"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 158 "oracle.l"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "oracle.l"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 160 "oracle.l"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 161 "oracle.l"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 162 "oracle.l"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 163 "oracle.l"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 164 "oracle.l"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 165 "oracle.l"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 166 "oracle.l"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 167 "oracle.l"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 168 "oracle.l"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 169 "oracle.l"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 170 "oracle.l"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 171 "oracle.l"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 172 "oracle.l"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 173 "oracle.l"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 174 "oracle.l"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 175 "oracle.l"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 176 "oracle.l"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 177 "oracle.l"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 178 "oracle.l"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 179 "oracle.l"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 180 "oracle.l"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "oracle.l"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 182 "oracle.l"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 183 "oracle.l"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 184 "oracle.l"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 185 "oracle.l"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 186 "oracle.l"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 187 "oracle.l"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 188 "oracle.l"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 189 "oracle.l"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 190 "oracle.l"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 191 "oracle.l"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 192 "oracle.l"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 193 "oracle.l"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 194 "oracle.l"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 195 "oracle.l"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 196 "oracle.l"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 197 "oracle.l"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 198 "oracle.l"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 199 "oracle.l"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 200 "oracle.l"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 201 "oracle.l"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 202 "oracle.l"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 203 "oracle.l"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 204 "oracle.l"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 205 "oracle.l"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 206 "oracle.l"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 207 "oracle.l"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 208 "oracle.l"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 209 "oracle.l"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 210 "oracle.l"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 211 "oracle.l"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 212 "oracle.l"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 213 "oracle.l"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 214 "oracle.l"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 215 "oracle.l"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 216 "oracle.l"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 217 "oracle.l"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 218 "oracle.l"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 219 "oracle.l"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 220 "oracle.l"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 221 "oracle.l"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 222 "oracle.l"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 223 "oracle.l"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 224 "oracle.l"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 225 "oracle.l"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 226 "oracle.l"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 227 "oracle.l"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 228 "oracle.l"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 229 "oracle.l"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 230 "oracle.l"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 231 "oracle.l"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 232 "oracle.l"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 233 "oracle.l"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 234 "oracle.l"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 235 "oracle.l"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 236 "oracle.l"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 237 "oracle.l"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 238 "oracle.l"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 239 "oracle.l"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 240 "oracle.l"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 241 "oracle.l"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 242 "oracle.l"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 243 "oracle.l"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 244 "oracle.l"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 245 "oracle.l"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 246 "oracle.l"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 247 "oracle.l"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 248 "oracle.l"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 249 "oracle.l"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 250 "oracle.l"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 251 "oracle.l"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 252 "oracle.l"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 253 "oracle.l"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 254 "oracle.l"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 255 "oracle.l"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 256 "oracle.l"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 257 "oracle.l"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 258 "oracle.l"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 259 "oracle.l"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 260 "oracle.l"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 261 "oracle.l"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 262 "oracle.l"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 263 "oracle.l"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 264 "oracle.l"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 265 "oracle.l"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 266 "oracle.l"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 267 "oracle.l"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 268 "oracle.l"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 269 "oracle.l"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 270 "oracle.l"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 271 "oracle.l"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 272 "oracle.l"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 273 "oracle.l"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 274 "oracle.l"
TOKEN(FETCH)            /*-ORACLE-*/
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 275 "oracle.l"
TOKEN(FIRST)            /*-ORACLE-*/
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 276 "oracle.l"
TOKEN(RETURNING)        /*-ORACLE-*/
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 277 "oracle.l"
TOKEN(SKIP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 278 "oracle.l"
TOKEN(LOCKED)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 279 "oracle.l"
TOKEN(NOWAIT)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 280 "oracle.l"
TOKEN(WAIT)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 281 "oracle.l"
TOKEN(NULLS)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 282 "oracle.l"
TOKEN(LAST)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 283 "oracle.l"
TOKEN(SIBLINGS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 284 "oracle.l"
TOKEN(OFFSET)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 285 "oracle.l"
TOKEN(NEXT)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 286 "oracle.l"
TOKEN(PERCENT)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 287 "oracle.l"
TOKEN(MINUS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 288 "oracle.l"
TOKEN(UNIQUE)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 289 "oracle.l"
TOKEN(NAN)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 290 "oracle.l"
TOKEN(INFINITE)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 291 "oracle.l"
TOKEN(REGEXP_LIKE)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 292 "oracle.l"
TOKEN(APPLY)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 293 "oracle.l"
TOKEN(CYCLE)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 294 "oracle.l"
TOKEN(SEARCH)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 295 "oracle.l"
TOKEN(DEPTH)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 296 "oracle.l"
TOKEN(BREADTH)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 297 "oracle.l"
TOKEN(START)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 298 "oracle.l"
TOKEN(CONNECT)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 299 "oracle.l"
TOKEN(NOCYCLE)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 300 "oracle.l"
TOKEN(CONTAINERS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 301 "oracle.l"
TOKEN(SHARDS)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 302 "oracle.l"
TOKEN(SAMPLE)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 303 "oracle.l"
TOKEN(BLOCK)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 304 "oracle.l"
TOKEN(SEED)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 305 "oracle.l"
TOKEN(PRIOR)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 306 "oracle.l"
TOKEN(STDDEV)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 307 "oracle.l"
TOKEN(ALTER)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 308 "oracle.l"
TOKEN(SESSION)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 309 "oracle.l"
TOKEN(BEGIN)
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 310 "oracle.l"
TOKEN(DECLARE)
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 311 "oracle.l"
TOKEN(UNPIVOT)
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 312 "oracle.l"
TOKEN(PIVOT)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 313 "oracle.l"
TOKEN(EXTRACT)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 314 "oracle.l"
TOKEN(TIMEZONE_HOUR)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 315 "oracle.l"
TOKEN(TIMEZONE_MINUTE)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 316 "oracle.l"
TOKEN(TIMEZONE_REGION)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 317 "oracle.l"
TOKEN(TIMEZONE_ABBR)
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 319 "oracle.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return ORACLE_NULLX;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 324 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return ORACLE_INTNUM;
}
	YY_BREAK
case 190:
#line 331 "oracle.l"
case 191:
YY_RULE_SETUP
#line 331 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return ORACLE_INTNUM;
}
	YY_BREAK
case 192:
#line 341 "oracle.l"
case 193:
#line 342 "oracle.l"
case 194:
#line 343 "oracle.l"
case 195:
YY_RULE_SETUP
#line 343 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return ORACLE_APPROXNUM;
}
	YY_BREAK
case 196:
#line 352 "oracle.l"
case 197:
YY_RULE_SETUP
#line 352 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return ORACLE_APPROXNUM;
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 359 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return ORACLE_BOOL;
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 366 "oracle.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return ORACLE_UNKNOWN;
}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 371 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return ORACLE_BOOL;
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 378 "oracle.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 384 "oracle.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 390 "oracle.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << yytext;
    ((ParseResult*)yyextra)->q_ = 1;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 396 "oracle.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << yytext;
    ((ParseResult*)yyextra)->q_ = 1;
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 404 "oracle.l"
{
    if(((ParseResult*)yyextra)->q_ == '\'' ){
        BEGIN(INITIAL);
        ((ParseResult*)yyextra)->q_ = 0;
        ((ParseResult*)yyextra)->buf_ << "''";
        Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
        nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
        yylval->node = nd;
        return ORACLE_STRING;
    } else if(((ParseResult*)yyextra)->q_ == 1) {
        ((ParseResult*)yyextra)->q_ = '\'';
        ((ParseResult*)yyextra)->buf_ << "''";
    } else {
        ((ParseResult*)yyextra)->buf_ << "''";
    }

}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 422 "oracle.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
    if(((ParseResult*)yyextra)->q_ == 1){
        ((ParseResult*)yyextra)->q_ = yytext[0];
    }
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 429 "oracle.l"
{
    do{
        bool bbreak = true;
        char q_ =  ((ParseResult*)yyextra)->q_;
        if( q_ > 1) {
            char c_ = ((ParseResult*)yyextra)->buf_.str().back();
            if      (q_ == '('  ) { if(c_ == ')') bbreak = false; }
            else if (q_ == '['  ) { if(c_ == ']') bbreak = false; }
            else if (q_ == '{'  ) { if(c_ == '}') bbreak = false; }
            else if (q_ == '<'  ) { if(c_ == '>') bbreak = false; }
            else if (q_ == c_) bbreak = false;
        } else if(((ParseResult*)yyextra)->q_ == 1) {
            ((ParseResult*)yyextra)->q_ = '\'';
            bbreak = true;
        } else {
            bbreak = false;
        }
        ((ParseResult*)yyextra)->buf_ << '\'';
        if(bbreak){
            break;
        }
        BEGIN(INITIAL);
        ((ParseResult*)yyextra)->q_ = 0;
        Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
        nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
        yylval->node = nd;
        return ORACLE_STRING;
    } while(false);

}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 460 "oracle.l"
{
  //fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ORACLE_ERROR;
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 469 "oracle.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 475 "oracle.l"
{
    ((ParseResult*)yyextra)->buf_ << "]]";
}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 479 "oracle.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 483 "oracle.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = escape_double_quotation_oracle(text.substr(1, text.length() - 2), ']');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    yylval->node = nd;
    return ORACLE_NAME;
}
	YY_BREAK
case YY_STATE_EOF(sb):
#line 495 "oracle.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unterminated identifier WITH '['\n");
    return ORACLE_ERROR;
}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 501 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_oracle(std::string(yytext+1, yytext + strlen(yytext) - 1), '"');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return ORACLE_NAME;
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 510 "oracle.l"
{
    Node::strupr(yytext);
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return ORACLE_NAME;
}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 520 "oracle.l"
{
	Node* nd = Node::makeTerminalNode(EORA_PARAM, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return ORACLE_PARAM;
}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 529 "oracle.l"
{ /* ignore */ }
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 530 "oracle.l"
{ /* ignore */ }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 532 "oracle.l"
{ return yytext[0];}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 534 "oracle.l"
{ return ORACLE_CNNOP; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 535 "oracle.l"
{ return ORACLE_COMP_EQ; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 536 "oracle.l"
{ return ORACLE_COMP_GE; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 537 "oracle.l"
{ return ORACLE_COMP_GT; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 538 "oracle.l"
{ return ORACLE_COMP_LE; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 539 "oracle.l"
{ return ORACLE_COMP_LT; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 540 "oracle.l"
{ return ORACLE_COMP_NE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 541 "oracle.l"
{ return ORACLE_COMP_NE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 542 "oracle.l"
{ return ORACLE_COMP_NE; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 544 "oracle.l"

	YY_BREAK
case 228:
YY_RULE_SETUP
#line 546 "oracle.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    g_QuestMarkId++;
    nd->questmarkid_ = g_QuestMarkId;
    return ORACLE_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sqq):
#line 556 "oracle.l"
{ return ORACLE_END_P; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 558 "oracle.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ORACLE_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 562 "oracle.l"
ECHO;
	YY_BREAK
#line 3060 "sqlparser_oracle_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 838 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 838 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 837);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 562 "oracle.l"

/***************************
 ** Section 3: User code
 ***************************/

//int yyerror(const char *msg) {
//    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return ORACLE_ERROR;
//}

