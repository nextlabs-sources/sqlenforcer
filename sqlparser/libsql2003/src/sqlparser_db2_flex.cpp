#line 2 "sqlparser_db2_flex.cpp"

#line 4 "sqlparser_db2_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define db2__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer db2__create_buffer
#endif

#ifdef yy_delete_buffer
#define db2__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer db2__delete_buffer
#endif

#ifdef yy_scan_buffer
#define db2__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer db2__scan_buffer
#endif

#ifdef yy_scan_string
#define db2__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string db2__scan_string
#endif

#ifdef yy_scan_bytes
#define db2__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes db2__scan_bytes
#endif

#ifdef yy_init_buffer
#define db2__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer db2__init_buffer
#endif

#ifdef yy_flush_buffer
#define db2__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer db2__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define db2__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state db2__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define db2__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer db2__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define db2_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state db2_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define db2_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state db2_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define db2_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack db2_ensure_buffer_stack
#endif

#ifdef yylex
#define db2_lex_ALREADY_DEFINED
#else
#define yylex db2_lex
#endif

#ifdef yyrestart
#define db2_restart_ALREADY_DEFINED
#else
#define yyrestart db2_restart
#endif

#ifdef yylex_init
#define db2_lex_init_ALREADY_DEFINED
#else
#define yylex_init db2_lex_init
#endif

#ifdef yylex_init_extra
#define db2_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra db2_lex_init_extra
#endif

#ifdef yylex_destroy
#define db2_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy db2_lex_destroy
#endif

#ifdef yyget_debug
#define db2_get_debug_ALREADY_DEFINED
#else
#define yyget_debug db2_get_debug
#endif

#ifdef yyset_debug
#define db2_set_debug_ALREADY_DEFINED
#else
#define yyset_debug db2_set_debug
#endif

#ifdef yyget_extra
#define db2_get_extra_ALREADY_DEFINED
#else
#define yyget_extra db2_get_extra
#endif

#ifdef yyset_extra
#define db2_set_extra_ALREADY_DEFINED
#else
#define yyset_extra db2_set_extra
#endif

#ifdef yyget_in
#define db2_get_in_ALREADY_DEFINED
#else
#define yyget_in db2_get_in
#endif

#ifdef yyset_in
#define db2_set_in_ALREADY_DEFINED
#else
#define yyset_in db2_set_in
#endif

#ifdef yyget_out
#define db2_get_out_ALREADY_DEFINED
#else
#define yyget_out db2_get_out
#endif

#ifdef yyset_out
#define db2_set_out_ALREADY_DEFINED
#else
#define yyset_out db2_set_out
#endif

#ifdef yyget_leng
#define db2_get_leng_ALREADY_DEFINED
#else
#define yyget_leng db2_get_leng
#endif

#ifdef yyget_text
#define db2_get_text_ALREADY_DEFINED
#else
#define yyget_text db2_get_text
#endif

#ifdef yyget_lineno
#define db2_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno db2_get_lineno
#endif

#ifdef yyset_lineno
#define db2_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno db2_set_lineno
#endif

#ifdef yyget_column
#define db2_get_column_ALREADY_DEFINED
#else
#define yyget_column db2_get_column
#endif

#ifdef yyset_column
#define db2_set_column_ALREADY_DEFINED
#else
#define yyset_column db2_set_column
#endif

#ifdef yywrap
#define db2_wrap_ALREADY_DEFINED
#else
#define yywrap db2_wrap
#endif

#ifdef yyget_lval
#define db2_get_lval_ALREADY_DEFINED
#else
#define yyget_lval db2_get_lval
#endif

#ifdef yyset_lval
#define db2_set_lval_ALREADY_DEFINED
#else
#define yyset_lval db2_set_lval
#endif

#ifdef yyget_lloc
#define db2_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc db2_get_lloc
#endif

#ifdef yyset_lloc
#define db2_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc db2_set_lloc
#endif

#ifdef yyalloc
#define db2_alloc_ALREADY_DEFINED
#else
#define yyalloc db2_alloc
#endif

#ifdef yyrealloc
#define db2_realloc_ALREADY_DEFINED
#else
#define yyrealloc db2_realloc
#endif

#ifdef yyfree
#define db2_free_ALREADY_DEFINED
#else
#define yyfree db2_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define db2_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 210
#define YY_END_OF_BUFFER 211
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[743] =
    {   0,
      207,  207,    0,    0,  187,  187,  191,  191,  211,  209,
      197,  197,  198,  209,  196,  198,  184,  198,  198,  198,
      175,  175,  204,  200,  202,  208,  195,  195,  195,  195,
      195,  195,   54,  195,  195,  195,   69,  195,   73,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  189,  209,  198,  210,  187,  188,  191,  192,
      197,  206,    0,    0,  196,  196,  180,    0,  179,  175,
        0,    0,  203,  205,  201,  195,  195,  195,  195,    5,
      195,  195,  195,  195,  195,   13,  195,  195,  195,  195,
      195,  147,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,   59,   67,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  185,  195,  195,   84,  195,  195,  195,
       90,   91,  195,   93,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  150,  149,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  128,
      195,  195,  195,  148,  195,  195,  195,  195,  195,  195,
      195,    0,    0,  199,  187,  186,  191,  190,  193,    0,
        0,  179,    0,    0,  176,  174,    1,    2,    3,  195,
        6,    7,  195,  195,  195,  166,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,   33,   34,  195,  195,  195,  195,  195,
      195,  195,  195,   43,  195,  195,  195,  195,  195,  195,
      195,  195,   51,  195,  195,  195,  195,  195,  195,  195,
       62,  195,  195,  195,  195,  195,  195,  195,   74,   75,
       77,  195,  195,  195,  195,  195,   85,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  107,  195,  109,  195,  195,
      195,  195,  195,  116,  195,  195,  195,  195,  195,  122,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      161,  195,  195,  195,  195,  195,  195,  195,  195,  194,
        0,  178,    0,    0,    0,  177,  195,  195,  195,  195,
       11,  195,   16,  195,   14,   15,   17,   20,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  146,   32,  195,
      195,  195,  195,  195,   39,  195,  195,   42,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,   52,   53,
      195,  195,   58,  195,  195,  195,   66,   68,  162,  195,
       71,   72,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  173,  195,  195,  195,  195,   92,  195,  195,  195,
      195,  195,   97,  195,  195,  195,  195,  195,  103,  104,

      105,  195,  195,  110,  195,  195,  195,  195,  195,  195,
      117,  195,  144,  195,  119,  195,  195,  195,  124,  125,
      126,  181,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  169,  138,  195,  140,  142,  143,  196,    4,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
       26,   27,  195,  195,  195,  195,  195,  195,  195,  195,
      195,   44,  195,  195,  195,  195,  183,  152,  153,   49,
      195,   55,  195,   60,  195,  195,  195,   70,  155,  195,
      164,  195,   78,  195,  195,  195,   82,   83,  195,  195,
      195,  195,  195,  195,   94,  195,  195,   96,  195,  195,

      195,  195,  195,  102,  195,  108,  195,  195,  112,  195,
      195,  195,  168,  195,  195,  195,  156,  195,  195,  195,
      130,  195,  195,  132,  195,  195,  195,  195,  195,  139,
      195,  195,    9,   10,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  157,   37,  195,
      195,   41,   45,   46,  195,  195,   48,  195,  195,   57,
       61,  195,  195,  195,  145,   76,  195,  195,  195,   86,
      195,   88,   89,  172,  195,   95,  195,  195,  195,  195,
      195,  195,  195,  195,  158,  113,  114,  195,  195,  171,
      195,  195,  195,  195,  195,  131,  133,  195,  195,  195,

      195,  195,    8,   12,  195,  195,  195,  195,   23,   24,
      195,  195,  195,   29,   35,   36,  195,  195,   47,  195,
      195,  195,   63,  195,  195,  167,  195,  195,   81,   87,
      195,  170,  195,  195,  195,  195,  151,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  182,  134,  135,  136,
      195,  141,  195,  195,   21,  195,  195,  195,  195,  195,
      195,   40,  195,  195,   56,  195,   65,   79,   80,  154,
      195,  195,  195,  195,  195,  195,  195,  118,  195,  195,
      195,  195,  159,  195,  137,  195,   18,  195,  195,  160,
       28,  195,  195,  195,  163,   50,   64,   98,  195,  100,

      101,  106,  195,  195,  195,  195,  195,  127,  129,  195,
       19,   22,  195,  195,  195,   38,  195,  111,  195,  120,
      195,  195,  165,  195,  195,  195,  195,  195,  121,  123,
      195,  195,   31,   99,  115,   25,  195,  195,  195,  195,
       30,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,    8,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,    8,   50,   51,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,    8,   78,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[79] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        5,    1,    1,    1,    6,    6,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    8,    9,    7,
        1,    6,    6,    6,    6,    6,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1
    } ;

static const flex_int16_t yy_base[755] =
    {   0,
        0,    0,    0,    0, 1422, 1421, 1380, 1379, 1427, 1549,
       77,   80,  887,  760,    0, 1549, 1549,  693,   70,  570,
       74,   78,   77, 1549,  457, 1549,   66,   77,  133,   86,
      116,  185,   50,   92,   58,   66,   85,  138,  135,  209,
      260,  159,   73,  313,  361,  218,  195,   95,  214,    0,
       95,   91, 1549,  417,  381, 1549,    0,  415,    0,  361,
      265, 1549,  401,  364,    0,    0,  264,    0,  290,  294,
      197,    0, 1549, 1549, 1549,    0,  130,  248,  131,  165,
      194,  184,  296,  192,  205,    0,  305,  238,  250,  417,
      256,    0,  302,  317,  467,  256,  256,  269,  294,  318,

      358,  313,  307,  321,  325,  365,  329,  345,  345,  343,
      357,  365,    0,  371,  384,  375,  388,  388,  399,  382,
      405,  422,  410, 1549,  403,  432,  407,  433,  418,  414,
      435,  435,  431,  452,  453,  443,  459,  450,  462,  478,
      479,  471,  487,  482,  468,    0,    0,  488,  506,  496,
      489,  499,  489,  502,  494,  489,  511,  518,  530,    0,
      509,  539,  528,    0,  537,  533,  527,  542,  532,  552,
      541,  312,  307, 1549,    0, 1549,    0, 1549,  347,  573,
      311,  575,  596,  109,  162,    0,    0,    0,    0,  557,
        0,    0,  536,  553,  574,    0,  583,  582,  583,  592,

      592,  580,  597,  588,  596,  590,  581,  586,  591,  588,
      603,  591,  609,    0,  604,  614,  599,  613,  600,  617,
      601,  620,  618,  254,  623,  651,  618,  623,  644,  638,
      657,  647,    0,  647,  649,  641,  655,  647,  661,  662,
      664,  656,  655,  665,  654,  670,  667,  666,    0,  659,
        0,  661,  662,  695,  682,  669,    0,  674,  694,  704,
      713,  700,  695,  712,  717,  718,  721,  707,  707,  725,
      726,  713,  725,  729,  713,    0,  729,  747,  733,  723,
      727,  738,  725,  726,  730,  745,  759,  773,  776,    0,
      761,  770,  769,  765,  780,  781,  772,  773,  775,  789,

        0,  777,  772,  798,  774,  781,  788,  780,  795,  248,
      167,  296,  266,  278,  340,  447,  778,  799,  791,  788,
        0,  802,    0,  799,    0,    0,  809,    0,  828,  199,
      839,  837,  838,  824,  826,  188,  841,    0,    0,  834,
      827,  844,  830,  846,    0,  843,  841,    0,  839,  840,
      841,  837,  839,  855,  853,  842,  843,  850,    0,    0,
      850,  853,    0,  850,  851,  888,    0,    0,    0,  865,
        0,    0,  852,  897,  884,  897,  898,  893,  891,  892,
      909,  903,  895,  911,  895,  912,    0,  905,  901,  902,
      906,  904,    0,  914,  919,  920,  902,  923,    0,    0,

        0,  912,  911,    0,  918,  921,  952,  950,  963,  958,
        0,  963,    0,  957,    0,  965,  966,  967,    0,    0,
      954,    0,  953,  961,  961,  957,  971,  974,  973,  973,
      967,    0,    0,  979,  970,    0,    0, 1549,    0,  982,
      969,  965,  990,  978,  990,  975,  975,  999, 1008, 1009,
      186,    0, 1025, 1016, 1030, 1020, 1028, 1029,  175, 1021,
     1031,    0, 1032, 1018, 1035, 1021,    0,    0,    0,    0,
     1018, 1033, 1036,    0, 1024, 1040, 1027,    0,    0, 1043,
        0, 1043,    0, 1032, 1038, 1052,    0,    0, 1049, 1047,
     1038, 1062, 1068, 1081,    0, 1072, 1079,    0, 1073, 1080,

     1091, 1077, 1083,    0, 1079,    0, 1078, 1099,    0, 1097,
     1082, 1088,    0, 1095, 1083, 1093,    0, 1087, 1093, 1095,
        0, 1087, 1106,    0, 1094, 1113, 1101, 1101, 1116,    0,
     1097, 1106,    0,    0, 1129, 1149, 1132, 1150, 1140, 1150,
     1136, 1141, 1156, 1150, 1140, 1149, 1142,    0,    0, 1145,
     1161,    0,    0,    0, 1160, 1157,    0, 1158, 1154,    0,
        0, 1151, 1165, 1170,    0, 1153, 1168, 1174, 1164,    0,
     1174,    0,    0,    0, 1152,    0, 1174, 1171, 1162, 1196,
     1203, 1199, 1206, 1203,    0,    0,    0, 1203, 1204,  172,
      166, 1218, 1206, 1217, 1208,    0,    0, 1205, 1217, 1209,

     1213, 1207,    0,    0, 1216, 1224, 1225, 1222,    0,    0,
     1217, 1224, 1215,  139,    0,    0, 1234, 1217,    0, 1216,
     1225, 1233,    0, 1238, 1230,    0, 1224, 1255,    0,    0,
     1269,    0, 1261,  125, 1263, 1263,    0, 1257, 1278,  116,
     1261, 1266, 1262, 1271, 1281, 1282,    0,    0,    0,    0,
     1272,    0, 1280, 1272,    0, 1271, 1278, 1286, 1274, 1275,
     1283,    0, 1294, 1293,    0, 1281,    0,    0,    0,    0,
     1288, 1285, 1297, 1292, 1324, 1331, 1317,    0, 1324, 1339,
     1322, 1326,    0, 1339,    0, 1324, 1326, 1327, 1343,    0,
        0, 1339, 1330, 1339,    0,    0,    0,    0, 1350,    0,

        0,    0, 1334, 1334, 1338, 1342, 1351,    0,    0, 1332,
        0,    0, 1349, 1346, 1356,    0, 1348,    0, 1358,    0,
     1348, 1347,    0, 1352, 1363, 1373, 1387, 1382,    0,    0,
     1394, 1383,    0,    0,    0,    0, 1383, 1403, 1392, 1390,
        0, 1549, 1457, 1466, 1475, 1484, 1493, 1497, 1504, 1513,
     1522, 1530,  111, 1539
    } ;

static const flex_int16_t yy_def[755] =
    {   0,
      742,    1,  743,  743,  744,  744,  745,  745,  742,  742,
      742,  742,  742,  746,  747,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  742,  749,  742,  742,  750,  742,  751,  742,
      742,  742,  746,  742,  747,  747,  742,  752,  742,  742,
      742,  753,  742,  742,  742,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  742,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  749,  742,  742,  750,  742,  751,  742,  742,  742,
      754,  742,  742,  742,  742,  753,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  742,
      742,  742,  754,  754,  742,  742,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  742,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,    0,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742
    } ;

static const flex_int16_t yy_nxt[1628] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   10,   10,   50,
       54,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   55,   61,   61,
       61,   61,   61,   61,   67,   67,   69,  109,   70,   70,
       69,  112,   70,   70,   73,   74,  113,   77,   71,   78,

      114,   82,   71,   79,   80,   83,   94,   81,   84,  115,
       95,   85,  110,  141,   96,  166,  186,   72,  109,  170,
       97,   86,  112,  185,  185,  171,  111,  113,   77,   71,
       78,  114,   82,   71,   79,   80,   83,   94,   81,   84,
      115,   95,   85,  110,  141,   96,  166,   98,   72,   99,
      170,   97,   86,   87,  100,  120,  171,  111,  116,  101,
       88,  187,  117,  121,   89,  677,  118,   90,  190,  122,
       91,   92,  119,   93,  672,  123,  185,  185,   98,  138,
       99,  312,  312,  139,   87,  100,  120,  191,  660,  116,
      101,   88,  187,  117,  121,   89,  140,  118,   90,  190,

      122,   91,   92,  119,   93,  102,  123,  184,  184,  103,
      138,  185,  185,  104,  139,  643,  105,  124,  191,  106,
      192,  642,  107,  193,  550,  108,  197,  140,  162,  125,
      163,  126,  164,  165,  167,  543,  102,  453,  157,  198,
      103,  168,  169,  127,  104,  158,  159,  105,  447,  128,
      106,  192,  160,  107,  193,  161,  108,  197,  202,  162,
      125,  163,  126,  164,  165,  167,   61,   61,   61,  157,
      198,  188,  168,  169,  127,  314,  158,  159,   67,   67,
      128,  129,  130,  160,  203,  131,  161,  314,  180,  202,
      210,  438,  189,  132,  221,  133,  222,  134,  172,  135,

      136,  137,  188,  349,  182,  182,   69,  223,   70,   70,
      312,  312,  129,  130,  183,  203,  131,  224,   71,  180,
      314,  210,  194,  189,  132,  221,  133,  222,  134,  195,
      135,  136,  137,  142,  211,  196,  199,  143,  223,  212,
      225,  144,  200,  201,  228,  183,  229,  145,  224,   71,
      146,  147,   63,  194,  316,  316,  213,  172,  230,  231,
      195,  214,  310,  234,  142,  211,  196,  199,  143,   63,
      212,  225,  144,  200,  201,  228,  235,  229,  145,  236,
      226,  146,  147,  148,  237,  149,  227,  213,  150,  230,
      231,  151,  214,  152,  234,  153,  232,  238,  239,  242,

      154,  155,  233,  240,  241,  156,  179,  235,  243,  178,
      236,  226,  244,  245,  148,  237,  149,  227,  246,  150,
      247,  248,  151,  176,  152,  249,  153,  232,  238,  239,
      242,  154,  155,  233,  240,  241,  156,  204,  250,  243,
      205,  253,  254,  244,  245,  251,  257,  260,  206,  246,
      207,  247,  248,  261,  208,  252,  249,  209,  174,  255,
      262,  316,  316,  256,  258,  259,  263,  173,  204,  250,
      264,  205,  253,  254,   75,  265,  251,  257,  260,  206,
      266,  207,  267,  268,  261,  208,  252,  269,  209,  215,
      255,  262,  216,  217,  256,  258,  259,  263,  218,  270,

      219,  264,  271,  272,  273,  220,  265,  274,  277,  275,
      278,  266,  276,  267,  268,  279,  285,  286,  269,  287,
      215,  288,  280,  216,  217,  289,  290,  291,  281,  218,
      270,  219,  292,  271,  272,  273,  220,  282,  274,  277,
      275,  278,  293,  276,  283,  284,  279,  285,  286,  296,
      287,  300,  288,  280,  294,  305,  289,  290,  291,  281,
      297,  301,  295,  292,  303,  302,  306,  298,  282,  299,
      304,  307,  308,  293,  309,  283,  284,  317,  318,   68,
      296,  319,  300,  311,  311,  294,  305,  312,  312,  182,
      182,  297,  301,  295,  320,  303,  302,  306,  298,  183,

      299,  304,  307,  308,  321,  309,  315,  315,  317,  318,
      316,  316,  319,  322,  323,  324,  325,  327,  328,  329,
      330,  331,  332,  333,  334,  320,  335,  336,  337,  338,
      183,  326,  340,  339,  341,  321,  342,  343,  344,  345,
      346,  347,  348,  350,  322,  323,  324,  325,  327,  328,
      329,  330,  331,  332,  333,  334,  353,  335,  336,  337,
      338,  354,  326,  340,  339,  341,  355,  342,  343,  344,
      345,  346,  347,  348,  350,  351,  356,  357,  358,  359,
      360,  361,  352,  362,  363,  364,  365,  353,  366,  368,
      369,  370,  354,  371,  372,  373,  374,  355,  367,  375,

      376,  377,  380,  381,   66,  382,  351,  356,  357,  358,
      359,  360,  361,  352,  362,  363,  364,  365,  383,  366,
      368,  369,  370,  378,  371,  372,  373,  374,  384,  367,
      375,  376,  377,  380,  381,  379,  382,  385,  386,  387,
      388,  389,  390,  391,  393,  392,  394,  395,  396,  383,
      397,  398,  400,  402,  378,  399,  403,  406,  407,  384,
      401,  408,  409,  410,  411,   64,  379,  412,  385,  386,
      387,  388,  389,  390,  391,  393,  392,  394,  395,  396,
      413,  397,  398,  400,  402,  404,  399,  403,  406,  407,
      414,  401,  408,  409,  410,  411,  405,  415,  412,  416,

      417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
      427,  413,  428,  432,  433,  435,  404,  436,  434,  437,
      429,  414,  439,  440,  441,  442,  443,  444,  415,  445,
      416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
      426,  427,  430,  428,  432,  433,  435,  431,  436,  434,
      437,  429,  446,  439,  440,  441,  442,  443,  444,  448,
      445,  449,  450,  451,  452,  454,  455,  456,  457,  458,
      459,  460,  461,  430,  462,  463,  464,  465,  466,  467,
      468,  469,  470,  446,  471,  472,  473,  474,  475,  478,
      448,  479,  449,  450,  451,  452,  454,  455,  456,  457,

      458,  459,  460,  461,   62,  462,  463,  464,  465,  466,
      467,  468,  469,  470,  476,  471,  472,  473,  474,  475,
      478,  480,  479,  482,  483,  477,  484,  485,  486,  487,
      488,  489,  490,  491,  492,  481,  493,  494,  495,  496,
      497,  498,  499,  500,  501,  476,  503,  504,  502,  505,
      506,  507,  480,  508,  482,  483,  477,  484,  485,  486,
      487,  488,  489,  490,  491,  492,  481,  493,  494,  495,
      496,  497,  498,  499,  500,  501,  509,  503,  504,  502,
      505,  506,  507,  510,  508,  511,  512,  513,  514,  515,
      516,  517,  518,  520,  521,  522,  523,  524,  525,  519,

      526,  527,  528,  530,  531,  529,  532,  509,  533,  534,
      535,  536,  537,  538,  510,  539,  511,  512,  513,  514,
      515,  516,  517,  518,  520,  521,  522,  523,  524,  525,
      519,  526,  527,  528,  530,  531,  529,  532,  540,  533,
      534,  535,  536,  537,  538,  541,  539,  542,  544,  545,
      546,  547,  548,  549,  551,  552,  553,  554,  555,  557,
      558,  559,  560,  561,  562,  563,  565,  566,  564,  540,
      567,  568,  569,  556,  570,  571,  541,  572,  542,  544,
      545,  546,  547,  548,  549,  551,  552,  553,  554,  555,
      557,  558,  559,  560,  561,  562,  563,  565,  566,  564,

      573,  567,  568,  569,  556,  570,  571,  574,  572,  575,
      576,  577,  578,  579,  580,  581,  582,  583,  584,  585,
      586,  587,  588,  589,  590,  591,  592,  593,  594,  595,
      596,  573,  597,  598,  599,  600,  601,  602,  574,  603,
      575,  576,  577,  578,  579,  580,  581,  582,  583,  584,
      585,  586,  587,  588,  589,  590,  591,  592,  593,  594,
      595,  596,  604,  597,  598,  599,  600,  601,  602,  605,
      603,  606,  607,  608,  609,  610,  611,  612,  613,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      625,  626,  627,  604,  628,  629,  630,  631,  632,  633,

      605,  634,  606,  607,  608,  609,  610,  611,  612,  613,
      614,  615,  616,  617,  618,  619,  620,  621,  622,  623,
      624,  625,  626,  627,  635,  628,  629,  630,  631,  632,
      633,  636,  634,  637,  638,  639,  640,  641,  644,  645,
      646,  647,  648,  649,  650,  651,  652,  653,  654,  655,
      656,  657,  658,  659,  661,  635,  662,  663,  664,  665,
      666,  667,  636,  668,  637,  638,  639,  640,  641,  644,
      645,  646,  647,  648,  649,  650,  651,  652,  653,  654,
      655,  656,  657,  658,  659,  661,  669,  662,  663,  664,
      665,  666,  667,  670,  668,  671,  673,  674,  675,  676,

      678,  679,  681,  682,  680,  683,  684,  685,  686,  687,
      688,  689,  690,  691,  692,  693,  694,  669,  695,  696,
      697,  698,  699,  700,  670,  701,  671,  673,  674,  675,
      676,  678,  679,  681,  682,  680,  683,  684,  685,  686,
      687,  688,  689,  690,  691,  692,  693,  694,  702,  695,
      696,  697,  698,  699,  700,  703,  701,  704,  705,  706,
      707,  708,  709,  710,  711,  712,  713,  714,  715,  716,
      717,  718,  719,  720,  721,  722,  723,  724,  725,  702,
      726,  727,  728,  729,  730,  731,  703,  732,  704,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,

      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
      733,  726,  727,  728,  729,  730,  731,  734,  732,  735,
      736,  737,  738,  739,  740,  741,  742,   60,   60,   58,
       58,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  733,  742,  742,  742,  742,  742,  742,  734,  742,
      735,  736,  737,  738,  739,  740,  741,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   63,  742,   63,   63,   63,   63,
       63,  742,   63,   65,  742,  742,   65,   65,   65,   65,

       65,   65,   76,   76,  172,  742,  172,  172,  172,  172,
      172,  742,  172,  175,  175,  175,  742,  175,  175,  175,
      175,  175,  177,  177,  177,  177,  177,  177,  177,  177,
      181,  181,  181,  181,  742,  181,  181,  181,  181,  313,
      313,  313,  313,  313,  313,  313,  313,  313,    9,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742
    } ;

static const flex_int16_t yy_chk[1628] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   11,
       11,   12,   12,   12,   19,   19,   21,   33,   21,   21,
       22,   35,   22,   22,   23,   23,   35,   27,   21,   27,

       36,   28,   22,   27,   27,   28,   30,   27,   28,   37,
       30,   28,   34,   43,   30,   48,  753,   21,   33,   51,
       30,   28,   35,  184,  184,   52,   34,   35,   27,   21,
       27,   36,   28,   22,   27,   27,   28,   30,   27,   28,
       37,   30,   28,   34,   43,   30,   48,   31,   21,   31,
       51,   30,   28,   29,   31,   39,   52,   34,   38,   31,
       29,   77,   38,   39,   29,  640,   38,   29,   79,   39,
       29,   29,   38,   29,  634,   39,  185,  185,   31,   42,
       31,  311,  311,   42,   29,   31,   39,   80,  614,   38,
       31,   29,   77,   38,   39,   29,   42,   38,   29,   79,

       39,   29,   29,   38,   29,   32,   39,   71,   71,   32,
       42,   71,   71,   32,   42,  591,   32,   40,   80,   32,
       81,  590,   32,   82,  459,   32,   84,   42,   47,   40,
       47,   40,   47,   47,   49,  451,   32,  336,   46,   85,
       32,   49,   49,   40,   32,   46,   46,   32,  330,   40,
       32,   81,   46,   32,   82,   46,   32,   84,   88,   47,
       40,   47,   40,   47,   47,   49,   61,   61,   61,   46,
       85,   78,   49,   49,   40,  313,   46,   46,   67,   67,
       40,   41,   41,   46,   89,   41,   46,  314,   67,   88,
       91,  314,   78,   41,   96,   41,   97,   41,  310,   41,

       41,   41,   78,  224,   69,   69,   70,   98,   70,   70,
      312,  312,   41,   41,   69,   89,   41,   99,   70,   67,
      181,   91,   83,   78,   41,   96,   41,   97,   41,   83,
       41,   41,   41,   44,   93,   83,   87,   44,   98,   93,
      100,   44,   87,   87,  102,   69,  103,   44,   99,   70,
       44,   44,  179,   83,  315,  315,   94,  173,  104,  105,
       83,   94,  172,  107,   44,   93,   83,   87,   44,   64,
       93,  100,   44,   87,   87,  102,  108,  103,   44,  109,
      101,   44,   44,   45,  110,   45,  101,   94,   45,  104,
      105,   45,   94,   45,  107,   45,  106,  111,  112,  114,

       45,   45,  106,  112,  112,   45,   63,  108,  115,   60,
      109,  101,  116,  117,   45,  110,   45,  101,  118,   45,
      118,  119,   45,   58,   45,  120,   45,  106,  111,  112,
      114,   45,   45,  106,  112,  112,   45,   90,  121,  115,
       90,  123,  125,  116,  117,  122,  127,  129,   90,  118,
       90,  118,  119,  130,   90,  122,  120,   90,   55,  126,
      131,  316,  316,  126,  128,  128,  132,   54,   90,  121,
      133,   90,  123,  125,   25,  134,  122,  127,  129,   90,
      135,   90,  136,  137,  130,   90,  122,  138,   90,   95,
      126,  131,   95,   95,  126,  128,  128,  132,   95,  139,

       95,  133,  140,  141,  142,   95,  134,  143,  144,  143,
      145,  135,  143,  136,  137,  148,  150,  151,  138,  152,
       95,  153,  148,   95,   95,  154,  155,  156,  149,   95,
      139,   95,  157,  140,  141,  142,   95,  149,  143,  144,
      143,  145,  158,  143,  149,  149,  148,  150,  151,  161,
      152,  163,  153,  148,  159,  167,  154,  155,  156,  149,
      162,  165,  159,  157,  166,  165,  168,  162,  149,  162,
      166,  169,  170,  158,  171,  149,  149,  190,  193,   20,
      161,  194,  163,  180,  180,  159,  167,  180,  180,  182,
      182,  162,  165,  159,  195,  166,  165,  168,  162,  182,

      162,  166,  169,  170,  197,  171,  183,  183,  190,  193,
      183,  183,  194,  198,  199,  200,  201,  202,  203,  204,
      205,  206,  207,  208,  209,  195,  210,  211,  212,  213,
      182,  201,  215,  213,  216,  197,  217,  218,  219,  220,
      221,  222,  223,  225,  198,  199,  200,  201,  202,  203,
      204,  205,  206,  207,  208,  209,  227,  210,  211,  212,
      213,  228,  201,  215,  213,  216,  229,  217,  218,  219,
      220,  221,  222,  223,  225,  226,  230,  231,  232,  234,
      235,  236,  226,  237,  238,  239,  240,  227,  241,  242,
      243,  244,  228,  245,  246,  247,  248,  229,  241,  250,

      252,  253,  255,  256,   18,  258,  226,  230,  231,  232,
      234,  235,  236,  226,  237,  238,  239,  240,  259,  241,
      242,  243,  244,  254,  245,  246,  247,  248,  260,  241,
      250,  252,  253,  255,  256,  254,  258,  261,  262,  263,
      264,  265,  266,  267,  268,  267,  269,  270,  271,  259,
      272,  273,  274,  275,  254,  273,  277,  279,  280,  260,
      274,  281,  282,  283,  284,   14,  254,  285,  261,  262,
      263,  264,  265,  266,  267,  268,  267,  269,  270,  271,
      286,  272,  273,  274,  275,  278,  273,  277,  279,  280,
      287,  274,  281,  282,  283,  284,  278,  288,  285,  289,

      291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
      302,  286,  303,  305,  306,  307,  278,  308,  306,  309,
      304,  287,  317,  318,  319,  320,  322,  324,  288,  327,
      289,  291,  292,  293,  294,  295,  296,  297,  298,  299,
      300,  302,  304,  303,  305,  306,  307,  304,  308,  306,
      309,  304,  329,  317,  318,  319,  320,  322,  324,  331,
      327,  332,  333,  334,  335,  337,  340,  341,  342,  343,
      344,  346,  347,  304,  349,  350,  351,  352,  353,  354,
      355,  356,  357,  329,  358,  361,  362,  364,  365,  370,
      331,  373,  332,  333,  334,  335,  337,  340,  341,  342,

      343,  344,  346,  347,   13,  349,  350,  351,  352,  353,
      354,  355,  356,  357,  366,  358,  361,  362,  364,  365,
      370,  374,  373,  375,  376,  366,  377,  378,  379,  380,
      381,  382,  383,  384,  385,  374,  386,  388,  389,  390,
      391,  392,  394,  395,  396,  366,  397,  398,  396,  402,
      403,  405,  374,  406,  375,  376,  366,  377,  378,  379,
      380,  381,  382,  383,  384,  385,  374,  386,  388,  389,
      390,  391,  392,  394,  395,  396,  407,  397,  398,  396,
      402,  403,  405,  408,  406,  409,  410,  412,  414,  416,
      417,  418,  421,  423,  424,  425,  426,  427,  428,  421,

      429,  430,  431,  434,  435,  431,  440,  407,  441,  442,
      443,  444,  445,  446,  408,  447,  409,  410,  412,  414,
      416,  417,  418,  421,  423,  424,  425,  426,  427,  428,
      421,  429,  430,  431,  434,  435,  431,  440,  448,  441,
      442,  443,  444,  445,  446,  449,  447,  450,  453,  454,
      455,  456,  457,  458,  460,  461,  463,  464,  465,  466,
      471,  472,  473,  475,  476,  477,  480,  482,  477,  448,
      484,  485,  486,  465,  489,  490,  449,  491,  450,  453,
      454,  455,  456,  457,  458,  460,  461,  463,  464,  465,
      466,  471,  472,  473,  475,  476,  477,  480,  482,  477,

      492,  484,  485,  486,  465,  489,  490,  493,  491,  494,
      496,  497,  499,  500,  501,  502,  503,  505,  507,  508,
      510,  511,  512,  514,  515,  516,  518,  519,  520,  522,
      523,  492,  525,  526,  527,  528,  529,  531,  493,  532,
      494,  496,  497,  499,  500,  501,  502,  503,  505,  507,
      508,  510,  511,  512,  514,  515,  516,  518,  519,  520,
      522,  523,  535,  525,  526,  527,  528,  529,  531,  536,
      532,  537,  538,  539,  540,  541,  542,  543,  544,  545,
      546,  547,  550,  551,  555,  556,  558,  559,  562,  563,
      564,  566,  567,  535,  568,  569,  571,  575,  577,  578,

      536,  579,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  550,  551,  555,  556,  558,  559,  562,
      563,  564,  566,  567,  580,  568,  569,  571,  575,  577,
      578,  581,  579,  582,  583,  584,  588,  589,  592,  593,
      594,  595,  598,  599,  600,  601,  602,  605,  606,  607,
      608,  611,  612,  613,  617,  580,  618,  620,  621,  622,
      624,  625,  581,  627,  582,  583,  584,  588,  589,  592,
      593,  594,  595,  598,  599,  600,  601,  602,  605,  606,
      607,  608,  611,  612,  613,  617,  628,  618,  620,  621,
      622,  624,  625,  631,  627,  633,  635,  636,  638,  639,

      641,  642,  643,  644,  642,  645,  646,  651,  653,  654,
      656,  657,  658,  659,  660,  660,  661,  628,  663,  664,
      666,  671,  672,  673,  631,  674,  633,  635,  636,  638,
      639,  641,  642,  643,  644,  642,  645,  646,  651,  653,
      654,  656,  657,  658,  659,  660,  660,  661,  675,  663,
      664,  666,  671,  672,  673,  676,  674,  677,  679,  680,
      681,  682,  684,  686,  687,  688,  689,  692,  693,  694,
      699,  703,  704,  705,  706,  707,  710,  713,  714,  675,
      715,  717,  719,  721,  722,  724,  676,  725,  677,  679,
      680,  681,  682,  684,  686,  687,  688,  689,  692,  693,

      694,  699,  703,  704,  705,  706,  707,  710,  713,  714,
      726,  715,  717,  719,  721,  722,  724,  727,  725,  728,
      731,  732,  737,  738,  739,  740,    9,    8,    7,    6,
        5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  726,    0,    0,    0,    0,    0,    0,  727,    0,
      728,  731,  732,  737,  738,  739,  740,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  746,    0,  746,  746,  746,  746,
      746,    0,  746,  747,    0,    0,  747,  747,  747,  747,

      747,  747,  748,  748,  749,    0,  749,  749,  749,  749,
      749,    0,  749,  750,  750,  750,    0,  750,  750,  750,
      750,  750,  751,  751,  751,  751,  751,  751,  751,  751,
      752,  752,  752,  752,    0,  752,  752,  752,  752,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sql_db2.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sql_db2.l"

#include "node.h"
#include "sqlparser_db2_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

std::string escape_double_quotation_db2(const std::string& src, char c) {
    assert(c == '"' || c == '`' || c == ']');
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == c && src[1+i] == c) {
            ret += c;
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return DB2_##name; }
#define YYSTYPE         DB2_STYPE
#define YYLTYPE         DB2_LTYPE

#line 1313 "sqlparser_db2_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1326 "sqlparser_db2_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 119 "sql_db2.l"

#line 1613 "sqlparser_db2_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 743 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 742 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 120 "sql_db2.l"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 121 "sql_db2.l"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 122 "sql_db2.l"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 123 "sql_db2.l"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "sql_db2.l"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 125 "sql_db2.l"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 126 "sql_db2.l"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 127 "sql_db2.l"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 128 "sql_db2.l"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 129 "sql_db2.l"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 130 "sql_db2.l"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 131 "sql_db2.l"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 132 "sql_db2.l"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 133 "sql_db2.l"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 134 "sql_db2.l"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 135 "sql_db2.l"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 136 "sql_db2.l"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 137 "sql_db2.l"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 138 "sql_db2.l"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 139 "sql_db2.l"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 140 "sql_db2.l"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 141 "sql_db2.l"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 142 "sql_db2.l"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 143 "sql_db2.l"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 144 "sql_db2.l"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 145 "sql_db2.l"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 146 "sql_db2.l"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 147 "sql_db2.l"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 148 "sql_db2.l"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 149 "sql_db2.l"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 150 "sql_db2.l"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 151 "sql_db2.l"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 152 "sql_db2.l"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 153 "sql_db2.l"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 154 "sql_db2.l"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 155 "sql_db2.l"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 156 "sql_db2.l"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 157 "sql_db2.l"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 158 "sql_db2.l"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 159 "sql_db2.l"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 160 "sql_db2.l"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 161 "sql_db2.l"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 162 "sql_db2.l"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 163 "sql_db2.l"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 164 "sql_db2.l"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 165 "sql_db2.l"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 166 "sql_db2.l"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 167 "sql_db2.l"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 168 "sql_db2.l"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "sql_db2.l"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 170 "sql_db2.l"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "sql_db2.l"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 172 "sql_db2.l"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 173 "sql_db2.l"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 174 "sql_db2.l"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 175 "sql_db2.l"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 176 "sql_db2.l"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 177 "sql_db2.l"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 178 "sql_db2.l"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 179 "sql_db2.l"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 180 "sql_db2.l"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 181 "sql_db2.l"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 182 "sql_db2.l"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 183 "sql_db2.l"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 184 "sql_db2.l"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 185 "sql_db2.l"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 186 "sql_db2.l"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 187 "sql_db2.l"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 188 "sql_db2.l"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 189 "sql_db2.l"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 190 "sql_db2.l"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 191 "sql_db2.l"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 192 "sql_db2.l"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 193 "sql_db2.l"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 194 "sql_db2.l"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 195 "sql_db2.l"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 196 "sql_db2.l"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 197 "sql_db2.l"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 198 "sql_db2.l"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 199 "sql_db2.l"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 200 "sql_db2.l"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 201 "sql_db2.l"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 202 "sql_db2.l"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 203 "sql_db2.l"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 204 "sql_db2.l"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 205 "sql_db2.l"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 206 "sql_db2.l"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 207 "sql_db2.l"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 208 "sql_db2.l"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 209 "sql_db2.l"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 210 "sql_db2.l"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 211 "sql_db2.l"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 212 "sql_db2.l"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "sql_db2.l"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 214 "sql_db2.l"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 215 "sql_db2.l"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 216 "sql_db2.l"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 217 "sql_db2.l"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 218 "sql_db2.l"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 219 "sql_db2.l"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 220 "sql_db2.l"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 221 "sql_db2.l"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 222 "sql_db2.l"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 223 "sql_db2.l"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 224 "sql_db2.l"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 225 "sql_db2.l"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 226 "sql_db2.l"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 227 "sql_db2.l"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 228 "sql_db2.l"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 229 "sql_db2.l"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 230 "sql_db2.l"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 231 "sql_db2.l"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 232 "sql_db2.l"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 233 "sql_db2.l"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 234 "sql_db2.l"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 235 "sql_db2.l"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 236 "sql_db2.l"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 237 "sql_db2.l"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 238 "sql_db2.l"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 239 "sql_db2.l"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 240 "sql_db2.l"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 241 "sql_db2.l"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 242 "sql_db2.l"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 243 "sql_db2.l"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 244 "sql_db2.l"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 245 "sql_db2.l"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 246 "sql_db2.l"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 247 "sql_db2.l"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 248 "sql_db2.l"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 249 "sql_db2.l"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 250 "sql_db2.l"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 251 "sql_db2.l"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 252 "sql_db2.l"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 253 "sql_db2.l"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 254 "sql_db2.l"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 255 "sql_db2.l"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 256 "sql_db2.l"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 257 "sql_db2.l"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 258 "sql_db2.l"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 259 "sql_db2.l"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 260 "sql_db2.l"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 261 "sql_db2.l"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 262 "sql_db2.l"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 263 "sql_db2.l"
TOKEN(SKIP)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 264 "sql_db2.l"
TOKEN(LOCKED)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 265 "sql_db2.l"
TOKEN(DATA)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 266 "sql_db2.l"
TOKEN(CS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 267 "sql_db2.l"
TOKEN(UR)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 268 "sql_db2.l"
TOKEN(RS)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 269 "sql_db2.l"
TOKEN(RR)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 270 "sql_db2.l"
TOKEN(QUERYNO)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 271 "sql_db2.l"
TOKEN(FETCH)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 272 "sql_db2.l"
TOKEN(FIRST)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 273 "sql_db2.l"
TOKEN(OPTIMIZE)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 274 "sql_db2.l"
TOKEN(LIMIT)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 275 "sql_db2.l"
TOKEN(TABLE)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 276 "sql_db2.l"
TOKEN(DEGREE)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 277 "sql_db2.l"
TOKEN(SCHEMA)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 278 "sql_db2.l"
TOKEN(TIMEZONE)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 279 "sql_db2.l"
TOKEN(COUNT_BIG)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 280 "sql_db2.l"
TOKEN(USE)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 281 "sql_db2.l"
TOKEN(KEEP)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 282 "sql_db2.l"
TOKEN(EXCLUSIVE)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 283 "sql_db2.l"
TOKEN(LOCKS)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 284 "sql_db2.l"
TOKEN(CARDINALITY)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 285 "sql_db2.l"
TOKEN(BIT)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 286 "sql_db2.l"
TOKEN(MINUTES)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 287 "sql_db2.l"
TOKEN(SHARE)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 288 "sql_db2.l"
TOKEN(WAIT)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 289 "sql_db2.l"
TOKEN(OUTCOME)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 290 "sql_db2.l"
TOKEN(STDDEV)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 291 "sql_db2.l"
TOKEN(OFFSET)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 293 "sql_db2.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return DB2_NULLX;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 298 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return DB2_INTNUM;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 304 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return DB2_INTNUM;
}
	YY_BREAK
case 176:
#line 314 "sql_db2.l"
case 177:
#line 315 "sql_db2.l"
case 178:
YY_RULE_SETUP
#line 315 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return DB2_APPROXNUM;
}
	YY_BREAK
case 179:
#line 323 "sql_db2.l"
case 180:
YY_RULE_SETUP
#line 323 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return DB2_APPROXNUM;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 330 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return DB2_BOOL;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 337 "sql_db2.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return DB2_UNKNOWN;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 342 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return DB2_BOOL;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 349 "sql_db2.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 355 "sql_db2.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 361 "sql_db2.l"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 365 "sql_db2.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 369 "sql_db2.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return DB2_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 378 "sql_db2.l"
{
  //fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return DB2_ERROR;
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 383 "sql_db2.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 389 "sql_db2.l"
{
    ((ParseResult*)yyextra)->buf_ << "]]";
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 393 "sql_db2.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 397 "sql_db2.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = escape_double_quotation_db2(text.substr(1, text.length() - 2), ']');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    yylval->node = nd;
    return DB2_NAME;
}
	YY_BREAK
case YY_STATE_EOF(sb):
#line 409 "sql_db2.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unterminated identifier WITH '['\n");
    return DB2_ERROR;
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 415 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_db2(std::string(yytext+1, yytext + strlen(yytext) - 1), '"');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return DB2_NAME;
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 424 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation_db2(std::string(yytext+1, yytext + strlen(yytext) - 1), '`');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return DB2_NAME;
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 433 "sql_db2.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return DB2_NAME;
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 442 "sql_db2.l"
{ /* ignore */ }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 443 "sql_db2.l"
{ /* ignore */ }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 445 "sql_db2.l"
{ return yytext[0];}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 447 "sql_db2.l"
{ return DB2_CNNOP; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 448 "sql_db2.l"
{ return DB2_COMP_EQ; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 449 "sql_db2.l"
{ return DB2_COMP_GE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 450 "sql_db2.l"
{ return DB2_COMP_GT; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 451 "sql_db2.l"
{ return DB2_COMP_LE; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 452 "sql_db2.l"
{ return DB2_COMP_LT; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 453 "sql_db2.l"
{ return DB2_COMP_NE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 454 "sql_db2.l"
{ return DB2_COMP_NE; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 456 "sql_db2.l"

	YY_BREAK
case 208:
YY_RULE_SETUP
#line 458 "sql_db2.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return DB2_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 465 "sql_db2.l"
{ return DB2_END_P; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 467 "sql_db2.l"
{
    //fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return DB2_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 471 "sql_db2.l"
ECHO;
	YY_BREAK
#line 2830 "sqlparser_db2_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 743 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 743 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 742);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 471 "sql_db2.l"

/***************************
 ** Section 3: User code
 ***************************/



