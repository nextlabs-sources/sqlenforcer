/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_nextlabs_EMDB_EMDBSdk.h"
#include "emdb_sdk.h"
/* Header for class com_nextlabs_EMDB_EMDBSdk */

/*
 * Class:     com_nextlabs_EMDB_EMDBSdk
 * Method:    EMDBInit_
 * Signature: (Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_nextlabs_EMDB_EMDBSdk_EMDBInit_1
  (JNIEnv *env, jclass obj, jstring name, jstring path){
    const char* cname = env->GetStringUTFChars(name,0);
    //const char* cpath = env->GetStringUTFChars(path,0);
    EMDBReturn ret = EMDBInit(cname);
    return (jint)ret;
  }

/*
 * Class:     com_nextlabs_EMDB_EMDBSdk
 * Method:    EMDBNewUserCtx_
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_nextlabs_EMDB_EMDBSdk_EMDBNewUserCtx_1
  (JNIEnv *env, jclass obj, jstring server, jstring database, jstring schema){
    const char* cserver = env->GetStringUTFChars(server,0);
    const char* cdatabase = env->GetStringUTFChars(database,0);
    const char* cschema = env->GetStringUTFChars(schema,0);
    const char* driver = "driver";
    EMDBUserCtxHandle handle;
    EMDBReturn ret = EMDBNewUserCtx(cserver, cdatabase, cschema, driver, &handle);
    if(ret == EMDB_SUCCESS){
      return (jlong)handle;
    }
    else
    {
      return (jlong)0;
    }
    

  }

/*
 * Class:     com_nextlabs_EMDB_EMDBSdk
 * Method:    EMDBFreeUserCtx_
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_nextlabs_EMDB_EMDBSdk_EMDBFreeUserCtx_1
  (JNIEnv * env, jclass obj, jlong user){
    EMDBUserCtxHandle handle = (EMDBUserCtxHandle)user;
    EMDBReturn ret = EMDBFreeUserCtx(handle);
    return (jint)ret;
  }

/*
 * Class:     com_nextlabs_EMDB_EMDBSdk
 * Method:    EMDBSetUserCtxProperty_
 * Signature: (JLjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_nextlabs_EMDB_EMDBSdk_EMDBSetUserCtxProperty_1
  (JNIEnv * env, jclass obj, jlong user, jstring key, jstring value){
    const char* ckey = env->GetStringUTFChars(key,0);
    const char* cvalue = env->GetStringUTFChars(value,0);

    EMDBReturn ret = EMDBSetUserCtxProperty((EMDBUserCtxHandle)user, ckey, cvalue);
    return (jint)ret;
  }

/*
 * Class:     com_nextlabs_EMDB_EMDBSdk
 * Method:    EMDBClearUserCtxProperty_
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_nextlabs_EMDB_EMDBSdk_EMDBClearUserCtxProperty_1
  (JNIEnv *env, jclass obj, jlong user){
    EMDBReturn ret = EMDBClearUserCtxProperty((EMDBUserCtxHandle)user);
    return (jint)ret;
  }

/*
 * Class:     com_nextlabs_EMDB_EMDBSdk
 * Method:    EMDBEvalSql_
 * Signature: (Ljava/lang/String;JLcom/nextlabs/EMDB/EMDBSdk/EMDBResult;)I
 */
JNIEXPORT jint JNICALL Java_com_nextlabs_EMDB_EMDBSdk_EMDBEvalSql_1
  (JNIEnv *env, jclass obj, jstring sql, jlong user, jobject result){
    const char* csql = env->GetStringUTFChars(sql,0);

    EMDBResultHandle tmp_result;
    EMDBReturn ret = EMDBNewResult(&tmp_result);
    if (ret != EMDB_SUCCESS)
    {
      return (jint)ret;
    }
    ret = EMDBEvalSql(csql, (EMDBUserCtxHandle)user, tmp_result);
    if (ret != EMDB_SUCCESS)
    {
      return (jint)ret;
    }

    
    EMDBResultCode code;
    ret = EMDBResultGetCode(tmp_result, &code);
    const char* pdetail = nullptr;
    ret = EMDBResultGetDetail(tmp_result, &pdetail);
    if (ret != EMDB_SUCCESS)
    {
      return (jint)ret;
    }

    jstring jstrDetail = env->NewStringUTF(pdetail);
    jint jintCode = (jint)code;

    ret = EMDBFreeResult(tmp_result);
    if (ret != EMDB_SUCCESS)
    {
      return (jint)ret;
    }

    jclass result_class = env->GetObjectClass(result);  
    jmethodID result_init = env->GetMethodID(result_class,"init","(ILjava/lang/String;)V");
    env->CallVoidMethod(result, result_init, jintCode, jstrDetail); 

    return (jint)ret;

  }