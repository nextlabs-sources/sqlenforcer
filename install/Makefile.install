# Common make file for building installers
#
# IsCmdBld.exe commandline options:
#	-a <product configuration>
#	-b Output directory
#	-n								No compile
#	-p <ISM file>
#	-q3                             Only compile setup.rul
#	-r <release name>
#	-x								Stop on error
#	-y <product version>


#
# Prepare environment
#

CURRENT_MKFILE_PATH    := $(abspath $(lastword $(MAKEFILE_LIST)))
CURRENT_MKFILE_DIRPATH := $(dir $(CURRENT_MKFILE_PATH))

ifeq ($(ProgramW6432), )
	ENV_OS=x86
	PROGRAM_FILES_X86=C:/Program Files
else
	ENV_OS=x64
	PROGRAM_FILES_X86=C:/Program Files (x86)
endif

ifeq ($(OFFICIALCERT), )
OFFICIALCERT=0
endif

PROGRAM_FILES_X86_DOS=$(subst /,\,$(PROGRAM_FILES_X86))

PERL=/usr/bin/perl
ISCMDBLD=$(PROGRAM_FILES_X86)/InstallShield/2014 SAB/System/IsCmdBld.exe
SIGNTOOL_OFFICIAL_TOOL=$(PROGRAM_FILES_X86)/Windows Kits/8.1/bin/x64/signtool.exe
SIGNTOOL_OFFICIAL_ARGS=sign /ac c:/release/bin/DigiCertAssuredIDRootCA.cer /f c:/release/bin/NextLabs.pfx /p IiVf1itvOrqJ /n "NextLabs Inc." /fd sha256 /tr http://timestamp.digicert.com
SIGNTOOL_OFFICIAL='$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS)

UNIX_NLBUILDROOT=$(subst \,/,$(NLBUILDROOT))
INSTALL_DIR=$(UNIX_NLBUILDROOT)/install
SCRIPT_DIR=$(UNIX_NLBUILDROOT)/install
INSTALL_BUILD_DIR=$(INSTALL_DIR)/build
ASSEMBLY_DIR=$(INSTALL_BUILD_DIR)/data
OUTPUT_DIR=$(INSTALL_BUILD_DIR)/output
PACKAGE64_DIR=$(INSTALL_BUILD_DIR)/package64
PACKAGE_FILE64=$(basename $(MSI_FILE64))-$(VERSION_STR).$(VERSION_BUILD_SHORT)-$(shell date +"%Y%m%d%H%M").zip
PUBLISH_DIR=$(UNIX_NLBUILDROOT)/bin/installer
PACKAGE_ARCHIVE_PATH:=s:/build/release_candidate/DAEForWindows/$(VERSION_STR)/$(VERSION_BUILD_SHORT)/
ARTIFACTS_FILE64:=$(basename $(MSI_FILE64))-$(VERSION_STR).$(VERSION_BUILD_SHORT)-$(shell date +"%Y%m%d%H%M")-arch.zip
ARTIFACTS_DIR:=$(UNIX_NLBUILDROOT)/bin/archive
ARTIFACTS_ARCHIVE_PATH:=s:/build/release_candidate/artifacts/DAEForWindows/$(VERSION_STR)/$(VERSION_BUILD_SHORT)/
DEPLOY_DIR=$(subst /,\,$(OUTPUT_DIR))
ISM_FILE_DIR=$(SCRIPT_DIR)
MSI_FILE_PATH=$(subst \,/,$(OUTPUT_DIR)/PROJECT_ASSISTANT/SINGLE_MSI_IMAGE/DiskImages/DISK1/$(MSI_FILE64))
UNIX_PACKAGE64_DIR=$(subst \,/,$(PACKAGE64_DIR))
UNIX_PACKAGE_FILE64=$(subst \,/,$(PACKAGE_FILE64))

EETEMPDIR := $(shell mktemp -d)

TARGETS=

ifneq ($(ISM_PRODUCT_CONFIG64), )
	TARGETS+= installer64
endif


#
# Print environment
#

$(info -----------------------------------------------------------------------------)
$(info BUILDTYPE                   = $(BUILDTYPE))
$(info VERSION_BUILD               = $(VERSION_BUILD))
$(info VERSION_BUILD_SHORT         = $(VERSION_BUILD_SHORT))
$(info BUILD_NUMBER                = $(BUILD_NUMBER))
$(info OFFICIALCERT                = $(OFFICIALCERT))
$(info Product directory name      = $(PRODUCT_DIR_NAME))
$(info Packaging list              = $(PACKAGE_LIST))
$(info Install directory           = $(INSTALL_DIR))
$(info Assembly directory          = $(ASSEMBLY_DIR))
$(info Output directory            = $(OUTPUT_DIR))
$(info Package directory (64-bit)  = $(PACKAGE64_DIR))
$(info Package file (64-bit)       = $(PACKAGE_FILE64))
$(info Publish directory           = $(PUBLISH_DIR))
$(info Current OS                  = $(ENV_OS))
$(info Program files (x86)         = $(PROGRAM_FILES_X86))
$(info Program files (x86) DOS     = $(PROGRAM_FILES_X86_DOS))
$(info ISM_TEMPLATE_FILE_NAME_X86  = $(ISM_TEMPLATE_FILE_NAME_X86))
$(info ISM_TEMPLATE_FILE_NAME_X64  = $(ISM_TEMPLATE_FILE_NAME_X64))
$(info ISM release                 = $(ISM_RELEASE))
$(info ISM product config (64-bit) = $(ISM_PRODUCT_CONFIG64))
$(info ISM output directory        = $(DEPLOY_DIR))
$(info -----------------------------------------------------------------------------)

INSTALL_ROOT=${UNIX_NLBUILDROOT}/install
ODBC_ROOT=$(INSTALL_ROOT)/ODBC
JDBC_ROOT=$(INSTALL_ROOT)/JDBC
OCI_ROOT=$(INSTALL_ROOT)/OCI
ADODOTNET_ROOT=$(INSTALL_ROOT)/ADO.NET
INSTALLER_ROOT=$(INSTALL_ROOT)/installer
DRIVERS_ROOT=$(INSTALL_ROOT)/Drivers
COMMON_ROOT=$(INSTALL_ROOT)/Common

#
# Targets
#

.PHONY: all
all:$(TARGETS) publish archive
.PHONY: assembly
assembly:
	@echo "INFO: Prepare assembly for file info"
	mkdir -p $(ODBC_ROOT)
	mkdir -p $(ODBC_ROOT)/bin64
	mkdir -p $(ODBC_ROOT)/bin32
	mkdir -p $(JDBC_ROOT)
	mkdir -p $(OCI_ROOT)
	mkdir -p $(OCI_ROOT)/bin64
	mkdir -p $(OCI_ROOT)/bin32
	mkdir -p $(ADODOTNET_ROOT)
	mkdir -p $(ADODOTNET_ROOT)/bin64
	mkdir -p $(ADODOTNET_ROOT)/bin32
	mkdir -p $(INSTALLER_ROOT)
	mkdir -p $(DRIVERS_ROOT)
	mkdir -p $(INSTALL_ROOT)/config
	mkdir -p $(COMMON_ROOT)
	mkdir -p $(COMMON_ROOT)/bin32
	mkdir -p $(COMMON_ROOT)/bin64

	#cp -pf ${OPENSSLDIR}/OpenSSL-1.0.1e-Win64/libeay32.dll $(ODBC_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/odbc32.dll $(ODBC_ROOT)/bin64
	#cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/policymgr.dll $(ODBC_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/sql2003.dll $(COMMON_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/sqlenforcer.dll $(COMMON_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/sqlenforcer.lib $(COMMON_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/sqlenforcer/include/emdb_sdk.h $(COMMON_ROOT)
	#cp -pf ${OPENSSLDIR}/OpenSSL-1.0.1e-Win64/ssleay32.dll $(ODBC_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/userattribute.dll $(COMMON_ROOT)/bin64
	#cp -pf ${OPENSSLDIR}/OpenSSL-1.0.1e-Win32/libeay32.dll $(COMMON_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/odbc32.dll $(ODBC_ROOT)/bin32
	#cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/policymgr.dll $(ODBC_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/sql2003.dll $(COMMON_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/sqlenforcer.dll $(COMMON_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/sqlenforcer.lib $(COMMON_ROOT)/bin32
	#cp -pf ${OPENSSLDIR}/OpenSSL-1.0.1e-Win32/ssleay32.dll $(COMMON_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/userattribute.dll $(COMMON_ROOT)/bin32
	
	cp -pf ${UNIX_NLBUILDROOT}/config/dae_encrypt.exe $(INSTALL_ROOT)/config
	cp -pf ${UNIX_NLBUILDROOT}/config/config.ini $(INSTALL_ROOT)/config
	cp -pf ${UNIX_NLBUILDROOT}/config/userattr.ini $(INSTALL_ROOT)/config
	cp -pf ${UNIX_NLBUILDROOT}/install/tool/install_manager/config/install_config.xml $(INSTALL_ROOT)/config
	cp -pf ${UNIX_NLBUILDROOT}/windows/ADO.NET/config/System.data.AsmExtend.xml $(INSTALL_ROOT)/config
	cp -pf ${UNIX_NLBUILDROOT}/windows/ADO.NET/config/Microsoft.Data.SqlClient.AsmExtend.xml $(INSTALL_ROOT)/config

	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/ojdbc8.jar $(JDBC_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/ngdbc.jar $(JDBC_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/mssql-jdbc.jar $(JDBC_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/emdb1.3.jar $(JDBC_ROOT)
	#cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/com.nextlabs.jdbc.jni.jar $(JDBC_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/QueryCloudAZSDKCpp.dll $(COMMON_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/QueryCloudAZSDKCpp.dll $(COMMON_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/ssleay32.dll $(COMMON_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/ssleay32.dll $(COMMON_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/libeay32.dll $(COMMON_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/libeay32.dll $(COMMON_ROOT)/bin32

	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/oci.dll $(OCI_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/oci.dll $(OCI_ROOT)/bin32

	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/AsmExtend.Plugin.dll $(ADODOTNET_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x86_${BUILDTYPE}/AsmExtend.Plugin.dll $(ADODOTNET_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_AnyCPU_${BUILDTYPE}/AsmExtend.Plugin.dll $(ADODOTNET_ROOT)

	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/dae_for_windows_service.exe $(INSTALLER_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/dae_for_windows_service.exe.config $(INSTALLER_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/log4net.dll $(INSTALLER_ROOT)
	
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/install_manager.exe $(INSTALLER_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/bin/win_x64_${BUILDTYPE}/NSudoAPI.dll $(INSTALLER_ROOT)

	cp -pf ${UNIX_NLBUILDROOT}/windows/ADO.NET/bin64/System.Data.dll $(ADODOTNET_ROOT)/bin64
	cp -pf ${UNIX_NLBUILDROOT}/windows/ADO.NET/bin32/System.Data.dll $(ADODOTNET_ROOT)/bin32
	cp -pf ${UNIX_NLBUILDROOT}/windows/ADO.NET/AnyCPU/Microsoft.Data.SqlClient.dll $(ADODOTNET_ROOT)

	cp -pf ${UNIX_NLBUILDROOT}/windows/Drivers/ngdbc.jar $(DRIVERS_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/windows/Drivers/ojdbc8.jar $(DRIVERS_ROOT)
	cp -pf ${UNIX_NLBUILDROOT}/windows/Drivers/mssql-jdbc-9.2.0.jre8.jar $(DRIVERS_ROOT)

.PHONY: signexedll
signexedll: assembly
	@if [ $(OFFICIALCERT) -ne 0 ]; then \
		echo "INFO: Sign dll and exe files"; \
		$(eval DLLS=$(shell find $(INSTALL_ROOT) -name '*.dll')) \
		$(eval EXES=$(shell find $(INSTALL_ROOT) -name '*.exe')) \
		echo DLLS=$(DLLS); \
		echo EXES=$(EXES); \
		for dll in $(DLLS); do \
			echo "'$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS) $$dll" ; \
			'$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS) $$dll ; \
		done; \
		for exe in $(EXES); do \
			echo "'$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS) $$exe" ; \
			'$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS) $$exe ; \
		done \
	fi

.PHONY: installer64
installer64: assembly signexedll
	@echo "INFO: Create 64-bit installer package"
	'$(ISCMDBLD)' -x -p "$(ISM_FILE_DIR)/$(ISM_TEMPLATE_FILE_NAME_X64)" -b "$(DEPLOY_DIR)" -y "$(VERSION_STR).$(VERSION_BUILD_SHORT)"
	@if [ $(OFFICIALCERT) -ne 0 ]; then \
		echo "INFO: Signing $(MSI_FILE64) msi file" ; \
		echo "'$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS) $(OUTPUT_DIR)/PROJECT_ASSISTANT/SINGLE_MSI_IMAGE/DiskImages/DISK1/$(MSI_FILE64)" ; \
		'$(SIGNTOOL_OFFICIAL_TOOL)' $(SIGNTOOL_OFFICIAL_ARGS) $(OUTPUT_DIR)/PROJECT_ASSISTANT/SINGLE_MSI_IMAGE/DiskImages/DISK1/$(MSI_FILE64) ; \
	fi
.PHONY: clean
clean:
	@rm -rf $(INSTALL_BUILD_DIR)

.PHONY: publish
publish:
	@echo "INFO: Publish installer packages"
	@echo "Debug : UNIX_PACKAGE64_DIR = $(UNIX_PACKAGE64_DIR)"
	@if [ "${MSI_FILE64}" != "" ]; then \
		echo "INFO:   Create 64-bit installer package" ; \
		mkdir -p $(PACKAGE64_DIR) ; \
		cp $(MSI_FILE_PATH) $(UNIX_PACKAGE64_DIR) ; \
		cp -pf $(INSTALL_ROOT)/config/install_config.xml $(UNIX_PACKAGE64_DIR) ; \
		cp -pf $(INSTALL_ROOT)/config/config.ini $(UNIX_PACKAGE64_DIR) ; \
		cp -pf $(INSTALL_ROOT)/config/dae_encrypt.exe $(UNIX_PACKAGE64_DIR) ; \
		cd $(UNIX_PACKAGE64_DIR); zip ../$(UNIX_PACKAGE_FILE64) * ; \
	fi
	mkdir -p $(PUBLISH_DIR)
	cp -pf $(INSTALL_BUILD_DIR)/*.zip $(PUBLISH_DIR)
	@echo "INFO:   Content of $(PUBLISH_DIR)"
	@ls -al $(PUBLISH_DIR)

.PHONY: archive
archive: publish
	@echo "INFO: Archive PDB files"
	mkdir -p $(PACKAGE_ARCHIVE_PATH)
	cp -pf $(INSTALL_BUILD_DIR)/*.zip $(PACKAGE_ARCHIVE_PATH)
	@echo "INFO:   Content of $(PACKAGE_ARCHIVE_PATH)"
	@ls -al $(PACKAGE_ARCHIVE_PATH)
	mkdir -p $(ARTIFACTS_ARCHIVE_PATH)
	cd ${UNIX_NLBUILDROOT}/bin/ ; \
	zip -r $(PUBLISH_DIR)/$(ARTIFACTS_FILE64) win_x86_release win_x64_release win_AnyCPU_Release; \
	cp -pf $(PUBLISH_DIR)/$(ARTIFACTS_FILE64) $(ARTIFACTS_ARCHIVE_PATH)
	@echo "INFO:   Content of $(ARTIFACTS_ARCHIVE_PATH)"
	@ls -al $(ARTIFACTS_ARCHIVE_PATH)
